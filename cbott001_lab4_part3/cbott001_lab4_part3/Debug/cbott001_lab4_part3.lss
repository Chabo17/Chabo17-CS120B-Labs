
cbott001_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000879  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bd  00000000  00000000  00000ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f4  00000000  00000000  0000128e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fc  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000019b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	69 c0       	rjmp	.+210    	; 0x16e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

enum states { wait, zero};


int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x8>
  a6:	1f 92       	push	r1
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs, initialize to 1s
  ac:	81 e2       	ldi	r24, 0x21	; 33
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fc 01       	movw	r30, r24
  b2:	10 82       	st	Z, r1
  b4:	82 e2       	ldi	r24, 0x22	; 34
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
  be:	84 e2       	ldi	r24, 0x24	; 36
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
  c8:	85 e2       	ldi	r24, 0x25	; 37
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	10 82       	st	Z, r1
	
	//so when PINA = 1 increment, when PINA = 2 decrement, when PINA = 3 reset
	enum states FSM = wait;
  d0:	1a 82       	std	Y+2, r1	; 0x02
  d2:	19 82       	std	Y+1, r1	; 0x01
	unsigned char tmp = 0x00;
  d4:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char prog = 0x00;
  d6:	1c 82       	std	Y+4, r1	; 0x04
	while (1)
	{
		unsigned char tmpA = PINA;
  d8:	80 e2       	ldi	r24, 0x20	; 32
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	fc 01       	movw	r30, r24
  de:	80 81       	ld	r24, Z
  e0:	8d 83       	std	Y+5, r24	; 0x05
		
		
		switch(FSM){//A0 = X, A1= Y, A2 = #, A7 = LOCK 
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	9a 81       	ldd	r25, Y+2	; 0x02
  e6:	00 97       	sbiw	r24, 0x00	; 0
  e8:	19 f0       	breq	.+6      	; 0xf0 <main+0x52>
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	71 f1       	breq	.+92     	; 0x14a <main+0xac>
  ee:	33 c0       	rjmp	.+102    	; 0x156 <main+0xb8>
			case wait:
			if(tmpA > 0){
  f0:	8d 81       	ldd	r24, Y+5	; 0x05
  f2:	88 23       	and	r24, r24
  f4:	21 f0       	breq	.+8      	; 0xfe <main+0x60>
				FSM = zero;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	9a 83       	std	Y+2, r25	; 0x02
  fc:	89 83       	std	Y+1, r24	; 0x01
			}
			if(tmpA == 0x01){
  fe:	8d 81       	ldd	r24, Y+5	; 0x05
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	11 f4       	brne	.+4      	; 0x108 <main+0x6a>
				prog= 0x00;
 104:	1c 82       	std	Y+4, r1	; 0x04
				tmp = 0x00;
			} 
			else if(tmpA != 0x00){
				prog = 0x00;
			}
			break;
 106:	2a c0       	rjmp	.+84     	; 0x15c <main+0xbe>
				FSM = zero;
			}
			if(tmpA == 0x01){
				prog= 0x00;
			}
			else if(tmpA == 0x02){
 108:	8d 81       	ldd	r24, Y+5	; 0x05
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	49 f4       	brne	.+18     	; 0x120 <main+0x82>
				if(prog == 0x01){
 10e:	8c 81       	ldd	r24, Y+4	; 0x04
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	21 f4       	brne	.+8      	; 0x11c <main+0x7e>
					tmp = 0x01;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	8b 83       	std	Y+3, r24	; 0x03
					prog =0x00;
 118:	1c 82       	std	Y+4, r1	; 0x04
				tmp = 0x00;
			} 
			else if(tmpA != 0x00){
				prog = 0x00;
			}
			break;
 11a:	20 c0       	rjmp	.+64     	; 0x15c <main+0xbe>
			else if(tmpA == 0x02){
				if(prog == 0x01){
					tmp = 0x01;
					prog =0x00;
				}else {
					prog = 0x00;
 11c:	1c 82       	std	Y+4, r1	; 0x04
				tmp = 0x00;
			} 
			else if(tmpA != 0x00){
				prog = 0x00;
			}
			break;
 11e:	1e c0       	rjmp	.+60     	; 0x15c <main+0xbe>
					prog =0x00;
				}else {
					prog = 0x00;
				}
			}
			else if(tmpA == 0x04){
 120:	8d 81       	ldd	r24, Y+5	; 0x05
 122:	84 30       	cpi	r24, 0x04	; 4
 124:	41 f4       	brne	.+16     	; 0x136 <main+0x98>
				if(prog == 0x00){
 126:	8c 81       	ldd	r24, Y+4	; 0x04
 128:	88 23       	and	r24, r24
 12a:	19 f4       	brne	.+6      	; 0x132 <main+0x94>
					prog = 0x01;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	8c 83       	std	Y+4, r24	; 0x04
				tmp = 0x00;
			} 
			else if(tmpA != 0x00){
				prog = 0x00;
			}
			break;
 130:	15 c0       	rjmp	.+42     	; 0x15c <main+0xbe>
			else if(tmpA == 0x04){
				if(prog == 0x00){
					prog = 0x01;
				}
				else {
					prog = 0x00;
 132:	1c 82       	std	Y+4, r1	; 0x04
				tmp = 0x00;
			} 
			else if(tmpA != 0x00){
				prog = 0x00;
			}
			break;
 134:	13 c0       	rjmp	.+38     	; 0x15c <main+0xbe>
				}
				else {
					prog = 0x00;
				}
			}
			else if(tmpA == 0x80){
 136:	8d 81       	ldd	r24, Y+5	; 0x05
 138:	80 38       	cpi	r24, 0x80	; 128
 13a:	11 f4       	brne	.+4      	; 0x140 <main+0xa2>
				tmp = 0x00;
 13c:	1b 82       	std	Y+3, r1	; 0x03
			} 
			else if(tmpA != 0x00){
				prog = 0x00;
			}
			break;
 13e:	0e c0       	rjmp	.+28     	; 0x15c <main+0xbe>
				}
			}
			else if(tmpA == 0x80){
				tmp = 0x00;
			} 
			else if(tmpA != 0x00){
 140:	8d 81       	ldd	r24, Y+5	; 0x05
 142:	88 23       	and	r24, r24
 144:	59 f0       	breq	.+22     	; 0x15c <main+0xbe>
				prog = 0x00;
 146:	1c 82       	std	Y+4, r1	; 0x04
			}
			break;
 148:	09 c0       	rjmp	.+18     	; 0x15c <main+0xbe>
			
			case zero:
			if(tmpA == 0){
 14a:	8d 81       	ldd	r24, Y+5	; 0x05
 14c:	88 23       	and	r24, r24
 14e:	41 f4       	brne	.+16     	; 0x160 <main+0xc2>
				FSM = wait;
 150:	1a 82       	std	Y+2, r1	; 0x02
 152:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
 154:	05 c0       	rjmp	.+10     	; 0x160 <main+0xc2>
			
			default:
			FSM = wait;
 156:	1a 82       	std	Y+2, r1	; 0x02
 158:	19 82       	std	Y+1, r1	; 0x01
			break;
 15a:	03 c0       	rjmp	.+6      	; 0x162 <main+0xc4>
				tmp = 0x00;
			} 
			else if(tmpA != 0x00){
				prog = 0x00;
			}
			break;
 15c:	00 00       	nop
 15e:	01 c0       	rjmp	.+2      	; 0x162 <main+0xc4>
			
			case zero:
			if(tmpA == 0){
				FSM = wait;
			}
			break;
 160:	00 00       	nop
			default:
			FSM = wait;
			break;
			
		}
		PORTB = tmp;
 162:	85 e2       	ldi	r24, 0x25	; 37
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	2b 81       	ldd	r18, Y+3	; 0x03
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
	}
 16c:	b5 cf       	rjmp	.-150    	; 0xd8 <main+0x3a>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
