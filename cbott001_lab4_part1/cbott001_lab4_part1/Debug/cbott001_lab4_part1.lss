
cbott001_lab4_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000877  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bd  00000000  00000000  00000adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ac  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000418  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	72 c0       	rjmp	.+228    	; 0x180 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

enum states { offRelease, onPress, onRelease, offPress };
	
	
int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x8>
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
    	DDRD = 0x00; PORTD = 0xFF; // Configure port A's 8 pins as inputs, initialize to 1s
  aa:	8a e2       	ldi	r24, 0x2A	; 42
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	10 82       	st	Z, r1
  b2:	8b e2       	ldi	r24, 0x2B	; 43
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
    	DDRB = 0xFF; PORTB = 0x00;
  bc:	84 e2       	ldi	r24, 0x24	; 36
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
  c6:	85 e2       	ldi	r24, 0x25	; 37
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	10 82       	st	Z, r1
		// so I need 4 states
		// 1 for off release, on Press, on release, off press
		
		
			
		enum states FSM = offRelease;
  ce:	1a 82       	std	Y+2, r1	; 0x02
  d0:	19 82       	std	Y+1, r1	; 0x01
		
    while (1) 
    {
		unsigned char tmpA = PINA;
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	80 81       	ld	r24, Z
  da:	8c 83       	std	Y+4, r24	; 0x04
		unsigned char tmpB= 0x01;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	8b 83       	std	Y+3, r24	; 0x03
		
		switch(FSM){
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	9a 81       	ldd	r25, Y+2	; 0x02
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	91 05       	cpc	r25, r1
  e8:	a9 f0       	breq	.+42     	; 0x114 <main+0x76>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	91 05       	cpc	r25, r1
  ee:	30 f0       	brcs	.+12     	; 0xfc <main+0x5e>
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	91 05       	cpc	r25, r1
  f4:	e9 f0       	breq	.+58     	; 0x130 <main+0x92>
  f6:	03 97       	sbiw	r24, 0x03	; 3
  f8:	49 f1       	breq	.+82     	; 0x14c <main+0xae>
  fa:	34 c0       	rjmp	.+104    	; 0x164 <main+0xc6>
		case offRelease:
		if((tmpA & 0x01) == 0x01){
  fc:	8c 81       	ldd	r24, Y+4	; 0x04
  fe:	88 2f       	mov	r24, r24
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	81 70       	andi	r24, 0x01	; 1
 104:	99 27       	eor	r25, r25
 106:	89 2b       	or	r24, r25
 108:	81 f1       	breq	.+96     	; 0x16a <main+0xcc>
			FSM = onPress;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	9a 83       	std	Y+2, r25	; 0x02
 110:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
 112:	2b c0       	rjmp	.+86     	; 0x16a <main+0xcc>
		
		case onPress:
		if((tmpA & 0x01) != 0x01){
 114:	8c 81       	ldd	r24, Y+4	; 0x04
 116:	88 2f       	mov	r24, r24
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	81 70       	andi	r24, 0x01	; 1
 11c:	99 27       	eor	r25, r25
 11e:	89 2b       	or	r24, r25
 120:	21 f4       	brne	.+8      	; 0x12a <main+0x8c>
			FSM = onRelease;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	9a 83       	std	Y+2, r25	; 0x02
 128:	89 83       	std	Y+1, r24	; 0x01
		}
		tmpB = 0x02;
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	8b 83       	std	Y+3, r24	; 0x03
		break;
 12e:	22 c0       	rjmp	.+68     	; 0x174 <main+0xd6>
		
		case onRelease:
		tmpB = 0x02;
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	8b 83       	std	Y+3, r24	; 0x03
		if((tmpA & 0x01) == 0x01){
 134:	8c 81       	ldd	r24, Y+4	; 0x04
 136:	88 2f       	mov	r24, r24
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	81 70       	andi	r24, 0x01	; 1
 13c:	99 27       	eor	r25, r25
 13e:	89 2b       	or	r24, r25
 140:	b1 f0       	breq	.+44     	; 0x16e <main+0xd0>
			FSM = offPress;
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	9a 83       	std	Y+2, r25	; 0x02
 148:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
 14a:	11 c0       	rjmp	.+34     	; 0x16e <main+0xd0>
		
		case offPress:
		tmpB = 0x01;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	8b 83       	std	Y+3, r24	; 0x03
		if((tmpA & 0x01) != 0x01){
 150:	8c 81       	ldd	r24, Y+4	; 0x04
 152:	88 2f       	mov	r24, r24
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	81 70       	andi	r24, 0x01	; 1
 158:	99 27       	eor	r25, r25
 15a:	89 2b       	or	r24, r25
 15c:	51 f4       	brne	.+20     	; 0x172 <main+0xd4>
			FSM = offRelease;
 15e:	1a 82       	std	Y+2, r1	; 0x02
 160:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
 162:	07 c0       	rjmp	.+14     	; 0x172 <main+0xd4>
		
		default:
		FSM = offRelease;
 164:	1a 82       	std	Y+2, r1	; 0x02
 166:	19 82       	std	Y+1, r1	; 0x01
		break;	
 168:	05 c0       	rjmp	.+10     	; 0x174 <main+0xd6>
		switch(FSM){
		case offRelease:
		if((tmpA & 0x01) == 0x01){
			FSM = onPress;
		}
		break;
 16a:	00 00       	nop
 16c:	03 c0       	rjmp	.+6      	; 0x174 <main+0xd6>
		case onRelease:
		tmpB = 0x02;
		if((tmpA & 0x01) == 0x01){
			FSM = offPress;
		}
		break;
 16e:	00 00       	nop
 170:	01 c0       	rjmp	.+2      	; 0x174 <main+0xd6>
		case offPress:
		tmpB = 0x01;
		if((tmpA & 0x01) != 0x01){
			FSM = offRelease;
		}
		break;
 172:	00 00       	nop
		default:
		FSM = offRelease;
		break;	
			
		}
		PORTB = tmpB;
 174:	85 e2       	ldi	r24, 0x25	; 37
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	2b 81       	ldd	r18, Y+3	; 0x03
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
    }
 17e:	a9 cf       	rjmp	.-174    	; 0xd2 <main+0x34>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
