
cbott001_lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e2  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ce  00000000  00000000  00000c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000320  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001c77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	5b c0       	rjmp	.+182    	; 0xbc <__bad_interrupt>
   6:	00 00       	nop
   8:	59 c0       	rjmp	.+178    	; 0xbc <__bad_interrupt>
   a:	00 00       	nop
   c:	57 c0       	rjmp	.+174    	; 0xbc <__bad_interrupt>
   e:	00 00       	nop
  10:	55 c0       	rjmp	.+170    	; 0xbc <__bad_interrupt>
  12:	00 00       	nop
  14:	53 c0       	rjmp	.+166    	; 0xbc <__bad_interrupt>
  16:	00 00       	nop
  18:	51 c0       	rjmp	.+162    	; 0xbc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4f c0       	rjmp	.+158    	; 0xbc <__bad_interrupt>
  1e:	00 00       	nop
  20:	4d c0       	rjmp	.+154    	; 0xbc <__bad_interrupt>
  22:	00 00       	nop
  24:	4b c0       	rjmp	.+150    	; 0xbc <__bad_interrupt>
  26:	00 00       	nop
  28:	49 c0       	rjmp	.+146    	; 0xbc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	47 c0       	rjmp	.+142    	; 0xbc <__bad_interrupt>
  2e:	00 00       	nop
  30:	45 c0       	rjmp	.+138    	; 0xbc <__bad_interrupt>
  32:	00 00       	nop
  34:	43 c0       	rjmp	.+134    	; 0xbc <__bad_interrupt>
  36:	00 00       	nop
  38:	41 c0       	rjmp	.+130    	; 0xbc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3f c0       	rjmp	.+126    	; 0xbc <__bad_interrupt>
  3e:	00 00       	nop
  40:	3d c0       	rjmp	.+122    	; 0xbc <__bad_interrupt>
  42:	00 00       	nop
  44:	3b c0       	rjmp	.+118    	; 0xbc <__bad_interrupt>
  46:	00 00       	nop
  48:	39 c0       	rjmp	.+114    	; 0xbc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	37 c0       	rjmp	.+110    	; 0xbc <__bad_interrupt>
  4e:	00 00       	nop
  50:	35 c0       	rjmp	.+106    	; 0xbc <__bad_interrupt>
  52:	00 00       	nop
  54:	33 c0       	rjmp	.+102    	; 0xbc <__bad_interrupt>
  56:	00 00       	nop
  58:	31 c0       	rjmp	.+98     	; 0xbc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2f c0       	rjmp	.+94     	; 0xbc <__bad_interrupt>
  5e:	00 00       	nop
  60:	2d c0       	rjmp	.+90     	; 0xbc <__bad_interrupt>
  62:	00 00       	nop
  64:	2b c0       	rjmp	.+86     	; 0xbc <__bad_interrupt>
  66:	00 00       	nop
  68:	29 c0       	rjmp	.+82     	; 0xbc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	27 c0       	rjmp	.+78     	; 0xbc <__bad_interrupt>
  6e:	00 00       	nop
  70:	25 c0       	rjmp	.+74     	; 0xbc <__bad_interrupt>
  72:	00 00       	nop
  74:	23 c0       	rjmp	.+70     	; 0xbc <__bad_interrupt>
  76:	00 00       	nop
  78:	21 c0       	rjmp	.+66     	; 0xbc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1f c0       	rjmp	.+62     	; 0xbc <__bad_interrupt>
  7e:	00 00       	nop
  80:	1d c0       	rjmp	.+58     	; 0xbc <__bad_interrupt>
  82:	00 00       	nop
  84:	1b c0       	rjmp	.+54     	; 0xbc <__bad_interrupt>
  86:	00 00       	nop
  88:	19 c0       	rjmp	.+50     	; 0xbc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	e4 00       	.word	0x00e4	; ????
  8e:	e4 00       	.word	0x00e4	; ????
  90:	e4 00       	.word	0x00e4	; ????
  92:	e7 00       	.word	0x00e7	; ????
  94:	e7 00       	.word	0x00e7	; ????
  96:	ea 00       	.word	0x00ea	; ????
  98:	ea 00       	.word	0x00ea	; ????
  9a:	ed 00       	.word	0x00ed	; ????
  9c:	ed 00       	.word	0x00ed	; ????
  9e:	ed 00       	.word	0x00ed	; ????
  a0:	f0 00       	.word	0x00f0	; ????
  a2:	f0 00       	.word	0x00f0	; ????
  a4:	f0 00       	.word	0x00f0	; ????
  a6:	f3 00       	.word	0x00f3	; ????
  a8:	f3 00       	.word	0x00f3	; ????
  aa:	f3 00       	.word	0x00f3	; ????

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e4       	ldi	r29, 0x40	; 64
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	4e d0       	rcall	.+156    	; 0x156 <main>
  ba:	c9 c0       	rjmp	.+402    	; 0x24e <_exit>

000000bc <__bad_interrupt>:
  bc:	a1 cf       	rjmp	.-190    	; 0x0 <__vectors>

000000be <GetBit>:

 

#include <avr/io.h>

unsigned char GetBit(unsigned char x, unsigned char k) {
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	00 d0       	rcall	.+0      	; 0xc4 <GetBit+0x6>
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	88 2f       	mov	r24, r24
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	2a 81       	ldd	r18, Y+2	; 0x02
  d4:	22 2f       	mov	r18, r18
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <GetBit+0x20>
  da:	95 95       	asr	r25
  dc:	87 95       	ror	r24
  de:	2a 95       	dec	r18
  e0:	e2 f7       	brpl	.-8      	; 0xda <GetBit+0x1c>
  e2:	81 70       	andi	r24, 0x01	; 1
  e4:	99 27       	eor	r25, r25
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	89 2b       	or	r24, r25
  ea:	09 f4       	brne	.+2      	; 0xee <GetBit+0x30>
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	82 2f       	mov	r24, r18
}
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <SetBit>:

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <SetBit+0x6>
 100:	1f 92       	push	r1
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	89 83       	std	Y+1, r24	; 0x01
 108:	6a 83       	std	Y+2, r22	; 0x02
 10a:	4b 83       	std	Y+3, r20	; 0x03
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 10c:	8b 81       	ldd	r24, Y+3	; 0x03
 10e:	88 23       	and	r24, r24
 110:	71 f0       	breq	.+28     	; 0x12e <SetBit+0x34>
 112:	8a 81       	ldd	r24, Y+2	; 0x02
 114:	28 2f       	mov	r18, r24
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <SetBit+0x28>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	2a 95       	dec	r18
 124:	e2 f7       	brpl	.-8      	; 0x11e <SetBit+0x24>
 126:	98 2f       	mov	r25, r24
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	89 2b       	or	r24, r25
 12c:	0e c0       	rjmp	.+28     	; 0x14a <SetBit+0x50>
 12e:	8a 81       	ldd	r24, Y+2	; 0x02
 130:	28 2f       	mov	r18, r24
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <SetBit+0x44>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	2a 95       	dec	r18
 140:	e2 f7       	brpl	.-8      	; 0x13a <SetBit+0x40>
 142:	98 2f       	mov	r25, r24
 144:	90 95       	com	r25
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	89 23       	and	r24, r25
}
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <main>:


int main(void)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	00 d0       	rcall	.+0      	; 0x15c <main+0x6>
 15c:	00 d0       	rcall	.+0      	; 0x15e <main+0x8>
 15e:	1f 92       	push	r1
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
    //ok so A0-3 is what the fuel level is at
	// then PC5-0 should graphically show what the fuel is at starts at C5 and you add more bits when you go up by 2
	//PC6 is low fuel and it lights up when fuel is 4 or less
	
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs, initialize to 1s
 164:	81 e2       	ldi	r24, 0x21	; 33
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	10 82       	st	Z, r1
 16c:	82 e2       	ldi	r24, 0x22	; 34
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
 176:	87 e2       	ldi	r24, 0x27	; 39
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
 180:	88 e2       	ldi	r24, 0x28	; 40
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	fc 01       	movw	r30, r24
 186:	10 82       	st	Z, r1
    while (1) 
    {
		unsigned char temp = PINA;
 188:	80 e2       	ldi	r24, 0x20	; 32
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	fc 01       	movw	r30, r24
 18e:	80 81       	ld	r24, Z
 190:	8a 83       	std	Y+2, r24	; 0x02
		unsigned char d =0x00;
 192:	1b 82       	std	Y+3, r1	; 0x03
		unsigned char seated = 0x00;
 194:	1c 82       	std	Y+4, r1	; 0x04
		unsigned char belt = 0x00;
 196:	1d 82       	std	Y+5, r1	; 0x05
		unsigned char tmpC = 0x00;
 198:	19 82       	std	Y+1, r1	; 0x01
		temp = temp & 0x0F;
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	8f 70       	andi	r24, 0x0F	; 15
 19e:	8a 83       	std	Y+2, r24	; 0x02
		
		switch(temp){
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
 1a2:	88 2f       	mov	r24, r24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	09 2e       	mov	r0, r25
 1a8:	00 0c       	add	r0, r0
 1aa:	aa 0b       	sbc	r26, r26
 1ac:	bb 0b       	sbc	r27, r27
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	2f e0       	ldi	r18, 0x0F	; 15
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	84 1b       	sub	r24, r20
 1b8:	95 0b       	sbc	r25, r21
 1ba:	28 17       	cp	r18, r24
 1bc:	39 07       	cpc	r19, r25
 1be:	b0 f0       	brcs	.+44     	; 0x1ec <main+0x96>
 1c0:	8a 5b       	subi	r24, 0xBA	; 186
 1c2:	9f 4f       	sbci	r25, 0xFF	; 255
 1c4:	fc 01       	movw	r30, r24
 1c6:	3a c0       	rjmp	.+116    	; 0x23c <__tablejump2__>
		case 0:
		case 1:
		case 2:
		tmpC = 0x60;
 1c8:	80 e6       	ldi	r24, 0x60	; 96
 1ca:	89 83       	std	Y+1, r24	; 0x01
		break;	
 1cc:	10 c0       	rjmp	.+32     	; 0x1ee <main+0x98>
		
		case 3:
		case 4:
		tmpC = 0x70;
 1ce:	80 e7       	ldi	r24, 0x70	; 112
 1d0:	89 83       	std	Y+1, r24	; 0x01
		break;
 1d2:	0d c0       	rjmp	.+26     	; 0x1ee <main+0x98>
		
		case 5:
		case 6:
		tmpC = 0x38;
 1d4:	88 e3       	ldi	r24, 0x38	; 56
 1d6:	89 83       	std	Y+1, r24	; 0x01
		break;
 1d8:	0a c0       	rjmp	.+20     	; 0x1ee <main+0x98>
		
		case 7:
		case 8:
		case 9:
		tmpC = 0x3C;
 1da:	8c e3       	ldi	r24, 0x3C	; 60
 1dc:	89 83       	std	Y+1, r24	; 0x01
		break;
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <main+0x98>
		
		case 10:
		case 11:
		case 12:
		tmpC = 0x3E;
 1e0:	8e e3       	ldi	r24, 0x3E	; 62
 1e2:	89 83       	std	Y+1, r24	; 0x01
		break;
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <main+0x98>
		
		case 13:
		case 14:
		case 15:
		tmpC = 0x3F;
 1e6:	8f e3       	ldi	r24, 0x3F	; 63
 1e8:	89 83       	std	Y+1, r24	; 0x01
		break ;
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <main+0x98>
		
		default:
		break;
 1ec:	00 00       	nop
			
		}
		
		temp = PINA;
 1ee:	80 e2       	ldi	r24, 0x20	; 32
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	fc 01       	movw	r30, r24
 1f4:	80 81       	ld	r24, Z
 1f6:	8a 83       	std	Y+2, r24	; 0x02
		d = GetBit(temp, 4);
 1f8:	64 e0       	ldi	r22, 0x04	; 4
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	60 df       	rcall	.-320    	; 0xbe <GetBit>
 1fe:	8b 83       	std	Y+3, r24	; 0x03
		seated = GetBit(temp, 5);
 200:	65 e0       	ldi	r22, 0x05	; 5
 202:	8a 81       	ldd	r24, Y+2	; 0x02
 204:	5c df       	rcall	.-328    	; 0xbe <GetBit>
 206:	8c 83       	std	Y+4, r24	; 0x04
		belt = GetBit(temp, 6);
 208:	66 e0       	ldi	r22, 0x06	; 6
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	58 df       	rcall	.-336    	; 0xbe <GetBit>
 20e:	8d 83       	std	Y+5, r24	; 0x05
 210:	8b 81       	ldd	r24, Y+3	; 0x03
		
		if(d && seated && (~belt)){
 212:	88 23       	and	r24, r24
 214:	69 f0       	breq	.+26     	; 0x230 <main+0xda>
 216:	8c 81       	ldd	r24, Y+4	; 0x04
 218:	88 23       	and	r24, r24
 21a:	51 f0       	breq	.+20     	; 0x230 <main+0xda>
 21c:	8d 81       	ldd	r24, Y+5	; 0x05
 21e:	88 2f       	mov	r24, r24
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	29 f0       	breq	.+10     	; 0x230 <main+0xda>
			tmpC =  SetBit(tmpC, 7, 1);	
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	67 e0       	ldi	r22, 0x07	; 7
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	66 df       	rcall	.-308    	; 0xfa <SetBit>
 22e:	89 83       	std	Y+1, r24	; 0x01
 230:	88 e2       	ldi	r24, 0x28	; 40
		}
		
		PORTC = tmpC;
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	29 81       	ldd	r18, Y+1	; 0x01
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
 23a:	a6 cf       	rjmp	.-180    	; 0x188 <main+0x32>

0000023c <__tablejump2__>:
    }
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	00 24       	eor	r0, r0
 242:	00 1c       	adc	r0, r0
 244:	0b be       	out	0x3b, r0	; 59
 246:	07 90       	elpm	r0, Z+
 248:	f6 91       	elpm	r31, Z
 24a:	e0 2d       	mov	r30, r0
 24c:	09 94       	ijmp

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
