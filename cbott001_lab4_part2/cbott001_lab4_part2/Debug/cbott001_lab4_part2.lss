
cbott001_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000886  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c6  00000000  00000000  00000b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fa  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000411  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001a85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	52 c0       	rjmp	.+164    	; 0xaa <__bad_interrupt>
   6:	00 00       	nop
   8:	50 c0       	rjmp	.+160    	; 0xaa <__bad_interrupt>
   a:	00 00       	nop
   c:	4e c0       	rjmp	.+156    	; 0xaa <__bad_interrupt>
   e:	00 00       	nop
  10:	4c c0       	rjmp	.+152    	; 0xaa <__bad_interrupt>
  12:	00 00       	nop
  14:	4a c0       	rjmp	.+148    	; 0xaa <__bad_interrupt>
  16:	00 00       	nop
  18:	48 c0       	rjmp	.+144    	; 0xaa <__bad_interrupt>
  1a:	00 00       	nop
  1c:	46 c0       	rjmp	.+140    	; 0xaa <__bad_interrupt>
  1e:	00 00       	nop
  20:	44 c0       	rjmp	.+136    	; 0xaa <__bad_interrupt>
  22:	00 00       	nop
  24:	42 c0       	rjmp	.+132    	; 0xaa <__bad_interrupt>
  26:	00 00       	nop
  28:	40 c0       	rjmp	.+128    	; 0xaa <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3e c0       	rjmp	.+124    	; 0xaa <__bad_interrupt>
  2e:	00 00       	nop
  30:	3c c0       	rjmp	.+120    	; 0xaa <__bad_interrupt>
  32:	00 00       	nop
  34:	3a c0       	rjmp	.+116    	; 0xaa <__bad_interrupt>
  36:	00 00       	nop
  38:	38 c0       	rjmp	.+112    	; 0xaa <__bad_interrupt>
  3a:	00 00       	nop
  3c:	36 c0       	rjmp	.+108    	; 0xaa <__bad_interrupt>
  3e:	00 00       	nop
  40:	34 c0       	rjmp	.+104    	; 0xaa <__bad_interrupt>
  42:	00 00       	nop
  44:	32 c0       	rjmp	.+100    	; 0xaa <__bad_interrupt>
  46:	00 00       	nop
  48:	30 c0       	rjmp	.+96     	; 0xaa <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2e c0       	rjmp	.+92     	; 0xaa <__bad_interrupt>
  4e:	00 00       	nop
  50:	2c c0       	rjmp	.+88     	; 0xaa <__bad_interrupt>
  52:	00 00       	nop
  54:	2a c0       	rjmp	.+84     	; 0xaa <__bad_interrupt>
  56:	00 00       	nop
  58:	28 c0       	rjmp	.+80     	; 0xaa <__bad_interrupt>
  5a:	00 00       	nop
  5c:	26 c0       	rjmp	.+76     	; 0xaa <__bad_interrupt>
  5e:	00 00       	nop
  60:	24 c0       	rjmp	.+72     	; 0xaa <__bad_interrupt>
  62:	00 00       	nop
  64:	22 c0       	rjmp	.+68     	; 0xaa <__bad_interrupt>
  66:	00 00       	nop
  68:	20 c0       	rjmp	.+64     	; 0xaa <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1e c0       	rjmp	.+60     	; 0xaa <__bad_interrupt>
  6e:	00 00       	nop
  70:	1c c0       	rjmp	.+56     	; 0xaa <__bad_interrupt>
  72:	00 00       	nop
  74:	1a c0       	rjmp	.+52     	; 0xaa <__bad_interrupt>
  76:	00 00       	nop
  78:	18 c0       	rjmp	.+48     	; 0xaa <__bad_interrupt>
  7a:	00 00       	nop
  7c:	16 c0       	rjmp	.+44     	; 0xaa <__bad_interrupt>
  7e:	00 00       	nop
  80:	14 c0       	rjmp	.+40     	; 0xaa <__bad_interrupt>
  82:	00 00       	nop
  84:	12 c0       	rjmp	.+36     	; 0xaa <__bad_interrupt>
  86:	00 00       	nop
  88:	10 c0       	rjmp	.+32     	; 0xaa <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8a 00       	.word	0x008a	; ????
  8e:	a2 00       	.word	0x00a2	; ????
  90:	aa 00       	.word	0x00aa	; ????
  92:	b0 00       	.word	0x00b0	; ????
  94:	b8 00       	.word	0x00b8	; ????
  96:	be 00       	.word	0x00be	; ????
  98:	c4 00       	.word	0x00c4	; ????

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	02 d0       	rcall	.+4      	; 0xac <main>
  a8:	8e c0       	rjmp	.+284    	; 0x1c6 <_exit>

000000aa <__bad_interrupt>:
  aa:	aa cf       	rjmp	.-172    	; 0x0 <__vectors>

000000ac <main>:

enum states { wait, increment,i2, decrement,d2, reset, r2 };


int main(void)
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	00 d0       	rcall	.+0      	; 0xb2 <main+0x6>
  b2:	00 d0       	rcall	.+0      	; 0xb4 <main+0x8>
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs, initialize to 1s
  b8:	81 e2       	ldi	r24, 0x21	; 33
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	fc 01       	movw	r30, r24
  be:	10 82       	st	Z, r1
  c0:	82 e2       	ldi	r24, 0x22	; 34
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	fc 01       	movw	r30, r24
  c8:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
  ca:	87 e2       	ldi	r24, 0x27	; 39
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
  d4:	88 e2       	ldi	r24, 0x28	; 40
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	10 82       	st	Z, r1
	
	//so when PINA = 1 increment, when PINA = 2 decrement, when PINA = 3 reset
	enum states FSM = wait;
  dc:	1a 82       	std	Y+2, r1	; 0x02
  de:	19 82       	std	Y+1, r1	; 0x01
	unsigned char tmpB = 0x07;
  e0:	87 e0       	ldi	r24, 0x07	; 7
  e2:	8b 83       	std	Y+3, r24	; 0x03
	while (1)
	{
		unsigned char tmpA = PINA;
  e4:	80 e2       	ldi	r24, 0x20	; 32
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	fc 01       	movw	r30, r24
  ea:	80 81       	ld	r24, Z
  ec:	8c 83       	std	Y+4, r24	; 0x04
		
		
		switch(FSM){
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	cc 01       	movw	r24, r24
  f4:	a0 e0       	ldi	r26, 0x00	; 0
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	26 e0       	ldi	r18, 0x06	; 6
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	84 1b       	sub	r24, r20
 102:	95 0b       	sbc	r25, r21
 104:	28 17       	cp	r18, r24
 106:	39 07       	cpc	r19, r25
 108:	08 f4       	brcc	.+2      	; 0x10c <main+0x60>
 10a:	44 c0       	rjmp	.+136    	; 0x194 <main+0xe8>
 10c:	8a 5b       	subi	r24, 0xBA	; 186
 10e:	9f 4f       	sbci	r25, 0xFF	; 255
 110:	fc 01       	movw	r30, r24
 112:	50 c0       	rjmp	.+160    	; 0x1b4 <__tablejump2__>
			case wait:
			if(tmpA == 0x01){
 114:	8c 81       	ldd	r24, Y+4	; 0x04
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	29 f4       	brne	.+10     	; 0x124 <main+0x78>
				FSM = increment;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	9a 83       	std	Y+2, r25	; 0x02
 120:	89 83       	std	Y+1, r24	; 0x01
			} else if(tmpA == 0x02){
				FSM = decrement;
			} else if(tmpA == 0x03){
				FSM = reset;
			}
			break;
 122:	3b c0       	rjmp	.+118    	; 0x19a <main+0xee>
		
		switch(FSM){
			case wait:
			if(tmpA == 0x01){
				FSM = increment;
			} else if(tmpA == 0x02){
 124:	8c 81       	ldd	r24, Y+4	; 0x04
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	29 f4       	brne	.+10     	; 0x134 <main+0x88>
				FSM = decrement;
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01
			} else if(tmpA == 0x03){
				FSM = reset;
			}
			break;
 132:	33 c0       	rjmp	.+102    	; 0x19a <main+0xee>
			case wait:
			if(tmpA == 0x01){
				FSM = increment;
			} else if(tmpA == 0x02){
				FSM = decrement;
			} else if(tmpA == 0x03){
 134:	8c 81       	ldd	r24, Y+4	; 0x04
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	81 f5       	brne	.+96     	; 0x19a <main+0xee>
				FSM = reset;
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	9a 83       	std	Y+2, r25	; 0x02
 140:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
 142:	2b c0       	rjmp	.+86     	; 0x19a <main+0xee>
			
			case increment:
			tmpB = tmpB + 1;
 144:	8b 81       	ldd	r24, Y+3	; 0x03
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	8b 83       	std	Y+3, r24	; 0x03
			FSM = i2;
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	9a 83       	std	Y+2, r25	; 0x02
 150:	89 83       	std	Y+1, r24	; 0x01
			break;
 152:	2a c0       	rjmp	.+84     	; 0x1a8 <main+0xfc>
			
			case i2:
			if(tmpA != 0x01){
 154:	8c 81       	ldd	r24, Y+4	; 0x04
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	11 f1       	breq	.+68     	; 0x19e <main+0xf2>
				FSM = wait;
 15a:	1a 82       	std	Y+2, r1	; 0x02
 15c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
 15e:	1f c0       	rjmp	.+62     	; 0x19e <main+0xf2>
			
			case decrement:
			tmpB = tmpB -1;
 160:	8b 81       	ldd	r24, Y+3	; 0x03
 162:	81 50       	subi	r24, 0x01	; 1
 164:	8b 83       	std	Y+3, r24	; 0x03
			FSM = d2;
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	9a 83       	std	Y+2, r25	; 0x02
 16c:	89 83       	std	Y+1, r24	; 0x01
			break;
 16e:	1c c0       	rjmp	.+56     	; 0x1a8 <main+0xfc>
			
			case d2:
			if(tmpA != 0x02){
 170:	8c 81       	ldd	r24, Y+4	; 0x04
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	b1 f0       	breq	.+44     	; 0x1a2 <main+0xf6>
				FSM = wait;
 176:	1a 82       	std	Y+2, r1	; 0x02
 178:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
 17a:	13 c0       	rjmp	.+38     	; 0x1a2 <main+0xf6>
			
			case reset:
			tmpB = 0x00;
 17c:	1b 82       	std	Y+3, r1	; 0x03
			FSM = r2;
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	9a 83       	std	Y+2, r25	; 0x02
 184:	89 83       	std	Y+1, r24	; 0x01
			break;
 186:	10 c0       	rjmp	.+32     	; 0x1a8 <main+0xfc>
			
			case r2:
			if(tmpA != 0x03){
 188:	8c 81       	ldd	r24, Y+4	; 0x04
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	61 f0       	breq	.+24     	; 0x1a6 <main+0xfa>
				FSM = wait;
 18e:	1a 82       	std	Y+2, r1	; 0x02
 190:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <main+0xfa>
			
			default:
			FSM = wait;
 194:	1a 82       	std	Y+2, r1	; 0x02
 196:	19 82       	std	Y+1, r1	; 0x01
			break;
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <main+0xfc>
			} else if(tmpA == 0x02){
				FSM = decrement;
			} else if(tmpA == 0x03){
				FSM = reset;
			}
			break;
 19a:	00 00       	nop
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <main+0xfc>
			
			case i2:
			if(tmpA != 0x01){
				FSM = wait;
			}
			break;
 19e:	00 00       	nop
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <main+0xfc>
			
			case d2:
			if(tmpA != 0x02){
				FSM = wait;
			}
			break;
 1a2:	00 00       	nop
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <main+0xfc>
			
			case r2:
			if(tmpA != 0x03){
				FSM = wait;
			}
			break;
 1a6:	00 00       	nop
			default:
			FSM = wait;
			break;
			
		}
		PORTC = tmpB;
 1a8:	88 e2       	ldi	r24, 0x28	; 40
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	2b 81       	ldd	r18, Y+3	; 0x03
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
	}
 1b2:	98 cf       	rjmp	.-208    	; 0xe4 <main+0x38>

000001b4 <__tablejump2__>:
 1b4:	ee 0f       	add	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	00 24       	eor	r0, r0
 1ba:	00 1c       	adc	r0, r0
 1bc:	0b be       	out	0x3b, r0	; 59
 1be:	07 90       	elpm	r0, Z+
 1c0:	f6 91       	elpm	r31, Z
 1c2:	e0 2d       	mov	r30, r0
 1c4:	09 94       	ijmp

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
