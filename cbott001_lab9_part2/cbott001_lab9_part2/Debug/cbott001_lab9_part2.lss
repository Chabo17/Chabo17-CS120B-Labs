
cbott001_lab9_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000059e  00000632  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800120  00800120  00000652  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000963  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082a  00000000  00000000  0000105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000396  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043d  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ed  00000000  00000000  000020d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000022c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e9       	ldi	r30, 0x9E	; 158
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	79 d0       	rcall	.+242    	; 0x1b6 <main>
  c4:	6a c2       	rjmp	.+1236   	; 0x59a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <set_PWM>:
 */ 


#include <avr/io.h>

void set_PWM(double frequency) {
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	6b 01       	movw	r12, r22
  d2:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
  d4:	9b 01       	movw	r18, r22
  d6:	ac 01       	movw	r20, r24
  d8:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end>
  dc:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <__data_end+0x1>
  e0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end+0x2>
  e4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x3>
  e8:	df d0       	rcall	.+446    	; 0x2a8 <__cmpsf2>
  ea:	88 23       	and	r24, r24
  ec:	09 f4       	brne	.+2      	; 0xf0 <set_PWM+0x28>
  ee:	4e c0       	rjmp	.+156    	; 0x18c <set_PWM+0xc4>
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	a9 01       	movw	r20, r18
  f6:	c7 01       	movw	r24, r14
  f8:	b6 01       	movw	r22, r12
  fa:	d6 d0       	rcall	.+428    	; 0x2a8 <__cmpsf2>
  fc:	81 11       	cpse	r24, r1
  fe:	06 c0       	rjmp	.+12     	; 0x10c <set_PWM+0x44>
 100:	e1 e9       	ldi	r30, 0x91	; 145
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 70       	andi	r24, 0x08	; 8
 108:	80 83       	st	Z, r24
 10a:	05 c0       	rjmp	.+10     	; 0x116 <set_PWM+0x4e>
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
 10c:	e1 e9       	ldi	r30, 0x91	; 145
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	83 60       	ori	r24, 0x03	; 3
 114:	80 83       	st	Z, r24
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR0A = 0xFFFF; }
 116:	28 e5       	ldi	r18, 0x58	; 88
 118:	39 e3       	ldi	r19, 0x39	; 57
 11a:	44 e7       	ldi	r20, 0x74	; 116
 11c:	5f e3       	ldi	r21, 0x3F	; 63
 11e:	c7 01       	movw	r24, r14
 120:	b6 01       	movw	r22, r12
 122:	c2 d0       	rcall	.+388    	; 0x2a8 <__cmpsf2>
 124:	88 23       	and	r24, r24
 126:	1c f4       	brge	.+6      	; 0x12e <set_PWM+0x66>
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	87 bd       	out	0x27, r24	; 39
 12c:	23 c0       	rjmp	.+70     	; 0x174 <set_PWM+0xac>
		
		// prevents OCR0A from underflowing, using prescaler 64					// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	34 e2       	ldi	r19, 0x24	; 36
 132:	44 ef       	ldi	r20, 0xF4	; 244
 134:	56 e4       	ldi	r21, 0x46	; 70
 136:	c7 01       	movw	r24, r14
 138:	b6 01       	movw	r22, r12
 13a:	c8 d1       	rcall	.+912    	; 0x4cc <__gesf2>
 13c:	18 16       	cp	r1, r24
 13e:	2c f4       	brge	.+10     	; 0x14a <set_PWM+0x82>
 140:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 144:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 148:	15 c0       	rjmp	.+42     	; 0x174 <set_PWM+0xac>
		
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	53 e4       	ldi	r21, 0x43	; 67
 152:	c7 01       	movw	r24, r14
 154:	b6 01       	movw	r22, r12
 156:	be d1       	rcall	.+892    	; 0x4d4 <__mulsf3>
 158:	9b 01       	movw	r18, r22
 15a:	ac 01       	movw	r20, r24
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	74 e2       	ldi	r23, 0x24	; 36
 160:	84 ef       	ldi	r24, 0xF4	; 244
 162:	9a e4       	ldi	r25, 0x4A	; 74
 164:	a5 d0       	rcall	.+330    	; 0x2b0 <__divsf3>
 166:	0c d1       	rcall	.+536    	; 0x380 <__fixsfsi>
 168:	61 50       	subi	r22, 0x01	; 1
 16a:	71 09       	sbc	r23, r1
 16c:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 170:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

		TCNT3 = 0; // resets counter
 174:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 178:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		current_frequency = frequency; // Updates the current frequency
 17c:	c0 92 20 01 	sts	0x0120, r12	; 0x800120 <__data_end>
 180:	d0 92 21 01 	sts	0x0121, r13	; 0x800121 <__data_end+0x1>
 184:	e0 92 22 01 	sts	0x0122, r14	; 0x800122 <__data_end+0x2>
 188:	f0 92 23 01 	sts	0x0123, r15	; 0x800123 <__data_end+0x3>
	}
}
 18c:	ff 90       	pop	r15
 18e:	ef 90       	pop	r14
 190:	df 90       	pop	r13
 192:	cf 90       	pop	r12
 194:	08 95       	ret

00000196 <PWM_on>:

void PWM_on() {
	TCCR3A = (1 << COM3A0);
 196:	80 e4       	ldi	r24, 0x40	; 64
 198:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
 19c:	8b e0       	ldi	r24, 0x0B	; 11
 19e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	cb 01       	movw	r24, r22
 1a8:	8f cf       	rjmp	.-226    	; 0xc8 <set_PWM>
 1aa:	08 95       	ret

000001ac <PWM_off>:
}

void PWM_off() {
	TCCR3A = 0x00;
 1ac:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B = 0x00;
 1b0:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 1b4:	08 95       	ret

000001b6 <main>:
}


int main(void)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	a0 97       	sbiw	r28, 0x20	; 32
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF;
 1ca:	11 b8       	out	0x01, r1	; 1
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 1d0:	84 b9       	out	0x04, r24	; 4
 1d2:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 1d4:	8a b9       	out	0x0a, r24	; 10
 1d6:	1b b8       	out	0x0b, r1	; 11
	float notes[8] = {261.63, 293.66, 329.63, 349.23, 392, 440, 493.88, 523.25};
 1d8:	80 e2       	ldi	r24, 0x20	; 32
 1da:	e0 e0       	ldi	r30, 0x00	; 0
 1dc:	f1 e0       	ldi	r31, 0x01	; 1
 1de:	de 01       	movw	r26, r28
 1e0:	11 96       	adiw	r26, 0x01	; 1
 1e2:	01 90       	ld	r0, Z+
 1e4:	0d 92       	st	X+, r0
 1e6:	8a 95       	dec	r24
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x2c>
	unsigned char b = ~PINA;
 1ea:	f0 b0       	in	r15, 0x00	; 0
 1ec:	f0 94       	com	r15
    /* Replace with your application code */
	unsigned char i=3;
	unsigned char FSM = 1;
	unsigned char pow = 0x00;
 1ee:	d1 2c       	mov	r13, r1
	DDRD = 0xFF; PORTD = 0x00;
	float notes[8] = {261.63, 293.66, 329.63, 349.23, 392, 440, 493.88, 523.25};
	unsigned char b = ~PINA;
    /* Replace with your application code */
	unsigned char i=3;
	unsigned char FSM = 1;
 1f0:	11 e0       	ldi	r17, 0x01	; 1
	DDRB = 0xFF; PORTB = 0x00;
	DDRD = 0xFF; PORTD = 0x00;
	float notes[8] = {261.63, 293.66, 329.63, 349.23, 392, 440, 493.88, 523.25};
	unsigned char b = ~PINA;
    /* Replace with your application code */
	unsigned char i=3;
 1f2:	03 e0       	ldi	r16, 0x03	; 3
				FSM = 2;
			}
			break;
			case 2:
			if((~PINA & 0x0F) == 0x00){
				FSM = 3;
 1f4:	0f 2e       	mov	r0, r31
 1f6:	f3 e0       	ldi	r31, 0x03	; 3
 1f8:	bf 2e       	mov	r11, r31
 1fa:	f0 2d       	mov	r31, r0
					}
				}
				else{
					PWM_off();
				}
				FSM = 1;
 1fc:	ee 24       	eor	r14, r14
 1fe:	e3 94       	inc	r14
			break;
			case 3:
				if((b & 0x01) == 0x01){
					if(pow == 1){
						PWM_off();
						pow = 0;
 200:	a1 2c       	mov	r10, r1
    {
		switch(FSM){
			case 1:
			if(~PINA & 0x0F){
				b = ~PINA & 0x0F;
				FSM = 2;
 202:	68 94       	set
 204:	cc 24       	eor	r12, r12
 206:	c1 f8       	bld	r12, 1
	unsigned char FSM = 1;
	unsigned char pow = 0x00;
	//PWM_on();
    while (1) 
    {
		switch(FSM){
 208:	12 30       	cpi	r17, 0x02	; 2
 20a:	99 f0       	breq	.+38     	; 0x232 <main+0x7c>
 20c:	13 30       	cpi	r17, 0x03	; 3
 20e:	d9 f0       	breq	.+54     	; 0x246 <main+0x90>
 210:	11 30       	cpi	r17, 0x01	; 1
 212:	d1 f5       	brne	.+116    	; 0x288 <main+0xd2>
			case 1:
			if(~PINA & 0x0F){
 214:	80 b1       	in	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	80 95       	com	r24
 21a:	90 95       	com	r25
 21c:	8f 70       	andi	r24, 0x0F	; 15
 21e:	99 27       	eor	r25, r25
 220:	89 2b       	or	r24, r25
 222:	91 f1       	breq	.+100    	; 0x288 <main+0xd2>
				b = ~PINA & 0x0F;
 224:	f0 b0       	in	r15, 0x00	; 0
 226:	8f 2d       	mov	r24, r15
 228:	80 95       	com	r24
 22a:	8f 70       	andi	r24, 0x0F	; 15
 22c:	f8 2e       	mov	r15, r24
				FSM = 2;
 22e:	1c 2d       	mov	r17, r12
 230:	2b c0       	rjmp	.+86     	; 0x288 <main+0xd2>
			}
			break;
			case 2:
			if((~PINA & 0x0F) == 0x00){
 232:	80 b1       	in	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	80 95       	com	r24
 238:	90 95       	com	r25
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	99 27       	eor	r25, r25
 23e:	89 2b       	or	r24, r25
 240:	19 f5       	brne	.+70     	; 0x288 <main+0xd2>
				FSM = 3;
 242:	1b 2d       	mov	r17, r11
 244:	21 c0       	rjmp	.+66     	; 0x288 <main+0xd2>
			}
			break;
			case 3:
				if((b & 0x01) == 0x01){
 246:	f0 fe       	sbrs	r15, 0
 248:	0b c0       	rjmp	.+22     	; 0x260 <main+0xaa>
					if(pow == 1){
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	d8 12       	cpse	r13, r24
 24e:	04 c0       	rjmp	.+8      	; 0x258 <main+0xa2>
						PWM_off();
 250:	ad df       	rcall	.-166    	; 0x1ac <PWM_off>
						pow = 0;
 252:	da 2c       	mov	r13, r10
					}
				}
				else{
					PWM_off();
				}
				FSM = 1;
 254:	1e 2d       	mov	r17, r14
					if(pow == 1){
						PWM_off();
						pow = 0;
					}
					else{
						PWM_on();
 256:	18 c0       	rjmp	.+48     	; 0x288 <main+0xd2>
 258:	9e df       	rcall	.-196    	; 0x196 <PWM_on>
						
						pow = 1;
 25a:	de 2c       	mov	r13, r14
					}
				}
				else{
					PWM_off();
				}
				FSM = 1;
 25c:	1e 2d       	mov	r17, r14
 25e:	14 c0       	rjmp	.+40     	; 0x288 <main+0xd2>
					else{
						PWM_on();
						
						pow = 1;
					}
				} else if((b & 0x02) == 0x02){
 260:	f1 fe       	sbrs	r15, 1
 262:	05 c0       	rjmp	.+10     	; 0x26e <main+0xb8>
					if(i<7){
 264:	07 30       	cpi	r16, 0x07	; 7
 266:	68 f4       	brcc	.+26     	; 0x282 <main+0xcc>
						i=i+1;
 268:	0f 5f       	subi	r16, 0xFF	; 255
					}
				}
				else{
					PWM_off();
				}
				FSM = 1;
 26a:	1e 2d       	mov	r17, r14
 26c:	0d c0       	rjmp	.+26     	; 0x288 <main+0xd2>
				} else if((b & 0x02) == 0x02){
					if(i<7){
						i=i+1;
					}
				}
				else if((b & 0x04) == 0x04){
 26e:	f2 fe       	sbrs	r15, 2
 270:	05 c0       	rjmp	.+10     	; 0x27c <main+0xc6>
					if(i>0){
 272:	00 23       	and	r16, r16
 274:	41 f0       	breq	.+16     	; 0x286 <main+0xd0>
						i=i-1;
 276:	01 50       	subi	r16, 0x01	; 1
					}
				}
				else{
					PWM_off();
				}
				FSM = 1;
 278:	1e 2d       	mov	r17, r14
					if(i>0){
						i=i-1;
					}
				}
				else{
					PWM_off();
 27a:	06 c0       	rjmp	.+12     	; 0x288 <main+0xd2>
 27c:	97 df       	rcall	.-210    	; 0x1ac <PWM_off>
				}
				FSM = 1;
 27e:	1e 2d       	mov	r17, r14
 280:	03 c0       	rjmp	.+6      	; 0x288 <main+0xd2>
 282:	1e 2d       	mov	r17, r14
 284:	01 c0       	rjmp	.+2      	; 0x288 <main+0xd2>
 286:	1e 2d       	mov	r17, r14
				break;
			
		}		
		//PWM_off();
		set_PWM(notes[i]);
 288:	e1 e0       	ldi	r30, 0x01	; 1
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	ec 0f       	add	r30, r28
 28e:	fd 1f       	adc	r31, r29
 290:	84 e0       	ldi	r24, 0x04	; 4
 292:	08 9f       	mul	r16, r24
 294:	e0 0d       	add	r30, r0
 296:	f1 1d       	adc	r31, r1
 298:	11 24       	eor	r1, r1
 29a:	60 81       	ld	r22, Z
 29c:	71 81       	ldd	r23, Z+1	; 0x01
 29e:	82 81       	ldd	r24, Z+2	; 0x02
 2a0:	93 81       	ldd	r25, Z+3	; 0x03
 2a2:	12 df       	rcall	.-476    	; 0xc8 <set_PWM>
		PORTD = i;
 2a4:	0b b9       	out	0x0b, r16	; 11
    }
 2a6:	b0 cf       	rjmp	.-160    	; 0x208 <main+0x52>

000002a8 <__cmpsf2>:
 2a8:	9c d0       	rcall	.+312    	; 0x3e2 <__fp_cmp>
 2aa:	08 f4       	brcc	.+2      	; 0x2ae <__cmpsf2+0x6>
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	08 95       	ret

000002b0 <__divsf3>:
 2b0:	0c d0       	rcall	.+24     	; 0x2ca <__divsf3x>
 2b2:	d2 c0       	rjmp	.+420    	; 0x458 <__fp_round>
 2b4:	ca d0       	rcall	.+404    	; 0x44a <__fp_pscB>
 2b6:	40 f0       	brcs	.+16     	; 0x2c8 <__divsf3+0x18>
 2b8:	c1 d0       	rcall	.+386    	; 0x43c <__fp_pscA>
 2ba:	30 f0       	brcs	.+12     	; 0x2c8 <__divsf3+0x18>
 2bc:	21 f4       	brne	.+8      	; 0x2c6 <__divsf3+0x16>
 2be:	5f 3f       	cpi	r21, 0xFF	; 255
 2c0:	19 f0       	breq	.+6      	; 0x2c8 <__divsf3+0x18>
 2c2:	b3 c0       	rjmp	.+358    	; 0x42a <__fp_inf>
 2c4:	51 11       	cpse	r21, r1
 2c6:	fc c0       	rjmp	.+504    	; 0x4c0 <__fp_szero>
 2c8:	b6 c0       	rjmp	.+364    	; 0x436 <__fp_nan>

000002ca <__divsf3x>:
 2ca:	d7 d0       	rcall	.+430    	; 0x47a <__fp_split3>
 2cc:	98 f3       	brcs	.-26     	; 0x2b4 <__divsf3+0x4>

000002ce <__divsf3_pse>:
 2ce:	99 23       	and	r25, r25
 2d0:	c9 f3       	breq	.-14     	; 0x2c4 <__divsf3+0x14>
 2d2:	55 23       	and	r21, r21
 2d4:	b1 f3       	breq	.-20     	; 0x2c2 <__divsf3+0x12>
 2d6:	95 1b       	sub	r25, r21
 2d8:	55 0b       	sbc	r21, r21
 2da:	bb 27       	eor	r27, r27
 2dc:	aa 27       	eor	r26, r26
 2de:	62 17       	cp	r22, r18
 2e0:	73 07       	cpc	r23, r19
 2e2:	84 07       	cpc	r24, r20
 2e4:	38 f0       	brcs	.+14     	; 0x2f4 <__divsf3_pse+0x26>
 2e6:	9f 5f       	subi	r25, 0xFF	; 255
 2e8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ea:	22 0f       	add	r18, r18
 2ec:	33 1f       	adc	r19, r19
 2ee:	44 1f       	adc	r20, r20
 2f0:	aa 1f       	adc	r26, r26
 2f2:	a9 f3       	breq	.-22     	; 0x2de <__divsf3_pse+0x10>
 2f4:	33 d0       	rcall	.+102    	; 0x35c <__divsf3_pse+0x8e>
 2f6:	0e 2e       	mov	r0, r30
 2f8:	3a f0       	brmi	.+14     	; 0x308 <__divsf3_pse+0x3a>
 2fa:	e0 e8       	ldi	r30, 0x80	; 128
 2fc:	30 d0       	rcall	.+96     	; 0x35e <__divsf3_pse+0x90>
 2fe:	91 50       	subi	r25, 0x01	; 1
 300:	50 40       	sbci	r21, 0x00	; 0
 302:	e6 95       	lsr	r30
 304:	00 1c       	adc	r0, r0
 306:	ca f7       	brpl	.-14     	; 0x2fa <__divsf3_pse+0x2c>
 308:	29 d0       	rcall	.+82     	; 0x35c <__divsf3_pse+0x8e>
 30a:	fe 2f       	mov	r31, r30
 30c:	27 d0       	rcall	.+78     	; 0x35c <__divsf3_pse+0x8e>
 30e:	66 0f       	add	r22, r22
 310:	77 1f       	adc	r23, r23
 312:	88 1f       	adc	r24, r24
 314:	bb 1f       	adc	r27, r27
 316:	26 17       	cp	r18, r22
 318:	37 07       	cpc	r19, r23
 31a:	48 07       	cpc	r20, r24
 31c:	ab 07       	cpc	r26, r27
 31e:	b0 e8       	ldi	r27, 0x80	; 128
 320:	09 f0       	breq	.+2      	; 0x324 <__divsf3_pse+0x56>
 322:	bb 0b       	sbc	r27, r27
 324:	80 2d       	mov	r24, r0
 326:	bf 01       	movw	r22, r30
 328:	ff 27       	eor	r31, r31
 32a:	93 58       	subi	r25, 0x83	; 131
 32c:	5f 4f       	sbci	r21, 0xFF	; 255
 32e:	2a f0       	brmi	.+10     	; 0x33a <__divsf3_pse+0x6c>
 330:	9e 3f       	cpi	r25, 0xFE	; 254
 332:	51 05       	cpc	r21, r1
 334:	68 f0       	brcs	.+26     	; 0x350 <__divsf3_pse+0x82>
 336:	79 c0       	rjmp	.+242    	; 0x42a <__fp_inf>
 338:	c3 c0       	rjmp	.+390    	; 0x4c0 <__fp_szero>
 33a:	5f 3f       	cpi	r21, 0xFF	; 255
 33c:	ec f3       	brlt	.-6      	; 0x338 <__divsf3_pse+0x6a>
 33e:	98 3e       	cpi	r25, 0xE8	; 232
 340:	dc f3       	brlt	.-10     	; 0x338 <__divsf3_pse+0x6a>
 342:	86 95       	lsr	r24
 344:	77 95       	ror	r23
 346:	67 95       	ror	r22
 348:	b7 95       	ror	r27
 34a:	f7 95       	ror	r31
 34c:	9f 5f       	subi	r25, 0xFF	; 255
 34e:	c9 f7       	brne	.-14     	; 0x342 <__divsf3_pse+0x74>
 350:	88 0f       	add	r24, r24
 352:	91 1d       	adc	r25, r1
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	97 f9       	bld	r25, 7
 35a:	08 95       	ret
 35c:	e1 e0       	ldi	r30, 0x01	; 1
 35e:	66 0f       	add	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	88 1f       	adc	r24, r24
 364:	bb 1f       	adc	r27, r27
 366:	62 17       	cp	r22, r18
 368:	73 07       	cpc	r23, r19
 36a:	84 07       	cpc	r24, r20
 36c:	ba 07       	cpc	r27, r26
 36e:	20 f0       	brcs	.+8      	; 0x378 <__divsf3_pse+0xaa>
 370:	62 1b       	sub	r22, r18
 372:	73 0b       	sbc	r23, r19
 374:	84 0b       	sbc	r24, r20
 376:	ba 0b       	sbc	r27, r26
 378:	ee 1f       	adc	r30, r30
 37a:	88 f7       	brcc	.-30     	; 0x35e <__divsf3_pse+0x90>
 37c:	e0 95       	com	r30
 37e:	08 95       	ret

00000380 <__fixsfsi>:
 380:	04 d0       	rcall	.+8      	; 0x38a <__fixunssfsi>
 382:	68 94       	set
 384:	b1 11       	cpse	r27, r1
 386:	9c c0       	rjmp	.+312    	; 0x4c0 <__fp_szero>
 388:	08 95       	ret

0000038a <__fixunssfsi>:
 38a:	7f d0       	rcall	.+254    	; 0x48a <__fp_splitA>
 38c:	88 f0       	brcs	.+34     	; 0x3b0 <__fixunssfsi+0x26>
 38e:	9f 57       	subi	r25, 0x7F	; 127
 390:	90 f0       	brcs	.+36     	; 0x3b6 <__fixunssfsi+0x2c>
 392:	b9 2f       	mov	r27, r25
 394:	99 27       	eor	r25, r25
 396:	b7 51       	subi	r27, 0x17	; 23
 398:	a0 f0       	brcs	.+40     	; 0x3c2 <__fixunssfsi+0x38>
 39a:	d1 f0       	breq	.+52     	; 0x3d0 <__fixunssfsi+0x46>
 39c:	66 0f       	add	r22, r22
 39e:	77 1f       	adc	r23, r23
 3a0:	88 1f       	adc	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	1a f0       	brmi	.+6      	; 0x3ac <__fixunssfsi+0x22>
 3a6:	ba 95       	dec	r27
 3a8:	c9 f7       	brne	.-14     	; 0x39c <__fixunssfsi+0x12>
 3aa:	12 c0       	rjmp	.+36     	; 0x3d0 <__fixunssfsi+0x46>
 3ac:	b1 30       	cpi	r27, 0x01	; 1
 3ae:	81 f0       	breq	.+32     	; 0x3d0 <__fixunssfsi+0x46>
 3b0:	86 d0       	rcall	.+268    	; 0x4be <__fp_zero>
 3b2:	b1 e0       	ldi	r27, 0x01	; 1
 3b4:	08 95       	ret
 3b6:	83 c0       	rjmp	.+262    	; 0x4be <__fp_zero>
 3b8:	67 2f       	mov	r22, r23
 3ba:	78 2f       	mov	r23, r24
 3bc:	88 27       	eor	r24, r24
 3be:	b8 5f       	subi	r27, 0xF8	; 248
 3c0:	39 f0       	breq	.+14     	; 0x3d0 <__fixunssfsi+0x46>
 3c2:	b9 3f       	cpi	r27, 0xF9	; 249
 3c4:	cc f3       	brlt	.-14     	; 0x3b8 <__fixunssfsi+0x2e>
 3c6:	86 95       	lsr	r24
 3c8:	77 95       	ror	r23
 3ca:	67 95       	ror	r22
 3cc:	b3 95       	inc	r27
 3ce:	d9 f7       	brne	.-10     	; 0x3c6 <__fixunssfsi+0x3c>
 3d0:	3e f4       	brtc	.+14     	; 0x3e0 <__fixunssfsi+0x56>
 3d2:	90 95       	com	r25
 3d4:	80 95       	com	r24
 3d6:	70 95       	com	r23
 3d8:	61 95       	neg	r22
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	8f 4f       	sbci	r24, 0xFF	; 255
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
 3e0:	08 95       	ret

000003e2 <__fp_cmp>:
 3e2:	99 0f       	add	r25, r25
 3e4:	00 08       	sbc	r0, r0
 3e6:	55 0f       	add	r21, r21
 3e8:	aa 0b       	sbc	r26, r26
 3ea:	e0 e8       	ldi	r30, 0x80	; 128
 3ec:	fe ef       	ldi	r31, 0xFE	; 254
 3ee:	16 16       	cp	r1, r22
 3f0:	17 06       	cpc	r1, r23
 3f2:	e8 07       	cpc	r30, r24
 3f4:	f9 07       	cpc	r31, r25
 3f6:	c0 f0       	brcs	.+48     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3f8:	12 16       	cp	r1, r18
 3fa:	13 06       	cpc	r1, r19
 3fc:	e4 07       	cpc	r30, r20
 3fe:	f5 07       	cpc	r31, r21
 400:	98 f0       	brcs	.+38     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 402:	62 1b       	sub	r22, r18
 404:	73 0b       	sbc	r23, r19
 406:	84 0b       	sbc	r24, r20
 408:	95 0b       	sbc	r25, r21
 40a:	39 f4       	brne	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	0a 26       	eor	r0, r26
 40e:	61 f0       	breq	.+24     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 410:	23 2b       	or	r18, r19
 412:	24 2b       	or	r18, r20
 414:	25 2b       	or	r18, r21
 416:	21 f4       	brne	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 418:	08 95       	ret
 41a:	0a 26       	eor	r0, r26
 41c:	09 f4       	brne	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	a1 40       	sbci	r26, 0x01	; 1
 420:	a6 95       	lsr	r26
 422:	8f ef       	ldi	r24, 0xFF	; 255
 424:	81 1d       	adc	r24, r1
 426:	81 1d       	adc	r24, r1
 428:	08 95       	ret

0000042a <__fp_inf>:
 42a:	97 f9       	bld	r25, 7
 42c:	9f 67       	ori	r25, 0x7F	; 127
 42e:	80 e8       	ldi	r24, 0x80	; 128
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	08 95       	ret

00000436 <__fp_nan>:
 436:	9f ef       	ldi	r25, 0xFF	; 255
 438:	80 ec       	ldi	r24, 0xC0	; 192
 43a:	08 95       	ret

0000043c <__fp_pscA>:
 43c:	00 24       	eor	r0, r0
 43e:	0a 94       	dec	r0
 440:	16 16       	cp	r1, r22
 442:	17 06       	cpc	r1, r23
 444:	18 06       	cpc	r1, r24
 446:	09 06       	cpc	r0, r25
 448:	08 95       	ret

0000044a <__fp_pscB>:
 44a:	00 24       	eor	r0, r0
 44c:	0a 94       	dec	r0
 44e:	12 16       	cp	r1, r18
 450:	13 06       	cpc	r1, r19
 452:	14 06       	cpc	r1, r20
 454:	05 06       	cpc	r0, r21
 456:	08 95       	ret

00000458 <__fp_round>:
 458:	09 2e       	mov	r0, r25
 45a:	03 94       	inc	r0
 45c:	00 0c       	add	r0, r0
 45e:	11 f4       	brne	.+4      	; 0x464 <__fp_round+0xc>
 460:	88 23       	and	r24, r24
 462:	52 f0       	brmi	.+20     	; 0x478 <__fp_round+0x20>
 464:	bb 0f       	add	r27, r27
 466:	40 f4       	brcc	.+16     	; 0x478 <__fp_round+0x20>
 468:	bf 2b       	or	r27, r31
 46a:	11 f4       	brne	.+4      	; 0x470 <__fp_round+0x18>
 46c:	60 ff       	sbrs	r22, 0
 46e:	04 c0       	rjmp	.+8      	; 0x478 <__fp_round+0x20>
 470:	6f 5f       	subi	r22, 0xFF	; 255
 472:	7f 4f       	sbci	r23, 0xFF	; 255
 474:	8f 4f       	sbci	r24, 0xFF	; 255
 476:	9f 4f       	sbci	r25, 0xFF	; 255
 478:	08 95       	ret

0000047a <__fp_split3>:
 47a:	57 fd       	sbrc	r21, 7
 47c:	90 58       	subi	r25, 0x80	; 128
 47e:	44 0f       	add	r20, r20
 480:	55 1f       	adc	r21, r21
 482:	59 f0       	breq	.+22     	; 0x49a <__fp_splitA+0x10>
 484:	5f 3f       	cpi	r21, 0xFF	; 255
 486:	71 f0       	breq	.+28     	; 0x4a4 <__fp_splitA+0x1a>
 488:	47 95       	ror	r20

0000048a <__fp_splitA>:
 48a:	88 0f       	add	r24, r24
 48c:	97 fb       	bst	r25, 7
 48e:	99 1f       	adc	r25, r25
 490:	61 f0       	breq	.+24     	; 0x4aa <__fp_splitA+0x20>
 492:	9f 3f       	cpi	r25, 0xFF	; 255
 494:	79 f0       	breq	.+30     	; 0x4b4 <__fp_splitA+0x2a>
 496:	87 95       	ror	r24
 498:	08 95       	ret
 49a:	12 16       	cp	r1, r18
 49c:	13 06       	cpc	r1, r19
 49e:	14 06       	cpc	r1, r20
 4a0:	55 1f       	adc	r21, r21
 4a2:	f2 cf       	rjmp	.-28     	; 0x488 <__fp_split3+0xe>
 4a4:	46 95       	lsr	r20
 4a6:	f1 df       	rcall	.-30     	; 0x48a <__fp_splitA>
 4a8:	08 c0       	rjmp	.+16     	; 0x4ba <__fp_splitA+0x30>
 4aa:	16 16       	cp	r1, r22
 4ac:	17 06       	cpc	r1, r23
 4ae:	18 06       	cpc	r1, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	f1 cf       	rjmp	.-30     	; 0x496 <__fp_splitA+0xc>
 4b4:	86 95       	lsr	r24
 4b6:	71 05       	cpc	r23, r1
 4b8:	61 05       	cpc	r22, r1
 4ba:	08 94       	sec
 4bc:	08 95       	ret

000004be <__fp_zero>:
 4be:	e8 94       	clt

000004c0 <__fp_szero>:
 4c0:	bb 27       	eor	r27, r27
 4c2:	66 27       	eor	r22, r22
 4c4:	77 27       	eor	r23, r23
 4c6:	cb 01       	movw	r24, r22
 4c8:	97 f9       	bld	r25, 7
 4ca:	08 95       	ret

000004cc <__gesf2>:
 4cc:	8a df       	rcall	.-236    	; 0x3e2 <__fp_cmp>
 4ce:	08 f4       	brcc	.+2      	; 0x4d2 <__gesf2+0x6>
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	08 95       	ret

000004d4 <__mulsf3>:
 4d4:	0b d0       	rcall	.+22     	; 0x4ec <__mulsf3x>
 4d6:	c0 cf       	rjmp	.-128    	; 0x458 <__fp_round>
 4d8:	b1 df       	rcall	.-158    	; 0x43c <__fp_pscA>
 4da:	28 f0       	brcs	.+10     	; 0x4e6 <__mulsf3+0x12>
 4dc:	b6 df       	rcall	.-148    	; 0x44a <__fp_pscB>
 4de:	18 f0       	brcs	.+6      	; 0x4e6 <__mulsf3+0x12>
 4e0:	95 23       	and	r25, r21
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <__mulsf3+0x12>
 4e4:	a2 cf       	rjmp	.-188    	; 0x42a <__fp_inf>
 4e6:	a7 cf       	rjmp	.-178    	; 0x436 <__fp_nan>
 4e8:	11 24       	eor	r1, r1
 4ea:	ea cf       	rjmp	.-44     	; 0x4c0 <__fp_szero>

000004ec <__mulsf3x>:
 4ec:	c6 df       	rcall	.-116    	; 0x47a <__fp_split3>
 4ee:	a0 f3       	brcs	.-24     	; 0x4d8 <__mulsf3+0x4>

000004f0 <__mulsf3_pse>:
 4f0:	95 9f       	mul	r25, r21
 4f2:	d1 f3       	breq	.-12     	; 0x4e8 <__mulsf3+0x14>
 4f4:	95 0f       	add	r25, r21
 4f6:	50 e0       	ldi	r21, 0x00	; 0
 4f8:	55 1f       	adc	r21, r21
 4fa:	62 9f       	mul	r22, r18
 4fc:	f0 01       	movw	r30, r0
 4fe:	72 9f       	mul	r23, r18
 500:	bb 27       	eor	r27, r27
 502:	f0 0d       	add	r31, r0
 504:	b1 1d       	adc	r27, r1
 506:	63 9f       	mul	r22, r19
 508:	aa 27       	eor	r26, r26
 50a:	f0 0d       	add	r31, r0
 50c:	b1 1d       	adc	r27, r1
 50e:	aa 1f       	adc	r26, r26
 510:	64 9f       	mul	r22, r20
 512:	66 27       	eor	r22, r22
 514:	b0 0d       	add	r27, r0
 516:	a1 1d       	adc	r26, r1
 518:	66 1f       	adc	r22, r22
 51a:	82 9f       	mul	r24, r18
 51c:	22 27       	eor	r18, r18
 51e:	b0 0d       	add	r27, r0
 520:	a1 1d       	adc	r26, r1
 522:	62 1f       	adc	r22, r18
 524:	73 9f       	mul	r23, r19
 526:	b0 0d       	add	r27, r0
 528:	a1 1d       	adc	r26, r1
 52a:	62 1f       	adc	r22, r18
 52c:	83 9f       	mul	r24, r19
 52e:	a0 0d       	add	r26, r0
 530:	61 1d       	adc	r22, r1
 532:	22 1f       	adc	r18, r18
 534:	74 9f       	mul	r23, r20
 536:	33 27       	eor	r19, r19
 538:	a0 0d       	add	r26, r0
 53a:	61 1d       	adc	r22, r1
 53c:	23 1f       	adc	r18, r19
 53e:	84 9f       	mul	r24, r20
 540:	60 0d       	add	r22, r0
 542:	21 1d       	adc	r18, r1
 544:	82 2f       	mov	r24, r18
 546:	76 2f       	mov	r23, r22
 548:	6a 2f       	mov	r22, r26
 54a:	11 24       	eor	r1, r1
 54c:	9f 57       	subi	r25, 0x7F	; 127
 54e:	50 40       	sbci	r21, 0x00	; 0
 550:	8a f0       	brmi	.+34     	; 0x574 <__mulsf3_pse+0x84>
 552:	e1 f0       	breq	.+56     	; 0x58c <__mulsf3_pse+0x9c>
 554:	88 23       	and	r24, r24
 556:	4a f0       	brmi	.+18     	; 0x56a <__mulsf3_pse+0x7a>
 558:	ee 0f       	add	r30, r30
 55a:	ff 1f       	adc	r31, r31
 55c:	bb 1f       	adc	r27, r27
 55e:	66 1f       	adc	r22, r22
 560:	77 1f       	adc	r23, r23
 562:	88 1f       	adc	r24, r24
 564:	91 50       	subi	r25, 0x01	; 1
 566:	50 40       	sbci	r21, 0x00	; 0
 568:	a9 f7       	brne	.-22     	; 0x554 <__mulsf3_pse+0x64>
 56a:	9e 3f       	cpi	r25, 0xFE	; 254
 56c:	51 05       	cpc	r21, r1
 56e:	70 f0       	brcs	.+28     	; 0x58c <__mulsf3_pse+0x9c>
 570:	5c cf       	rjmp	.-328    	; 0x42a <__fp_inf>
 572:	a6 cf       	rjmp	.-180    	; 0x4c0 <__fp_szero>
 574:	5f 3f       	cpi	r21, 0xFF	; 255
 576:	ec f3       	brlt	.-6      	; 0x572 <__mulsf3_pse+0x82>
 578:	98 3e       	cpi	r25, 0xE8	; 232
 57a:	dc f3       	brlt	.-10     	; 0x572 <__mulsf3_pse+0x82>
 57c:	86 95       	lsr	r24
 57e:	77 95       	ror	r23
 580:	67 95       	ror	r22
 582:	b7 95       	ror	r27
 584:	f7 95       	ror	r31
 586:	e7 95       	ror	r30
 588:	9f 5f       	subi	r25, 0xFF	; 255
 58a:	c1 f7       	brne	.-16     	; 0x57c <__mulsf3_pse+0x8c>
 58c:	fe 2b       	or	r31, r30
 58e:	88 0f       	add	r24, r24
 590:	91 1d       	adc	r25, r1
 592:	96 95       	lsr	r25
 594:	87 95       	ror	r24
 596:	97 f9       	bld	r25, 7
 598:	08 95       	ret

0000059a <_exit>:
 59a:	f8 94       	cli

0000059c <__stop_program>:
 59c:	ff cf       	rjmp	.-2      	; 0x59c <__stop_program>
