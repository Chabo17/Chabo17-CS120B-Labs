
SpaceIvaders.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00001a92  00001b26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  00800186  00800186  00001bac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001c48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001245  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bc  00000000  00000000  00002fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ec8  00000000  00000000  00003979  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00004844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000680  00000000  00000000  00004c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080c  00000000  00000000  00005288  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00005a94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
       2:	00 00       	nop
       4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
       6:	00 00       	nop
       8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
       a:	00 00       	nop
       c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
       e:	00 00       	nop
      10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
      12:	00 00       	nop
      14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d5 c0       	rjmp	.+426    	; 0x1e0 <__vector_13>
      36:	00 00       	nop
      38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	48 04       	cpc	r4, r8
      8e:	a5 04       	cpc	r10, r5
      90:	ca 04       	cpc	r12, r10
      92:	d5 04       	cpc	r13, r5
      94:	eb 04       	cpc	r14, r11
      96:	f6 04       	cpc	r15, r6
      98:	01 05       	cpc	r16, r1
      9a:	e0 04       	cpc	r14, r0

0000009c <__ctors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf ef       	ldi	r28, 0xFF	; 255
      a2:	d0 e4       	ldi	r29, 0x40	; 64
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
      a8:	11 e0       	ldi	r17, 0x01	; 1
      aa:	a0 e0       	ldi	r26, 0x00	; 0
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	e2 e9       	ldi	r30, 0x92	; 146
      b0:	fa e1       	ldi	r31, 0x1A	; 26
      b2:	00 e0       	ldi	r16, 0x00	; 0
      b4:	0b bf       	out	0x3b, r16	; 59
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
      b8:	07 90       	elpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a6 38       	cpi	r26, 0x86	; 134
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
      c2:	21 e0       	ldi	r18, 0x01	; 1
      c4:	a6 e8       	ldi	r26, 0x86	; 134
      c6:	b1 e0       	ldi	r27, 0x01	; 1
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	ad 3c       	cpi	r26, 0xCD	; 205
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	d4 d6       	rcall	.+3496   	; 0xe7c <main>
      d4:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <_exit>

000000d8 <__bad_interrupt>:
      d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <time>:
      da:	fc 01       	movw	r30, r24
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <__system_time>
      e4:	70 91 ca 01 	lds	r23, 0x01CA	; 0x8001ca <__system_time+0x1>
      e8:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <__system_time+0x2>
      ec:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <__system_time+0x3>
      f0:	0f be       	out	0x3f, r0	; 63
      f2:	30 97       	sbiw	r30, 0x00	; 0
      f4:	21 f0       	breq	.+8      	; 0xfe <time+0x24>
      f6:	60 83       	st	Z, r22
      f8:	71 83       	std	Z+1, r23	; 0x01
      fa:	82 83       	std	Z+2, r24	; 0x02
      fc:	93 83       	std	Z+3, r25	; 0x03
      fe:	08 95       	ret

00000100 <TimerSet>:
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	00 d0       	rcall	.+0      	; 0x106 <TimerSet+0x6>
     106:	00 d0       	rcall	.+0      	; 0x108 <TimerSet+0x8>
     108:	cd b7       	in	r28, 0x3d	; 61
     10a:	de b7       	in	r29, 0x3e	; 62
     10c:	69 83       	std	Y+1, r22	; 0x01
     10e:	7a 83       	std	Y+2, r23	; 0x02
     110:	8b 83       	std	Y+3, r24	; 0x03
     112:	9c 83       	std	Y+4, r25	; 0x04
     114:	89 81       	ldd	r24, Y+1	; 0x01
     116:	9a 81       	ldd	r25, Y+2	; 0x02
     118:	ab 81       	ldd	r26, Y+3	; 0x03
     11a:	bc 81       	ldd	r27, Y+4	; 0x04
     11c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M>
     120:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x1>
     124:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <_avr_timer_M+0x2>
     128:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <_avr_timer_M+0x3>
     12c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     130:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     134:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     138:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     13c:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_avr_timer_cntcurr>
     140:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_avr_timer_cntcurr+0x1>
     144:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <_avr_timer_cntcurr+0x2>
     148:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <_avr_timer_cntcurr+0x3>
     14c:	00 00       	nop
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	0f 90       	pop	r0
     154:	0f 90       	pop	r0
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <TimerOn>:
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
     164:	81 e8       	ldi	r24, 0x81	; 129
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	2b e0       	ldi	r18, 0x0B	; 11
     16a:	fc 01       	movw	r30, r24
     16c:	20 83       	st	Z, r18
     16e:	88 e8       	ldi	r24, 0x88	; 136
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	2d e7       	ldi	r18, 0x7D	; 125
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	fc 01       	movw	r30, r24
     178:	31 83       	std	Z+1, r19	; 0x01
     17a:	20 83       	st	Z, r18
     17c:	8f e6       	ldi	r24, 0x6F	; 111
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	22 e0       	ldi	r18, 0x02	; 2
     182:	fc 01       	movw	r30, r24
     184:	20 83       	st	Z, r18
     186:	84 e8       	ldi	r24, 0x84	; 132
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	fc 01       	movw	r30, r24
     18c:	11 82       	std	Z+1, r1	; 0x01
     18e:	10 82       	st	Z, r1
     190:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     194:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     198:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     19c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     1a0:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_avr_timer_cntcurr>
     1a4:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_avr_timer_cntcurr+0x1>
     1a8:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <_avr_timer_cntcurr+0x2>
     1ac:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <_avr_timer_cntcurr+0x3>
     1b0:	8f e5       	ldi	r24, 0x5F	; 95
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	2f e5       	ldi	r18, 0x5F	; 95
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	f9 01       	movw	r30, r18
     1ba:	20 81       	ld	r18, Z
     1bc:	20 68       	ori	r18, 0x80	; 128
     1be:	fc 01       	movw	r30, r24
     1c0:	20 83       	st	Z, r18
     1c2:	00 00       	nop
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <TimerISR>:

void TimerISR() {
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
}
     1d8:	00 00       	nop
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	08 95       	ret

000001e0 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
     1e0:	1f 92       	push	r1
     1e2:	0f 92       	push	r0
     1e4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     1f0:	0f 92       	push	r0
     1f2:	2f 93       	push	r18
     1f4:	3f 93       	push	r19
     1f6:	4f 93       	push	r20
     1f8:	5f 93       	push	r21
     1fa:	6f 93       	push	r22
     1fc:	7f 93       	push	r23
     1fe:	8f 93       	push	r24
     200:	9f 93       	push	r25
     202:	af 93       	push	r26
     204:	bf 93       	push	r27
     206:	ef 93       	push	r30
     208:	ff 93       	push	r31
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
     212:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_avr_timer_cntcurr>
     216:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_avr_timer_cntcurr+0x1>
     21a:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <_avr_timer_cntcurr+0x2>
     21e:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <_avr_timer_cntcurr+0x3>
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	a1 09       	sbc	r26, r1
     226:	b1 09       	sbc	r27, r1
     228:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_avr_timer_cntcurr>
     22c:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_avr_timer_cntcurr+0x1>
     230:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <_avr_timer_cntcurr+0x2>
     234:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
     238:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_avr_timer_cntcurr>
     23c:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_avr_timer_cntcurr+0x1>
     240:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <_avr_timer_cntcurr+0x2>
     244:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <_avr_timer_cntcurr+0x3>
     248:	89 2b       	or	r24, r25
     24a:	8a 2b       	or	r24, r26
     24c:	8b 2b       	or	r24, r27
     24e:	89 f4       	brne	.+34     	; 0x272 <__vector_13+0x92>
		TimerISR(); 				// Call the ISR that the user uses
     250:	bc df       	rcall	.-136    	; 0x1ca <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
     252:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     256:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     25a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     25e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     262:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_avr_timer_cntcurr>
     266:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_avr_timer_cntcurr+0x1>
     26a:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <_avr_timer_cntcurr+0x2>
     26e:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <_avr_timer_cntcurr+0x3>
	}
}
     272:	00 00       	nop
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	ff 91       	pop	r31
     27a:	ef 91       	pop	r30
     27c:	bf 91       	pop	r27
     27e:	af 91       	pop	r26
     280:	9f 91       	pop	r25
     282:	8f 91       	pop	r24
     284:	7f 91       	pop	r23
     286:	6f 91       	pop	r22
     288:	5f 91       	pop	r21
     28a:	4f 91       	pop	r20
     28c:	3f 91       	pop	r19
     28e:	2f 91       	pop	r18
     290:	0f 90       	pop	r0
     292:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     296:	0f 90       	pop	r0
     298:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     29c:	0f 90       	pop	r0
     29e:	1f 90       	pop	r1
     2a0:	18 95       	reti

000002a2 <LCD_ClearScreen>:
#define RS 0			// pin number of uC connected to pin 4 of LCD disp.
#define E 1			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
   LCD_WriteCommand(0x01);
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	1a d0       	rcall	.+52     	; 0x2e2 <LCD_WriteCommand>
}
     2ae:	00 00       	nop
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <LCD_init>:

void LCD_init(void) {
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	cd b7       	in	r28, 0x3d	; 61
     2bc:	de b7       	in	r29, 0x3e	; 62

    //wait for 100 ms.
	delay_ms(100);
     2be:	84 e6       	ldi	r24, 0x64	; 100
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	ab d0       	rcall	.+342    	; 0x41a <delay_ms>
	LCD_WriteCommand(0x38);
     2c4:	88 e3       	ldi	r24, 0x38	; 56
     2c6:	0d d0       	rcall	.+26     	; 0x2e2 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
     2c8:	86 e0       	ldi	r24, 0x06	; 6
     2ca:	0b d0       	rcall	.+22     	; 0x2e2 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
     2cc:	8f e0       	ldi	r24, 0x0F	; 15
     2ce:	09 d0       	rcall	.+18     	; 0x2e2 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	07 d0       	rcall	.+14     	; 0x2e2 <LCD_WriteCommand>
	delay_ms(10);						 
     2d4:	8a e0       	ldi	r24, 0x0A	; 10
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	a0 d0       	rcall	.+320    	; 0x41a <delay_ms>
     2da:	00 00       	nop
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <LCD_WriteCommand>:
     2e2:	cf 93       	push	r28

void LCD_WriteCommand (unsigned char Command) {
     2e4:	df 93       	push	r29
     2e6:	1f 92       	push	r1
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	89 83       	std	Y+1, r24	; 0x01
   CLR_BIT(CONTROL_BUS,RS);
     2ee:	88 e2       	ldi	r24, 0x28	; 40
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	28 e2       	ldi	r18, 0x28	; 40
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	f9 01       	movw	r30, r18
     2f8:	20 81       	ld	r18, Z
     2fa:	2e 7f       	andi	r18, 0xFE	; 254
     2fc:	fc 01       	movw	r30, r24
     2fe:	20 83       	st	Z, r18
   DATA_BUS = Command;
     300:	8b e2       	ldi	r24, 0x2B	; 43
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	29 81       	ldd	r18, Y+1	; 0x01
     306:	fc 01       	movw	r30, r24
     308:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
     30a:	88 e2       	ldi	r24, 0x28	; 40
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	28 e2       	ldi	r18, 0x28	; 40
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	f9 01       	movw	r30, r18
     314:	20 81       	ld	r18, Z
     316:	22 60       	ori	r18, 0x02	; 2
     318:	fc 01       	movw	r30, r24
     31a:	20 83       	st	Z, r18
   asm("nop");
     31c:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     31e:	88 e2       	ldi	r24, 0x28	; 40
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	28 e2       	ldi	r18, 0x28	; 40
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	f9 01       	movw	r30, r18
     328:	20 81       	ld	r18, Z
     32a:	2d 7f       	andi	r18, 0xFD	; 253
     32c:	fc 01       	movw	r30, r24
     32e:	20 83       	st	Z, r18
   delay_ms(2); // ClearScreen requires 1.52ms to execute
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	72 d0       	rcall	.+228    	; 0x41a <delay_ms>
}
     336:	00 00       	nop
     338:	0f 90       	pop	r0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <LCD_WriteData>:

void LCD_WriteData(unsigned char Data) {
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	1f 92       	push	r1
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	89 83       	std	Y+1, r24	; 0x01
   SET_BIT(CONTROL_BUS,RS);
     34c:	88 e2       	ldi	r24, 0x28	; 40
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	28 e2       	ldi	r18, 0x28	; 40
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	f9 01       	movw	r30, r18
     356:	20 81       	ld	r18, Z
     358:	21 60       	ori	r18, 0x01	; 1
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
   DATA_BUS = Data;
     35e:	8b e2       	ldi	r24, 0x2B	; 43
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	29 81       	ldd	r18, Y+1	; 0x01
     364:	fc 01       	movw	r30, r24
     366:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
     368:	88 e2       	ldi	r24, 0x28	; 40
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	28 e2       	ldi	r18, 0x28	; 40
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	f9 01       	movw	r30, r18
     372:	20 81       	ld	r18, Z
     374:	22 60       	ori	r18, 0x02	; 2
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
   asm("nop");
     37a:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     37c:	88 e2       	ldi	r24, 0x28	; 40
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	28 e2       	ldi	r18, 0x28	; 40
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	f9 01       	movw	r30, r18
     386:	20 81       	ld	r18, Z
     388:	2d 7f       	andi	r18, 0xFD	; 253
     38a:	fc 01       	movw	r30, r24
     38c:	20 83       	st	Z, r18
   delay_ms(1);
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	43 d0       	rcall	.+134    	; 0x41a <delay_ms>
}
     394:	00 00       	nop
     396:	0f 90       	pop	r0
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	08 95       	ret

0000039e <LCD_DisplayString>:

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <LCD_DisplayString+0x6>
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <LCD_DisplayString+0x8>
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	8a 83       	std	Y+2, r24	; 0x02
     3ac:	7c 83       	std	Y+4, r23	; 0x04
     3ae:	6b 83       	std	Y+3, r22	; 0x03
   //LCD_ClearScreen();
   unsigned char c = column;
     3b0:	8a 81       	ldd	r24, Y+2	; 0x02
     3b2:	89 83       	std	Y+1, r24	; 0x01
   while(*string) {
     3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <LCD_DisplayString+0x36>
      LCD_Cursor(c++);
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	98 0f       	add	r25, r24
     3bc:	99 83       	std	Y+1, r25	; 0x01
     3be:	18 d0       	rcall	.+48     	; 0x3f0 <LCD_Cursor>
      LCD_WriteData(*string++);
     3c0:	8b 81       	ldd	r24, Y+3	; 0x03
     3c2:	9c 81       	ldd	r25, Y+4	; 0x04
     3c4:	9c 01       	movw	r18, r24
     3c6:	2f 5f       	subi	r18, 0xFF	; 255
     3c8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ca:	3c 83       	std	Y+4, r19	; 0x04
     3cc:	2b 83       	std	Y+3, r18	; 0x03
     3ce:	fc 01       	movw	r30, r24
     3d0:	80 81       	ld	r24, Z
     3d2:	b6 df       	rcall	.-148    	; 0x340 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
     3d4:	8b 81       	ldd	r24, Y+3	; 0x03
     3d6:	9c 81       	ldd	r25, Y+4	; 0x04
     3d8:	fc 01       	movw	r30, r24
     3da:	80 81       	ld	r24, Z
     3dc:	88 23       	and	r24, r24
     3de:	59 f7       	brne	.-42     	; 0x3b6 <LCD_DisplayString+0x18>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
     3e0:	00 00       	nop
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <LCD_Cursor>:

void LCD_Cursor(unsigned char column) {
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	1f 92       	push	r1
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	89 83       	std	Y+1, r24	; 0x01
   if ( column < 17 ) { // 16x1 LCD: column < 9
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	81 31       	cpi	r24, 0x11	; 17
     400:	20 f4       	brcc	.+8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	81 58       	subi	r24, 0x81	; 129
     406:	6d df       	rcall	.-294    	; 0x2e2 <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
											// 16x2 LCD: column - 9
   }
}
     408:	03 c0       	rjmp	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	81 55       	subi	r24, 0x51	; 81
     40e:	69 df       	rcall	.-302    	; 0x2e2 <LCD_WriteCommand>
											// 16x2 LCD: column - 9
   }
}
     410:	00 00       	nop
     412:	0f 90       	pop	r0
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	00 d0       	rcall	.+0      	; 0x420 <delay_ms+0x6>
     420:	00 d0       	rcall	.+0      	; 0x422 <delay_ms+0x8>
     422:	00 d0       	rcall	.+0      	; 0x424 <delay_ms+0xa>
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
     428:	9e 83       	std	Y+6, r25	; 0x06
     42a:	8d 83       	std	Y+5, r24	; 0x05
    int i,j;
    for(i=0;i<miliSec;i++)
     42c:	1a 82       	std	Y+2, r1	; 0x02
     42e:	19 82       	std	Y+1, r1	; 0x01
     430:	13 c0       	rjmp	.+38     	; 0x458 <delay_ms+0x3e>
    for(j=0;j<775;j++)
     432:	1c 82       	std	Y+4, r1	; 0x04
     434:	1b 82       	std	Y+3, r1	; 0x03
     436:	06 c0       	rjmp	.+12     	; 0x444 <delay_ms+0x2a>
  {
   asm("nop");
     438:	00 00       	nop
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
     43a:	8b 81       	ldd	r24, Y+3	; 0x03
     43c:	9c 81       	ldd	r25, Y+4	; 0x04
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	8b 83       	std	Y+3, r24	; 0x03
     444:	8b 81       	ldd	r24, Y+3	; 0x03
     446:	9c 81       	ldd	r25, Y+4	; 0x04
     448:	87 30       	cpi	r24, 0x07	; 7
     44a:	93 40       	sbci	r25, 0x03	; 3
     44c:	ac f3       	brlt	.-22     	; 0x438 <delay_ms+0x1e>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	9a 81       	ldd	r25, Y+2	; 0x02
     452:	01 96       	adiw	r24, 0x01	; 1
     454:	9a 83       	std	Y+2, r25	; 0x02
     456:	89 83       	std	Y+1, r24	; 0x01
     458:	29 81       	ldd	r18, Y+1	; 0x01
     45a:	3a 81       	ldd	r19, Y+2	; 0x02
     45c:	8d 81       	ldd	r24, Y+5	; 0x05
     45e:	9e 81       	ldd	r25, Y+6	; 0x06
     460:	28 17       	cp	r18, r24
     462:	39 07       	cpc	r19, r25
     464:	34 f3       	brlt	.-52     	; 0x432 <delay_ms+0x18>
    for(j=0;j<775;j++)
  {
   asm("nop");
  }
}
     466:	00 00       	nop
     468:	26 96       	adiw	r28, 0x06	; 6
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <SNES_init>:
#define SNES_Y       16384  
#define SNES_B       32768  

#define OUTPUT_PORT PORTB

void SNES_init(){
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
    SNES_PORT |= (0x01 << SNES_CLOCK);
     482:	82 e2       	ldi	r24, 0x22	; 34
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	22 e2       	ldi	r18, 0x22	; 34
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	f9 01       	movw	r30, r18
     48c:	20 81       	ld	r18, Z
     48e:	21 60       	ori	r18, 0x01	; 1
     490:	fc 01       	movw	r30, r24
     492:	20 83       	st	Z, r18
    SNES_PORT |= (0x01 << SNES_LATCH);
     494:	82 e2       	ldi	r24, 0x22	; 34
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	22 e2       	ldi	r18, 0x22	; 34
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	f9 01       	movw	r30, r18
     49e:	20 81       	ld	r18, Z
     4a0:	22 60       	ori	r18, 0x02	; 2
     4a2:	fc 01       	movw	r30, r24
     4a4:	20 83       	st	Z, r18
}
     4a6:	00 00       	nop
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <SNES_Read>:

unsigned short SNES_Read(){
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <SNES_Read+0x6>
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <SNES_Read+0x8>
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
    unsigned short snes_pressed = 0x0000;
     4ba:	1a 82       	std	Y+2, r1	; 0x02
     4bc:	19 82       	std	Y+1, r1	; 0x01

    SNES_PORT |= (0x01  << SNES_LATCH);
     4be:	82 e2       	ldi	r24, 0x22	; 34
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	22 e2       	ldi	r18, 0x22	; 34
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	f9 01       	movw	r30, r18
     4c8:	20 81       	ld	r18, Z
     4ca:	22 60       	ori	r18, 0x02	; 2
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18
	SNES_PORT |= (0x01 << SNES_CLOCK);
     4d0:	82 e2       	ldi	r24, 0x22	; 34
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	22 e2       	ldi	r18, 0x22	; 34
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	f9 01       	movw	r30, r18
     4da:	20 81       	ld	r18, Z
     4dc:	21 60       	ori	r18, 0x01	; 1
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18
    SNES_PORT &= ~(0x01 << SNES_LATCH);
     4e2:	82 e2       	ldi	r24, 0x22	; 34
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	22 e2       	ldi	r18, 0x22	; 34
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	f9 01       	movw	r30, r18
     4ec:	20 81       	ld	r18, Z
     4ee:	2d 7f       	andi	r18, 0xFD	; 253
     4f0:	fc 01       	movw	r30, r24
     4f2:	20 83       	st	Z, r18
    snes_pressed = (((~SNES_PIN) & (0x01 << SNES_DATA)) >> SNES_DATA);
     4f4:	80 e2       	ldi	r24, 0x20	; 32
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	fc 01       	movw	r30, r24
     4fa:	80 81       	ld	r24, Z
     4fc:	88 2f       	mov	r24, r24
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	80 95       	com	r24
     502:	90 95       	com	r25
     504:	84 70       	andi	r24, 0x04	; 4
     506:	99 27       	eor	r25, r25
     508:	95 95       	asr	r25
     50a:	87 95       	ror	r24
     50c:	95 95       	asr	r25
     50e:	87 95       	ror	r24
     510:	9a 83       	std	Y+2, r25	; 0x02
     512:	89 83       	std	Y+1, r24	; 0x01
    for(int i = 0; i < 16; i++){
     514:	1c 82       	std	Y+4, r1	; 0x04
     516:	1b 82       	std	Y+3, r1	; 0x03
     518:	32 c0       	rjmp	.+100    	; 0x57e <SNES_Read+0xd0>
        SNES_PORT &= ~(0x01 << SNES_CLOCK);
     51a:	82 e2       	ldi	r24, 0x22	; 34
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	22 e2       	ldi	r18, 0x22	; 34
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	f9 01       	movw	r30, r18
     524:	20 81       	ld	r18, Z
     526:	2e 7f       	andi	r18, 0xFE	; 254
     528:	fc 01       	movw	r30, r24
     52a:	20 83       	st	Z, r18
        snes_pressed <<= 1;
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	9a 81       	ldd	r25, Y+2	; 0x02
     530:	88 0f       	add	r24, r24
     532:	99 1f       	adc	r25, r25
     534:	9a 83       	std	Y+2, r25	; 0x02
     536:	89 83       	std	Y+1, r24	; 0x01
        snes_pressed |= ( ( (~SNES_PIN) & (0x01  << SNES_DATA) ) >> SNES_DATA);      
     538:	80 e2       	ldi	r24, 0x20	; 32
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	fc 01       	movw	r30, r24
     53e:	80 81       	ld	r24, Z
     540:	88 2f       	mov	r24, r24
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	80 95       	com	r24
     546:	90 95       	com	r25
     548:	84 70       	andi	r24, 0x04	; 4
     54a:	99 27       	eor	r25, r25
     54c:	95 95       	asr	r25
     54e:	87 95       	ror	r24
     550:	95 95       	asr	r25
     552:	87 95       	ror	r24
     554:	9c 01       	movw	r18, r24
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	9a 81       	ldd	r25, Y+2	; 0x02
     55a:	82 2b       	or	r24, r18
     55c:	93 2b       	or	r25, r19
     55e:	9a 83       	std	Y+2, r25	; 0x02
     560:	89 83       	std	Y+1, r24	; 0x01
		SNES_PORT |= (0x01 << SNES_CLOCK);
     562:	82 e2       	ldi	r24, 0x22	; 34
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	22 e2       	ldi	r18, 0x22	; 34
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	f9 01       	movw	r30, r18
     56c:	20 81       	ld	r18, Z
     56e:	21 60       	ori	r18, 0x01	; 1
     570:	fc 01       	movw	r30, r24
     572:	20 83       	st	Z, r18

    SNES_PORT |= (0x01  << SNES_LATCH);
	SNES_PORT |= (0x01 << SNES_CLOCK);
    SNES_PORT &= ~(0x01 << SNES_LATCH);
    snes_pressed = (((~SNES_PIN) & (0x01 << SNES_DATA)) >> SNES_DATA);
    for(int i = 0; i < 16; i++){
     574:	8b 81       	ldd	r24, Y+3	; 0x03
     576:	9c 81       	ldd	r25, Y+4	; 0x04
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	9c 83       	std	Y+4, r25	; 0x04
     57c:	8b 83       	std	Y+3, r24	; 0x03
     57e:	8b 81       	ldd	r24, Y+3	; 0x03
     580:	9c 81       	ldd	r25, Y+4	; 0x04
     582:	40 97       	sbiw	r24, 0x10	; 16
     584:	54 f2       	brlt	.-108    	; 0x51a <SNES_Read+0x6c>
        SNES_PORT &= ~(0x01 << SNES_CLOCK);
        snes_pressed <<= 1;
        snes_pressed |= ( ( (~SNES_PIN) & (0x01  << SNES_DATA) ) >> SNES_DATA);      
		SNES_PORT |= (0x01 << SNES_CLOCK);
    }
    return snes_pressed;
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	9a 81       	ldd	r25, Y+2	; 0x02
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <EEPROM_Write>:
#include <avr/io.h>
#include <avr/eeprom.h>
#include "eeprom.h"

void EEPROM_Write(unsigned char address, unsigned char data)
{
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	00 d0       	rcall	.+0      	; 0x59e <EEPROM_Write+0x6>
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	6a 83       	std	Y+2, r22	; 0x02
    eeprom_write_byte(address, data);
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	88 2f       	mov	r24, r24
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	6a 81       	ldd	r22, Y+2	; 0x02
     5ae:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <eeprom_write_byte>
	EECR |= (1 << EEMPE);
	
	// Begin Write
	EECR |= (1 << EEPE);
	*/
}
     5b2:	00 00       	nop
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <EEPROM_Read>:

unsigned char EEPROM_Read(unsigned char address)
{
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	1f 92       	push	r1
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	89 83       	std	Y+1, r24	; 0x01
    return eeprom_read_byte(address);
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	88 2f       	mov	r24, r24
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <eeprom_read_byte>
	EECR |= (1 << EERE);
	
	//Return data register
	return EEDR;
	*/
     5d4:	0f 90       	pop	r0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <SNESINPUT>:
unsigned char Encnt = 0;
unsigned char Encur = 0;



unsigned char SNESINPUT(){
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <SNESINPUT+0x6>
     5e2:	1f 92       	push	r1
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
	unsigned short SNES = SNES_Read();
     5e8:	62 df       	rcall	.-316    	; 0x4ae <SNES_Read>
     5ea:	9b 83       	std	Y+3, r25	; 0x03
     5ec:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char input = 0x00;
     5ee:	19 82       	std	Y+1, r1	; 0x01
	if(SNES & 16){// RB
     5f0:	8a 81       	ldd	r24, Y+2	; 0x02
     5f2:	9b 81       	ldd	r25, Y+3	; 0x03
     5f4:	80 71       	andi	r24, 0x10	; 16
     5f6:	99 27       	eor	r25, r25
     5f8:	89 2b       	or	r24, r25
     5fa:	19 f0       	breq	.+6      	; 0x602 <SNESINPUT+0x26>
		input |= 1;
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	81 60       	ori	r24, 0x01	; 1
     600:	89 83       	std	Y+1, r24	; 0x01
	}
	if(SNES & 32){//LB
     602:	8a 81       	ldd	r24, Y+2	; 0x02
     604:	9b 81       	ldd	r25, Y+3	; 0x03
     606:	80 72       	andi	r24, 0x20	; 32
     608:	99 27       	eor	r25, r25
     60a:	89 2b       	or	r24, r25
     60c:	19 f0       	breq	.+6      	; 0x614 <SNESINPUT+0x38>
		input |= 2;
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	82 60       	ori	r24, 0x02	; 2
     612:	89 83       	std	Y+1, r24	; 0x01
	}
	if(SNES & 128){//A
     614:	8a 81       	ldd	r24, Y+2	; 0x02
     616:	9b 81       	ldd	r25, Y+3	; 0x03
     618:	80 78       	andi	r24, 0x80	; 128
     61a:	99 27       	eor	r25, r25
     61c:	89 2b       	or	r24, r25
     61e:	19 f0       	breq	.+6      	; 0x626 <SNESINPUT+0x4a>
		input |= 4;
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	84 60       	ori	r24, 0x04	; 4
     624:	89 83       	std	Y+1, r24	; 0x01
	}
	if(SNES & 1024){//DOWN
     626:	8a 81       	ldd	r24, Y+2	; 0x02
     628:	9b 81       	ldd	r25, Y+3	; 0x03
     62a:	88 27       	eor	r24, r24
     62c:	94 70       	andi	r25, 0x04	; 4
     62e:	89 2b       	or	r24, r25
     630:	19 f0       	breq	.+6      	; 0x638 <SNESINPUT+0x5c>
		input |= 8;
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	88 60       	ori	r24, 0x08	; 8
     636:	89 83       	std	Y+1, r24	; 0x01
	}
	if(SNES & 2048){//UP
     638:	8a 81       	ldd	r24, Y+2	; 0x02
     63a:	9b 81       	ldd	r25, Y+3	; 0x03
     63c:	88 27       	eor	r24, r24
     63e:	98 70       	andi	r25, 0x08	; 8
     640:	89 2b       	or	r24, r25
     642:	19 f0       	breq	.+6      	; 0x64a <SNESINPUT+0x6e>
		input |= 16;
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	80 61       	ori	r24, 0x10	; 16
     648:	89 83       	std	Y+1, r24	; 0x01
	}
	if(SNES & 4096){//START
     64a:	8a 81       	ldd	r24, Y+2	; 0x02
     64c:	9b 81       	ldd	r25, Y+3	; 0x03
     64e:	88 27       	eor	r24, r24
     650:	90 71       	andi	r25, 0x10	; 16
     652:	89 2b       	or	r24, r25
     654:	19 f0       	breq	.+6      	; 0x65c <SNESINPUT+0x80>
		input |= 32;
     656:	89 81       	ldd	r24, Y+1	; 0x01
     658:	80 62       	ori	r24, 0x20	; 32
     65a:	89 83       	std	Y+1, r24	; 0x01
	}
	return input;
     65c:	89 81       	ldd	r24, Y+1	; 0x01
}
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <draw>:

void draw(){
     66a:	cf 93       	push	r28
     66c:	df 93       	push	r29
     66e:	00 d0       	rcall	.+0      	; 0x670 <draw+0x6>
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
	
	LCD_ClearScreen();
     674:	16 de       	rcall	.-980    	; 0x2a2 <LCD_ClearScreen>
	
	LCD_Cursor(dinoC);
     676:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <dinoC>
     67a:	ba de       	rcall	.-652    	; 0x3f0 <LCD_Cursor>
	LCD_WriteData(dinoT);
     67c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <dinoT>
     680:	5f de       	rcall	.-834    	; 0x340 <LCD_WriteData>
	
	for(int i =0; i< 5; i++){
     682:	1a 82       	std	Y+2, r1	; 0x02
     684:	19 82       	std	Y+1, r1	; 0x01
     686:	2b c0       	rjmp	.+86     	; 0x6de <draw+0x74>
		if(enemeys[i].cur > 0 && enemeys[i].cur < 33){
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	9a 81       	ldd	r25, Y+2	; 0x02
     68c:	88 0f       	add	r24, r24
     68e:	99 1f       	adc	r25, r25
     690:	81 54       	subi	r24, 0x41	; 65
     692:	9e 4f       	sbci	r25, 0xFE	; 254
     694:	fc 01       	movw	r30, r24
     696:	80 81       	ld	r24, Z
     698:	88 23       	and	r24, r24
     69a:	e1 f0       	breq	.+56     	; 0x6d4 <draw+0x6a>
     69c:	89 81       	ldd	r24, Y+1	; 0x01
     69e:	9a 81       	ldd	r25, Y+2	; 0x02
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	81 54       	subi	r24, 0x41	; 65
     6a6:	9e 4f       	sbci	r25, 0xFE	; 254
     6a8:	fc 01       	movw	r30, r24
     6aa:	80 81       	ld	r24, Z
     6ac:	81 32       	cpi	r24, 0x21	; 33
     6ae:	90 f4       	brcc	.+36     	; 0x6d4 <draw+0x6a>
			LCD_Cursor(enemeys[i].cur);
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	9a 81       	ldd	r25, Y+2	; 0x02
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	81 54       	subi	r24, 0x41	; 65
     6ba:	9e 4f       	sbci	r25, 0xFE	; 254
     6bc:	fc 01       	movw	r30, r24
     6be:	80 81       	ld	r24, Z
     6c0:	97 de       	rcall	.-722    	; 0x3f0 <LCD_Cursor>
			LCD_WriteData(enemeys[i].type);
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	80 54       	subi	r24, 0x40	; 64
     6cc:	9e 4f       	sbci	r25, 0xFE	; 254
     6ce:	fc 01       	movw	r30, r24
     6d0:	80 81       	ld	r24, Z
     6d2:	36 de       	rcall	.-916    	; 0x340 <LCD_WriteData>
	LCD_ClearScreen();
	
	LCD_Cursor(dinoC);
	LCD_WriteData(dinoT);
	
	for(int i =0; i< 5; i++){
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	9a 81       	ldd	r25, Y+2	; 0x02
     6d8:	01 96       	adiw	r24, 0x01	; 1
     6da:	9a 83       	std	Y+2, r25	; 0x02
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	9a 81       	ldd	r25, Y+2	; 0x02
     6e2:	05 97       	sbiw	r24, 0x05	; 5
		if(enemeys[i].cur > 0 && enemeys[i].cur < 33){
			LCD_Cursor(enemeys[i].cur);
			LCD_WriteData(enemeys[i].type);
		}
	}
	LCD_Cursor(36);
     6e4:	8c f2       	brlt	.-94     	; 0x688 <draw+0x1e>
     6e6:	84 e2       	ldi	r24, 0x24	; 36
     6e8:	83 de       	rcall	.-762    	; 0x3f0 <LCD_Cursor>
}
     6ea:	00 00       	nop
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <initSymbol>:

void initSymbol(unsigned char pos, unsigned char* str){
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <initSymbol+0x6>
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <initSymbol+0x8>
     6fe:	1f 92       	push	r1
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
     704:	8b 83       	std	Y+3, r24	; 0x03
     706:	7d 83       	std	Y+5, r23	; 0x05
     708:	6c 83       	std	Y+4, r22	; 0x04
	LCD_WriteCommand (0x40 + (pos*8));
     70a:	8b 81       	ldd	r24, Y+3	; 0x03
     70c:	88 2f       	mov	r24, r24
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	08 96       	adiw	r24, 0x08	; 8
     712:	88 0f       	add	r24, r24
     714:	88 0f       	add	r24, r24
     716:	88 0f       	add	r24, r24
     718:	e4 dd       	rcall	.-1080   	; 0x2e2 <LCD_WriteCommand>
	for(int i = 0; i < 8; i++) {
     71a:	1a 82       	std	Y+2, r1	; 0x02
     71c:	19 82       	std	Y+1, r1	; 0x01
     71e:	0e c0       	rjmp	.+28     	; 0x73c <initSymbol+0x46>
		LCD_WriteData(str[i]);
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	9a 81       	ldd	r25, Y+2	; 0x02
     724:	2c 81       	ldd	r18, Y+4	; 0x04
     726:	3d 81       	ldd	r19, Y+5	; 0x05
     728:	82 0f       	add	r24, r18
     72a:	93 1f       	adc	r25, r19
     72c:	fc 01       	movw	r30, r24
     72e:	80 81       	ld	r24, Z
     730:	07 de       	rcall	.-1010   	; 0x340 <LCD_WriteData>
	LCD_Cursor(36);
}

void initSymbol(unsigned char pos, unsigned char* str){
	LCD_WriteCommand (0x40 + (pos*8));
	for(int i = 0; i < 8; i++) {
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	9a 81       	ldd	r25, Y+2	; 0x02
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	9a 83       	std	Y+2, r25	; 0x02
     73a:	89 83       	std	Y+1, r24	; 0x01
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	9a 81       	ldd	r25, Y+2	; 0x02
     740:	08 97       	sbiw	r24, 0x08	; 8
		LCD_WriteData(str[i]);
	}
	LCD_WriteCommand(0x80);
     742:	74 f3       	brlt	.-36     	; 0x720 <initSymbol+0x2a>
     744:	80 e8       	ldi	r24, 0x80	; 128
     746:	cd dd       	rcall	.-1126   	; 0x2e2 <LCD_WriteCommand>
}
     748:	00 00       	nop
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <SMTick1>:

int SMTick1(int state){
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	00 d0       	rcall	.+0      	; 0x760 <SMTick1+0x6>
     760:	00 d0       	rcall	.+0      	; 0x762 <SMTick1+0x8>
     762:	cd b7       	in	r28, 0x3d	; 61
     764:	de b7       	in	r29, 0x3e	; 62
     766:	9c 83       	std	Y+4, r25	; 0x04
     768:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char input = SNESINPUT();
     76a:	38 df       	rcall	.-400    	; 0x5dc <SNESINPUT>
     76c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char cursor = 1;
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	89 83       	std	Y+1, r24	; 0x01
	
	if(input & 1){
     772:	8a 81       	ldd	r24, Y+2	; 0x02
     774:	88 2f       	mov	r24, r24
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	81 70       	andi	r24, 0x01	; 1
     77a:	99 27       	eor	r25, r25
     77c:	89 2b       	or	r24, r25
     77e:	39 f0       	breq	.+14     	; 0x78e <SMTick1+0x34>
		LCD_DisplayString(cursor++ , "R");
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	98 0f       	add	r25, r24
     786:	99 83       	std	Y+1, r25	; 0x01
     788:	63 e4       	ldi	r22, 0x43	; 67
     78a:	71 e0       	ldi	r23, 0x01	; 1
     78c:	08 de       	rcall	.-1008   	; 0x39e <LCD_DisplayString>
	}
	if(input & 2){
     78e:	8a 81       	ldd	r24, Y+2	; 0x02
     790:	88 2f       	mov	r24, r24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 70       	andi	r24, 0x02	; 2
     796:	99 27       	eor	r25, r25
     798:	89 2b       	or	r24, r25
     79a:	39 f0       	breq	.+14     	; 0x7aa <SMTick1+0x50>
		LCD_DisplayString(cursor++ , "L");
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	98 0f       	add	r25, r24
     7a2:	99 83       	std	Y+1, r25	; 0x01
     7a4:	65 e4       	ldi	r22, 0x45	; 69
     7a6:	71 e0       	ldi	r23, 0x01	; 1
     7a8:	fa dd       	rcall	.-1036   	; 0x39e <LCD_DisplayString>
	}
	if(input & 4){
     7aa:	8a 81       	ldd	r24, Y+2	; 0x02
     7ac:	88 2f       	mov	r24, r24
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	84 70       	andi	r24, 0x04	; 4
     7b2:	99 27       	eor	r25, r25
     7b4:	89 2b       	or	r24, r25
     7b6:	39 f0       	breq	.+14     	; 0x7c6 <SMTick1+0x6c>
		LCD_DisplayString(cursor++ , "A");
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	98 0f       	add	r25, r24
     7be:	99 83       	std	Y+1, r25	; 0x01
     7c0:	67 e4       	ldi	r22, 0x47	; 71
     7c2:	71 e0       	ldi	r23, 0x01	; 1
     7c4:	ec dd       	rcall	.-1064   	; 0x39e <LCD_DisplayString>
	}
	if(input & 8){
     7c6:	8a 81       	ldd	r24, Y+2	; 0x02
     7c8:	88 2f       	mov	r24, r24
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	88 70       	andi	r24, 0x08	; 8
     7ce:	99 27       	eor	r25, r25
     7d0:	89 2b       	or	r24, r25
     7d2:	39 f0       	breq	.+14     	; 0x7e2 <SMTick1+0x88>
		LCD_DisplayString(cursor++ , "D");
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	98 0f       	add	r25, r24
     7da:	99 83       	std	Y+1, r25	; 0x01
     7dc:	69 e4       	ldi	r22, 0x49	; 73
     7de:	71 e0       	ldi	r23, 0x01	; 1
     7e0:	de dd       	rcall	.-1092   	; 0x39e <LCD_DisplayString>
	}
	if(input & 16){
     7e2:	8a 81       	ldd	r24, Y+2	; 0x02
     7e4:	88 2f       	mov	r24, r24
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	80 71       	andi	r24, 0x10	; 16
     7ea:	99 27       	eor	r25, r25
     7ec:	89 2b       	or	r24, r25
     7ee:	39 f0       	breq	.+14     	; 0x7fe <SMTick1+0xa4>
		LCD_DisplayString(cursor++ , "U");
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	98 0f       	add	r25, r24
     7f6:	99 83       	std	Y+1, r25	; 0x01
     7f8:	6b e4       	ldi	r22, 0x4B	; 75
     7fa:	71 e0       	ldi	r23, 0x01	; 1
     7fc:	d0 dd       	rcall	.-1120   	; 0x39e <LCD_DisplayString>
	}
	if(input == 0){
     7fe:	8a 81       	ldd	r24, Y+2	; 0x02
     800:	88 23       	and	r24, r24
     802:	39 f4       	brne	.+14     	; 0x812 <SMTick1+0xb8>
		LCD_DisplayString(cursor++ , "0");
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	98 0f       	add	r25, r24
     80a:	99 83       	std	Y+1, r25	; 0x01
     80c:	6d e4       	ldi	r22, 0x4D	; 77
     80e:	71 e0       	ldi	r23, 0x01	; 1
     810:	c6 dd       	rcall	.-1140   	; 0x39e <LCD_DisplayString>
	}
	return 1;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	90 e0       	ldi	r25, 0x00	; 0
}
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <Test2>:

int Test2(int state){
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	00 d0       	rcall	.+0      	; 0x82a <Test2+0x6>
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	9a 83       	std	Y+2, r25	; 0x02
     830:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteData(1);
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	85 dd       	rcall	.-1270   	; 0x340 <LCD_WriteData>
	//LCD_WriteData(0);
	LCD_WriteData(3);
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	83 dd       	rcall	.-1274   	; 0x340 <LCD_WriteData>
	LCD_WriteData(4);
     83a:	84 e0       	ldi	r24, 0x04	; 4
     83c:	81 dd       	rcall	.-1278   	; 0x340 <LCD_WriteData>
	LCD_WriteData(5);
     83e:	85 e0       	ldi	r24, 0x05	; 5
     840:	7f dd       	rcall	.-1282   	; 0x340 <LCD_WriteData>
	LCD_WriteData(6);
     842:	86 e0       	ldi	r24, 0x06	; 6
     844:	7d dd       	rcall	.-1286   	; 0x340 <LCD_WriteData>
     846:	87 e0       	ldi	r24, 0x07	; 7
	LCD_WriteData(7);
     848:	7b dd       	rcall	.-1290   	; 0x340 <LCD_WriteData>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <GAME>:
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29

int GAME(int state){
     85c:	00 d0       	rcall	.+0      	; 0x85e <GAME+0x6>
     85e:	00 d0       	rcall	.+0      	; 0x860 <GAME+0x8>
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	9c 83       	std	Y+4, r25	; 0x04
     866:	8b 83       	std	Y+3, r24	; 0x03
	switch(state){
     868:	8b 81       	ldd	r24, Y+3	; 0x03
     86a:	9c 81       	ldd	r25, Y+4	; 0x04
     86c:	09 2e       	mov	r0, r25
     86e:	00 0c       	add	r0, r0
     870:	aa 0b       	sbc	r26, r26
     872:	bb 0b       	sbc	r27, r27
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	27 e0       	ldi	r18, 0x07	; 7
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	84 1b       	sub	r24, r20
     87e:	95 0b       	sbc	r25, r21
     880:	28 17       	cp	r18, r24
     882:	39 07       	cpc	r19, r25
     884:	08 f4       	brcc	.+2      	; 0x888 <GAME+0x30>
     886:	c8 c0       	rjmp	.+400    	; 0xa18 <GAME+0x1c0>
     888:	8a 5b       	subi	r24, 0xBA	; 186
     88a:	9f 4f       	sbci	r25, 0xFF	; 255
     88c:	fc 01       	movw	r30, r24
     88e:	3f c5       	rjmp	.+2686   	; 0x130e <__tablejump2__>
		case 0:
		if(1);
		unsigned char inp = SNESINPUT();
     890:	a5 de       	rcall	.-694    	; 0x5dc <SNESINPUT>
     892:	89 83       	std	Y+1, r24	; 0x01
     894:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <init>
		if(init == 0){
     898:	88 23       	and	r24, r24
     89a:	41 f4       	brne	.+16     	; 0x8ac <GAME+0x54>
			LCD_ClearScreen();
     89c:	02 dd       	rcall	.-1532   	; 0x2a2 <LCD_ClearScreen>
     89e:	6f e4       	ldi	r22, 0x4F	; 79
			LCD_DisplayString(1,"SelectDifficulty LB, RB, A");
     8a0:	71 e0       	ldi	r23, 0x01	; 1
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	7c dd       	rcall	.-1288   	; 0x39e <LCD_DisplayString>
     8a6:	81 e0       	ldi	r24, 0x01	; 1
			init = 1;
     8a8:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <init>
     8ac:	97 de       	rcall	.-722    	; 0x5dc <SNESINPUT>
		}
		if(SNESINPUT() == 1){
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	89 f4       	brne	.+34     	; 0x8d4 <GAME+0x7c>
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <init>
			init =2;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
			state = 1;
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	8b 83       	std	Y+3, r24	; 0x03
     8c0:	81 e1       	ldi	r24, 0x11	; 17
     8c2:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <dinoC>
			dinoC = 17;
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <dinoT>
			dinoT= 1;
     8cc:	8e e1       	ldi	r24, 0x1E	; 30
			incomeSpeed = 30;
     8ce:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <incomeSpeed>
     8d2:	a4 c0       	rjmp	.+328    	; 0xa1c <GAME+0x1c4>
		}
		else if(SNESINPUT() == 11){// L R D
			highscore = 0;
			EEPROM_Write(0,highscore);
		}
		break;
     8d4:	83 de       	rcall	.-762    	; 0x5dc <SNESINPUT>
			state = 1;
			dinoC = 17;
			dinoT= 1;
			incomeSpeed = 30;
		} 
		else if(SNESINPUT() == 2){
     8d6:	82 30       	cpi	r24, 0x02	; 2
     8d8:	89 f4       	brne	.+34     	; 0x8fc <GAME+0xa4>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <init>
			init =2;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
			state = 1;
     8e4:	9c 83       	std	Y+4, r25	; 0x04
     8e6:	8b 83       	std	Y+3, r24	; 0x03
     8e8:	81 e1       	ldi	r24, 0x11	; 17
     8ea:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <dinoC>
			dinoC = 17;
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <dinoT>
			dinoT= 1;
     8f4:	84 e1       	ldi	r24, 0x14	; 20
			incomeSpeed = 20;
     8f6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <incomeSpeed>
     8fa:	90 c0       	rjmp	.+288    	; 0xa1c <GAME+0x1c4>
		}
		else if(SNESINPUT() == 11){// L R D
			highscore = 0;
			EEPROM_Write(0,highscore);
		}
		break;
     8fc:	6f de       	rcall	.-802    	; 0x5dc <SNESINPUT>
			state = 1;
			dinoC = 17;
			dinoT= 1;
			incomeSpeed = 20;
		}
		else if(SNESINPUT() == 4){
     8fe:	84 30       	cpi	r24, 0x04	; 4
     900:	89 f4       	brne	.+34     	; 0x924 <GAME+0xcc>
     902:	82 e0       	ldi	r24, 0x02	; 2
     904:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <init>
			init =2;
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	90 e0       	ldi	r25, 0x00	; 0
			state = 1;
     90c:	9c 83       	std	Y+4, r25	; 0x04
     90e:	8b 83       	std	Y+3, r24	; 0x03
     910:	81 e1       	ldi	r24, 0x11	; 17
     912:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <dinoC>
			dinoC = 17;
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <dinoT>
			dinoT= 1;
     91c:	8a e0       	ldi	r24, 0x0A	; 10
			incomeSpeed = 10;
     91e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <incomeSpeed>
     922:	7c c0       	rjmp	.+248    	; 0xa1c <GAME+0x1c4>
		}
		else if(SNESINPUT() == 11){// L R D
			highscore = 0;
			EEPROM_Write(0,highscore);
		}
		break;
     924:	5b de       	rcall	.-842    	; 0x5dc <SNESINPUT>
			state = 1;
			dinoC = 17;
			dinoT= 1;
			incomeSpeed = 10;
		}
		else if(SNESINPUT() == 19){// L R UP
     926:	83 31       	cpi	r24, 0x13	; 19
     928:	21 f4       	brne	.+8      	; 0x932 <GAME+0xda>
     92a:	83 e6       	ldi	r24, 0x63	; 99
			score = 99;
     92c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <score>
     930:	75 c0       	rjmp	.+234    	; 0xa1c <GAME+0x1c4>
		}
		else if(SNESINPUT() == 11){// L R D
			highscore = 0;
			EEPROM_Write(0,highscore);
		}
		break;
     932:	54 de       	rcall	.-856    	; 0x5dc <SNESINPUT>
			incomeSpeed = 10;
		}
		else if(SNESINPUT() == 19){// L R UP
			score = 99;
		}
		else if(SNESINPUT() == 11){// L R D
     934:	8b 30       	cpi	r24, 0x0B	; 11
     936:	09 f0       	breq	.+2      	; 0x93a <GAME+0xe2>
     938:	71 c0       	rjmp	.+226    	; 0xa1c <GAME+0x1c4>
     93a:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <highscore>
			highscore = 0;
     93e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <highscore>
			EEPROM_Write(0,highscore);
     942:	68 2f       	mov	r22, r24
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	28 de       	rcall	.-944    	; 0x598 <EEPROM_Write>
     948:	69 c0       	rjmp	.+210    	; 0xa1c <GAME+0x1c4>
     94a:	48 de       	rcall	.-880    	; 0x5dc <SNESINPUT>
		}
		break;
     94c:	8a 83       	std	Y+2, r24	; 0x02
		
		case 1:
		if(1);
		unsigned char input = SNESINPUT();
     94e:	8a 81       	ldd	r24, Y+2	; 0x02
     950:	88 30       	cpi	r24, 0x08	; 8
     952:	39 f4       	brne	.+14     	; 0x962 <GAME+0x10a>
		if(input == 8){
     954:	81 e1       	ldi	r24, 0x11	; 17
     956:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <dinoC>
			dinoC = 17;
     95a:	86 e0       	ldi	r24, 0x06	; 6
     95c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <dinoT>
			dinoT = 6;
     960:	5f c0       	rjmp	.+190    	; 0xa20 <GAME+0x1c8>
     962:	8a 81       	ldd	r24, Y+2	; 0x02
     964:	84 30       	cpi	r24, 0x04	; 4
		}
		else if(input == 0){
			dinoC = 17;
			dinoT = 1;	
		}
		break;
     966:	59 f4       	brne	.+22     	; 0x97e <GAME+0x126>
		unsigned char input = SNESINPUT();
		if(input == 8){
			dinoC = 17;
			dinoT = 6;
		}
		else if(input == 4){
     968:	81 e1       	ldi	r24, 0x11	; 17
     96a:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <dinoC>
			dinoC = 17;
     96e:	87 e0       	ldi	r24, 0x07	; 7
     970:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <dinoT>
			dinoT = 7;
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	9c 83       	std	Y+4, r25	; 0x04
			state = 2;
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	51 c0       	rjmp	.+162    	; 0xa20 <GAME+0x1c8>
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	88 23       	and	r24, r24
		}
		else if(input == 0){
			dinoC = 17;
			dinoT = 1;	
		}
		break;
     982:	09 f0       	breq	.+2      	; 0x986 <GAME+0x12e>
		else if(input == 4){
			dinoC = 17;
			dinoT = 7;
			state = 2;
		}
		else if(input == 0){
     984:	4d c0       	rjmp	.+154    	; 0xa20 <GAME+0x1c8>
     986:	81 e1       	ldi	r24, 0x11	; 17
     988:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <dinoC>
			dinoC = 17;
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <dinoT>
			dinoT = 1;	
     992:	46 c0       	rjmp	.+140    	; 0xa20 <GAME+0x1c8>
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <dinoC>
		}
		break;
		
		case 2:
			dinoC = 1;
     99a:	86 e0       	ldi	r24, 0x06	; 6
     99c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <dinoT>
			dinoT = 6;
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	9c 83       	std	Y+4, r25	; 0x04
			state = 3;
     9a6:	8b 83       	std	Y+3, r24	; 0x03
     9a8:	3c c0       	rjmp	.+120    	; 0xa22 <GAME+0x1ca>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <dinoC>
		break;
		
		case 3:
			dinoC = 1;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <dinoT>
			dinoT = 1;
     9b6:	84 e0       	ldi	r24, 0x04	; 4
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	9c 83       	std	Y+4, r25	; 0x04
			state = 4;
     9bc:	8b 83       	std	Y+3, r24	; 0x03
     9be:	31 c0       	rjmp	.+98     	; 0xa22 <GAME+0x1ca>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <dinoC>
		break;
		
		case 7:
		dinoC = 1;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <dinoT>
		dinoT = 1;
     9cc:	84 e0       	ldi	r24, 0x04	; 4
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	9c 83       	std	Y+4, r25	; 0x04
		state = 4;
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	26 c0       	rjmp	.+76     	; 0xa22 <GAME+0x1ca>
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <dinoC>
		break;
		
		case 4:
			dinoC = 1;
     9dc:	86 e0       	ldi	r24, 0x06	; 6
     9de:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <dinoT>
			dinoT= 6;
     9e2:	85 e0       	ldi	r24, 0x05	; 5
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	9c 83       	std	Y+4, r25	; 0x04
			state = 5;
     9e8:	8b 83       	std	Y+3, r24	; 0x03
     9ea:	1b c0       	rjmp	.+54     	; 0xa22 <GAME+0x1ca>
     9ec:	81 e1       	ldi	r24, 0x11	; 17
     9ee:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <dinoC>
		break;
		
		case 5:
			dinoC = 17;
     9f2:	87 e0       	ldi	r24, 0x07	; 7
     9f4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <dinoT>
			dinoT = 7;
     9f8:	86 e0       	ldi	r24, 0x06	; 6
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	9c 83       	std	Y+4, r25	; 0x04
			state = 6;
     9fe:	8b 83       	std	Y+3, r24	; 0x03
     a00:	10 c0       	rjmp	.+32     	; 0xa22 <GAME+0x1ca>
     a02:	81 e1       	ldi	r24, 0x11	; 17
     a04:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <dinoC>
		break;
		
		case 6:
			dinoC = 17;
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <dinoT>
			dinoT = 1;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	9c 83       	std	Y+4, r25	; 0x04
			state = 1;
     a14:	8b 83       	std	Y+3, r24	; 0x03
     a16:	05 c0       	rjmp	.+10     	; 0xa22 <GAME+0x1ca>
     a18:	00 00       	nop
		break;
     a1a:	03 c0       	rjmp	.+6      	; 0xa22 <GAME+0x1ca>
		
		default:
		break;
     a1c:	00 00       	nop
     a1e:	01 c0       	rjmp	.+2      	; 0xa22 <GAME+0x1ca>
		}
		else if(SNESINPUT() == 11){// L R D
			highscore = 0;
			EEPROM_Write(0,highscore);
		}
		break;
     a20:	00 00       	nop
     a22:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <init>
		default:
		break;
			
				
	}
	if(init == 2){
     a26:	82 30       	cpi	r24, 0x02	; 2
     a28:	09 f4       	brne	.+2      	; 0xa2c <GAME+0x1d4>
     a2a:	1f de       	rcall	.-962    	; 0x66a <draw>
     a2c:	8b 81       	ldd	r24, Y+3	; 0x03
	draw();
     a2e:	9c 81       	ldd	r25, Y+4	; 0x04
     a30:	0f 90       	pop	r0
	}
	return state;
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
}
     a36:	0f 90       	pop	r0
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <INCOMING>:
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	00 d0       	rcall	.+0      	; 0xa44 <INCOMING+0x6>

int INCOMING(int state){
     a44:	1f 92       	push	r1
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	9b 83       	std	Y+3, r25	; 0x03
     a4c:	8a 83       	std	Y+2, r24	; 0x02
	for(unsigned char i = 0; i< 5; i++){
     a4e:	19 82       	std	Y+1, r1	; 0x01
     a50:	11 c1       	rjmp	.+546    	; 0xc74 <INCOMING+0x236>
		if((enemeys[i].cur > 1 && enemeys[i].cur <= 16) || (enemeys[i].cur >17 && enemeys[i].cur <= 32)){
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	88 2f       	mov	r24, r24
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	81 54       	subi	r24, 0x41	; 65
     a5e:	9e 4f       	sbci	r25, 0xFE	; 254
     a60:	fc 01       	movw	r30, r24
     a62:	80 81       	ld	r24, Z
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	58 f0       	brcs	.+22     	; 0xa7e <INCOMING+0x40>
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	88 2f       	mov	r24, r24
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	81 54       	subi	r24, 0x41	; 65
     a74:	9e 4f       	sbci	r25, 0xFE	; 254
     a76:	fc 01       	movw	r30, r24
     a78:	80 81       	ld	r24, Z
     a7a:	81 31       	cpi	r24, 0x11	; 17
     a7c:	b0 f0       	brcs	.+44     	; 0xaaa <INCOMING+0x6c>
     a7e:	89 81       	ldd	r24, Y+1	; 0x01
     a80:	88 2f       	mov	r24, r24
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	81 54       	subi	r24, 0x41	; 65
     a8a:	9e 4f       	sbci	r25, 0xFE	; 254
     a8c:	fc 01       	movw	r30, r24
     a8e:	80 81       	ld	r24, Z
     a90:	82 31       	cpi	r24, 0x12	; 18
     a92:	f8 f0       	brcs	.+62     	; 0xad2 <INCOMING+0x94>
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	88 2f       	mov	r24, r24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	81 54       	subi	r24, 0x41	; 65
     aa0:	9e 4f       	sbci	r25, 0xFE	; 254
     aa2:	fc 01       	movw	r30, r24
     aa4:	80 81       	ld	r24, Z
     aa6:	81 32       	cpi	r24, 0x21	; 33
     aa8:	a0 f4       	brcc	.+40     	; 0xad2 <INCOMING+0x94>
			enemeys[i].cur -=1;
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	88 2f       	mov	r24, r24
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	29 81       	ldd	r18, Y+1	; 0x01
     ab2:	22 2f       	mov	r18, r18
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	22 0f       	add	r18, r18
     ab8:	33 1f       	adc	r19, r19
     aba:	21 54       	subi	r18, 0x41	; 65
     abc:	3e 4f       	sbci	r19, 0xFE	; 254
     abe:	f9 01       	movw	r30, r18
     ac0:	20 81       	ld	r18, Z
     ac2:	21 50       	subi	r18, 0x01	; 1
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	81 54       	subi	r24, 0x41	; 65
     aca:	9e 4f       	sbci	r25, 0xFE	; 254
     acc:	fc 01       	movw	r30, r24
     ace:	20 83       	st	Z, r18
     ad0:	ce c0       	rjmp	.+412    	; 0xc6e <INCOMING+0x230>
		}
		else if(enemeys[i].cur == 1){
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	88 2f       	mov	r24, r24
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	81 54       	subi	r24, 0x41	; 65
     ade:	9e 4f       	sbci	r25, 0xFE	; 254
     ae0:	fc 01       	movw	r30, r24
     ae2:	80 81       	ld	r24, Z
     ae4:	81 30       	cpi	r24, 0x01	; 1
     ae6:	09 f0       	breq	.+2      	; 0xaea <INCOMING+0xac>
     ae8:	50 c0       	rjmp	.+160    	; 0xb8a <INCOMING+0x14c>
			if(dinoC == 1){
     aea:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <dinoC>
     aee:	81 30       	cpi	r24, 0x01	; 1
     af0:	b9 f5       	brne	.+110    	; 0xb60 <INCOMING+0x122>
				if(dinoT == 1){
     af2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <dinoT>
     af6:	81 30       	cpi	r24, 0x01	; 1
     af8:	19 f4       	brne	.+6      	; 0xb00 <INCOMING+0xc2>
					gg = 0;
     afa:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <gg>
     afe:	35 c0       	rjmp	.+106    	; 0xb6a <INCOMING+0x12c>
				}
				else if(dinoT == 6){
     b00:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <dinoT>
     b04:	86 30       	cpi	r24, 0x06	; 6
     b06:	a1 f4       	brne	.+40     	; 0xb30 <INCOMING+0xf2>
					if(enemeys[i].type == 3){
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	88 2f       	mov	r24, r24
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	88 0f       	add	r24, r24
     b10:	99 1f       	adc	r25, r25
     b12:	80 54       	subi	r24, 0x40	; 64
     b14:	9e 4f       	sbci	r25, 0xFE	; 254
     b16:	fc 01       	movw	r30, r24
     b18:	80 81       	ld	r24, Z
     b1a:	83 30       	cpi	r24, 0x03	; 3
     b1c:	31 f4       	brne	.+12     	; 0xb2a <INCOMING+0xec>
						score++;
     b1e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <score>
     b22:	8f 5f       	subi	r24, 0xFF	; 255
     b24:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <score>
     b28:	20 c0       	rjmp	.+64     	; 0xb6a <INCOMING+0x12c>
					}
					else {
						gg = 0;
     b2a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <gg>
     b2e:	1d c0       	rjmp	.+58     	; 0xb6a <INCOMING+0x12c>
					}
				}else if(dinoT == 7){
     b30:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <dinoT>
     b34:	87 30       	cpi	r24, 0x07	; 7
     b36:	c9 f4       	brne	.+50     	; 0xb6a <INCOMING+0x12c>
					if(enemeys[i].type == 4){
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	88 2f       	mov	r24, r24
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	88 0f       	add	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	80 54       	subi	r24, 0x40	; 64
     b44:	9e 4f       	sbci	r25, 0xFE	; 254
     b46:	fc 01       	movw	r30, r24
     b48:	80 81       	ld	r24, Z
     b4a:	84 30       	cpi	r24, 0x04	; 4
     b4c:	31 f4       	brne	.+12     	; 0xb5a <INCOMING+0x11c>
						score++;
     b4e:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <score>
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <score>
     b58:	08 c0       	rjmp	.+16     	; 0xb6a <INCOMING+0x12c>
					}else{
						gg =0 ;
     b5a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <gg>
     b5e:	05 c0       	rjmp	.+10     	; 0xb6a <INCOMING+0x12c>
					}
				}
			}
			else{
				score++;
     b60:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <score>
     b64:	8f 5f       	subi	r24, 0xFF	; 255
     b66:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <score>
			}
			enemeys[i].cur = 36;
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	88 2f       	mov	r24, r24
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	81 54       	subi	r24, 0x41	; 65
     b76:	9e 4f       	sbci	r25, 0xFE	; 254
     b78:	24 e2       	ldi	r18, 0x24	; 36
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 83       	st	Z, r18
			Encnt--;
     b7e:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <Encnt>
     b82:	81 50       	subi	r24, 0x01	; 1
     b84:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <Encnt>
     b88:	72 c0       	rjmp	.+228    	; 0xc6e <INCOMING+0x230>
		}
		else if(enemeys[i].cur == 17){
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	81 54       	subi	r24, 0x41	; 65
     b96:	9e 4f       	sbci	r25, 0xFE	; 254
     b98:	fc 01       	movw	r30, r24
     b9a:	80 81       	ld	r24, Z
     b9c:	81 31       	cpi	r24, 0x11	; 17
     b9e:	09 f0       	breq	.+2      	; 0xba2 <INCOMING+0x164>
     ba0:	66 c0       	rjmp	.+204    	; 0xc6e <INCOMING+0x230>
			if(dinoC == 17){
     ba2:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <dinoC>
     ba6:	81 31       	cpi	r24, 0x11	; 17
     ba8:	09 f0       	breq	.+2      	; 0xbac <INCOMING+0x16e>
     baa:	4d c0       	rjmp	.+154    	; 0xc46 <INCOMING+0x208>
				if(dinoT == 1){
     bac:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <dinoT>
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	19 f4       	brne	.+6      	; 0xbba <INCOMING+0x17c>
					gg =  0;
     bb4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <gg>
     bb8:	4b c0       	rjmp	.+150    	; 0xc50 <INCOMING+0x212>
				}
				else if(dinoT == 6){
     bba:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <dinoT>
     bbe:	86 30       	cpi	r24, 0x06	; 6
     bc0:	f9 f4       	brne	.+62     	; 0xc00 <INCOMING+0x1c2>
					if(enemeys[i].type == 5 || enemeys[i].type == 3){
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	88 2f       	mov	r24, r24
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	80 54       	subi	r24, 0x40	; 64
     bce:	9e 4f       	sbci	r25, 0xFE	; 254
     bd0:	fc 01       	movw	r30, r24
     bd2:	80 81       	ld	r24, Z
     bd4:	85 30       	cpi	r24, 0x05	; 5
     bd6:	59 f0       	breq	.+22     	; 0xbee <INCOMING+0x1b0>
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	88 2f       	mov	r24, r24
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	80 54       	subi	r24, 0x40	; 64
     be4:	9e 4f       	sbci	r25, 0xFE	; 254
     be6:	fc 01       	movw	r30, r24
     be8:	80 81       	ld	r24, Z
     bea:	83 30       	cpi	r24, 0x03	; 3
     bec:	31 f4       	brne	.+12     	; 0xbfa <INCOMING+0x1bc>
						score++;
     bee:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <score>
     bf2:	8f 5f       	subi	r24, 0xFF	; 255
     bf4:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <score>
     bf8:	2b c0       	rjmp	.+86     	; 0xc50 <INCOMING+0x212>
					}else{
						gg = 0;
     bfa:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <gg>
     bfe:	28 c0       	rjmp	.+80     	; 0xc50 <INCOMING+0x212>
					}				
				}else if(dinoT == 7){
     c00:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <dinoT>
     c04:	87 30       	cpi	r24, 0x07	; 7
     c06:	21 f5       	brne	.+72     	; 0xc50 <INCOMING+0x212>
					if(enemeys[i].type == 4 || enemeys[i].type == 2){
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	88 2f       	mov	r24, r24
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	80 54       	subi	r24, 0x40	; 64
     c14:	9e 4f       	sbci	r25, 0xFE	; 254
     c16:	fc 01       	movw	r30, r24
     c18:	80 81       	ld	r24, Z
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	59 f0       	breq	.+22     	; 0xc34 <INCOMING+0x1f6>
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	88 2f       	mov	r24, r24
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	80 54       	subi	r24, 0x40	; 64
     c2a:	9e 4f       	sbci	r25, 0xFE	; 254
     c2c:	fc 01       	movw	r30, r24
     c2e:	80 81       	ld	r24, Z
     c30:	82 30       	cpi	r24, 0x02	; 2
     c32:	31 f4       	brne	.+12     	; 0xc40 <INCOMING+0x202>
						score++;
     c34:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <score>
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <score>
     c3e:	08 c0       	rjmp	.+16     	; 0xc50 <INCOMING+0x212>
					}	else{
						gg =0;
     c40:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <gg>
     c44:	05 c0       	rjmp	.+10     	; 0xc50 <INCOMING+0x212>
					}
				}
			}
			else{
				score++;
     c46:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <score>
     c4a:	8f 5f       	subi	r24, 0xFF	; 255
     c4c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <score>
			}
			enemeys[i].cur = 36;
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	81 54       	subi	r24, 0x41	; 65
     c5c:	9e 4f       	sbci	r25, 0xFE	; 254
     c5e:	24 e2       	ldi	r18, 0x24	; 36
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18
			Encnt--;
     c64:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <Encnt>
     c68:	81 50       	subi	r24, 0x01	; 1
     c6a:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <Encnt>
	}
	return state;
}

int INCOMING(int state){
	for(unsigned char i = 0; i< 5; i++){
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	8f 5f       	subi	r24, 0xFF	; 255
     c72:	89 83       	std	Y+1, r24	; 0x01
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	85 30       	cpi	r24, 0x05	; 5
     c78:	08 f4       	brcc	.+2      	; 0xc7c <INCOMING+0x23e>
     c7a:	eb ce       	rjmp	.-554    	; 0xa52 <INCOMING+0x14>
			}
			enemeys[i].cur = 36;
			Encnt--;
		}
	}
	if(Encnt < 5){
     c7c:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <Encnt>
     c80:	85 30       	cpi	r24, 0x05	; 5
     c82:	08 f4       	brcc	.+2      	; 0xc86 <INCOMING+0x248>
		SPAWN();
     c84:	08 d0       	rcall	.+16     	; 0xc96 <SPAWN>
	}
	
	return 1;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
}
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	08 95       	ret

00000c96 <SPAWN>:

int SPAWN(int state){
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <SPAWN+0x6>
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <SPAWN+0x8>
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	9c 83       	std	Y+4, r25	; 0x04
     ca4:	8b 83       	std	Y+3, r24	; 0x03
	if(init >= 2 && (spawnRate <= cnt && Encnt < 5)){
     ca6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <init>
     caa:	82 30       	cpi	r24, 0x02	; 2
     cac:	08 f4       	brcc	.+2      	; 0xcb0 <SPAWN+0x1a>
     cae:	d9 c0       	rjmp	.+434    	; 0xe62 <SPAWN+0x1cc>
     cb0:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <spawnRate>
     cb4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <cnt>
     cb8:	89 17       	cp	r24, r25
     cba:	08 f4       	brcc	.+2      	; 0xcbe <SPAWN+0x28>
     cbc:	d2 c0       	rjmp	.+420    	; 0xe62 <SPAWN+0x1cc>
     cbe:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <Encnt>
     cc2:	85 30       	cpi	r24, 0x05	; 5
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <SPAWN+0x32>
     cc6:	cd c0       	rjmp	.+410    	; 0xe62 <SPAWN+0x1cc>
		//LCD_DisplayString(1, "INCOMING");
		unsigned char tp;
		unsigned char row = rand() % 2;
     cc8:	86 d3       	rcall	.+1804   	; 0x13d6 <rand>
     cca:	81 70       	andi	r24, 0x01	; 1
     ccc:	90 78       	andi	r25, 0x80	; 128
     cce:	99 23       	and	r25, r25
     cd0:	24 f4       	brge	.+8      	; 0xcda <SPAWN+0x44>
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	8e 6f       	ori	r24, 0xFE	; 254
     cd6:	9f 6f       	ori	r25, 0xFF	; 255
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	89 83       	std	Y+1, r24	; 0x01
		if(row){//top
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	88 23       	and	r24, r24
     ce0:	09 f4       	brne	.+2      	; 0xce4 <SPAWN+0x4e>
     ce2:	43 c0       	rjmp	.+134    	; 0xd6a <SPAWN+0xd4>
			enemeys[Encur].cur = 16;
     ce4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <Encur>
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	81 54       	subi	r24, 0x41	; 65
     cf2:	9e 4f       	sbci	r25, 0xFE	; 254
     cf4:	20 e1       	ldi	r18, 0x10	; 16
     cf6:	fc 01       	movw	r30, r24
			tp = rand() * 5 % 3;
     cf8:	20 83       	st	Z, r18
     cfa:	6d d3       	rcall	.+1754   	; 0x13d6 <rand>
     cfc:	9c 01       	movw	r18, r24
     cfe:	c9 01       	movw	r24, r18
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	82 0f       	add	r24, r18
     d0a:	93 1f       	adc	r25, r19
     d0c:	23 e0       	ldi	r18, 0x03	; 3
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	b9 01       	movw	r22, r18
     d12:	ea d2       	rcall	.+1492   	; 0x12e8 <__divmodhi4>
     d14:	8a 83       	std	Y+2, r24	; 0x02
			if(tp == 1){
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	61 f4       	brne	.+24     	; 0xd34 <SPAWN+0x9e>
				enemeys[Encur].type = 4;
     d1c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <Encur>
     d20:	88 2f       	mov	r24, r24
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	80 54       	subi	r24, 0x40	; 64
     d2a:	9e 4f       	sbci	r25, 0xFE	; 254
     d2c:	24 e0       	ldi	r18, 0x04	; 4
     d2e:	fc 01       	movw	r30, r24
     d30:	20 83       	st	Z, r18
     d32:	72 c0       	rjmp	.+228    	; 0xe18 <SPAWN+0x182>
			}else if(tp == 2){
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	61 f4       	brne	.+24     	; 0xd52 <SPAWN+0xbc>
				enemeys[Encur].type = 5;
     d3a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <Encur>
     d3e:	88 2f       	mov	r24, r24
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	80 54       	subi	r24, 0x40	; 64
     d48:	9e 4f       	sbci	r25, 0xFE	; 254
     d4a:	25 e0       	ldi	r18, 0x05	; 5
     d4c:	fc 01       	movw	r30, r24
     d4e:	20 83       	st	Z, r18
     d50:	63 c0       	rjmp	.+198    	; 0xe18 <SPAWN+0x182>
			}else{
				enemeys[Encur].type = 3;
     d52:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <Encur>
     d56:	88 2f       	mov	r24, r24
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	80 54       	subi	r24, 0x40	; 64
     d60:	9e 4f       	sbci	r25, 0xFE	; 254
     d62:	23 e0       	ldi	r18, 0x03	; 3
     d64:	fc 01       	movw	r30, r24
     d66:	20 83       	st	Z, r18
     d68:	57 c0       	rjmp	.+174    	; 0xe18 <SPAWN+0x182>
			}
		}else{//bottom
			enemeys[Encur].cur = 32;
     d6a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <Encur>
     d6e:	88 2f       	mov	r24, r24
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	81 54       	subi	r24, 0x41	; 65
     d78:	9e 4f       	sbci	r25, 0xFE	; 254
     d7a:	20 e2       	ldi	r18, 0x20	; 32
     d7c:	fc 01       	movw	r30, r24
			tp = rand() * 7 % 4;
     d7e:	20 83       	st	Z, r18
     d80:	2a d3       	rcall	.+1620   	; 0x13d6 <rand>
     d82:	9c 01       	movw	r18, r24
     d84:	c9 01       	movw	r24, r18
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	82 1b       	sub	r24, r18
     d94:	93 0b       	sbc	r25, r19
     d96:	83 70       	andi	r24, 0x03	; 3
     d98:	90 78       	andi	r25, 0x80	; 128
     d9a:	99 23       	and	r25, r25
     d9c:	24 f4       	brge	.+8      	; 0xda6 <SPAWN+0x110>
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	8c 6f       	ori	r24, 0xFC	; 252
     da2:	9f 6f       	ori	r25, 0xFF	; 255
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	8a 83       	std	Y+2, r24	; 0x02
			if(tp == 1){
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	61 f4       	brne	.+24     	; 0xdc6 <SPAWN+0x130>
				enemeys[Encur].type = 3;
     dae:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <Encur>
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	80 54       	subi	r24, 0x40	; 64
     dbc:	9e 4f       	sbci	r25, 0xFE	; 254
     dbe:	23 e0       	ldi	r18, 0x03	; 3
     dc0:	fc 01       	movw	r30, r24
     dc2:	20 83       	st	Z, r18
     dc4:	29 c0       	rjmp	.+82     	; 0xe18 <SPAWN+0x182>
			}else if(tp ==2){
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	61 f4       	brne	.+24     	; 0xde4 <SPAWN+0x14e>
				enemeys[Encur].type = 5;
     dcc:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <Encur>
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	80 54       	subi	r24, 0x40	; 64
     dda:	9e 4f       	sbci	r25, 0xFE	; 254
     ddc:	25 e0       	ldi	r18, 0x05	; 5
     dde:	fc 01       	movw	r30, r24
     de0:	20 83       	st	Z, r18
     de2:	1a c0       	rjmp	.+52     	; 0xe18 <SPAWN+0x182>
			}else if(tp == 3){
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	83 30       	cpi	r24, 0x03	; 3
     de8:	61 f4       	brne	.+24     	; 0xe02 <SPAWN+0x16c>
				enemeys[Encur].type = 2;
     dea:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <Encur>
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	80 54       	subi	r24, 0x40	; 64
     df8:	9e 4f       	sbci	r25, 0xFE	; 254
     dfa:	22 e0       	ldi	r18, 0x02	; 2
     dfc:	fc 01       	movw	r30, r24
     dfe:	20 83       	st	Z, r18
     e00:	0b c0       	rjmp	.+22     	; 0xe18 <SPAWN+0x182>
			}else{
				enemeys[Encur].type = 4;
     e02:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <Encur>
     e06:	88 2f       	mov	r24, r24
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	80 54       	subi	r24, 0x40	; 64
     e10:	9e 4f       	sbci	r25, 0xFE	; 254
     e12:	24 e0       	ldi	r18, 0x04	; 4
     e14:	fc 01       	movw	r30, r24
     e16:	20 83       	st	Z, r18
			}
		}
		
		Encnt++;
     e18:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <Encnt>
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <Encnt>
		if(Encur >= 4){
     e22:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <Encur>
     e26:	84 30       	cpi	r24, 0x04	; 4
     e28:	60 f0       	brcs	.+24     	; 0xe42 <SPAWN+0x1ac>
			if(incomeSpeed > 5){
     e2a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <incomeSpeed>
     e2e:	86 30       	cpi	r24, 0x06	; 6
     e30:	28 f0       	brcs	.+10     	; 0xe3c <SPAWN+0x1a6>
				incomeSpeed--;
     e32:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <incomeSpeed>
     e36:	81 50       	subi	r24, 0x01	; 1
     e38:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <incomeSpeed>
			}
			Encur = 0;
     e3c:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <Encur>
     e40:	05 c0       	rjmp	.+10     	; 0xe4c <SPAWN+0x1b6>
		}else{
			Encur++;
     e42:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <Encur>
     e46:	8f 5f       	subi	r24, 0xFF	; 255
     e48:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <Encur>
		}
		spawnRate = (rand() % 5)+1;
     e4c:	c4 d2       	rcall	.+1416   	; 0x13d6 <rand>
     e4e:	25 e0       	ldi	r18, 0x05	; 5
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	b9 01       	movw	r22, r18
     e54:	49 d2       	rcall	.+1170   	; 0x12e8 <__divmodhi4>
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <spawnRate>
		cnt = 0;
     e5c:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <cnt>
	
	return 1;
}

int SPAWN(int state){
	if(init >= 2 && (spawnRate <= cnt && Encnt < 5)){
     e60:	05 c0       	rjmp	.+10     	; 0xe6c <SPAWN+0x1d6>
		}
		spawnRate = (rand() % 5)+1;
		cnt = 0;
	}
	else{
	cnt++;
     e62:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <cnt>
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <cnt>
	}
	//LCD_Cursor(1);
	//LCD_WriteData(spawnRate + '0');
	//LCD_Cursor(2);
	//LCD_WriteData(cnt + '0');
}
     e6c:	00 00       	nop
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <main>:


int main(void)
{
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	62 97       	sbiw	r28, 0x12	; 18
     e8a:	0f b6       	in	r0, 0x3f	; 63
     e8c:	f8 94       	cli
     e8e:	de bf       	out	0x3e, r29	; 62
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
     e94:	84 e2       	ldi	r24, 0x24	; 36
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	2f ef       	ldi	r18, 0xFF	; 255
     e9a:	fc 01       	movw	r30, r24
     e9c:	20 83       	st	Z, r18
     e9e:	85 e2       	ldi	r24, 0x25	; 37
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	fc 01       	movw	r30, r24
     ea4:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
     ea6:	87 e2       	ldi	r24, 0x27	; 39
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	2f ef       	ldi	r18, 0xFF	; 255
     eac:	fc 01       	movw	r30, r24
     eae:	20 83       	st	Z, r18
     eb0:	88 e2       	ldi	r24, 0x28	; 40
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	fc 01       	movw	r30, r24
     eb6:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00;
     eb8:	8a e2       	ldi	r24, 0x2A	; 42
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	2f ef       	ldi	r18, 0xFF	; 255
     ebe:	fc 01       	movw	r30, r24
     ec0:	20 83       	st	Z, r18
     ec2:	8b e2       	ldi	r24, 0x2B	; 43
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	fc 01       	movw	r30, r24
     ec8:	10 82       	st	Z, r1
	DDRA = 0x03; PORTA = 0xFF;
     eca:	81 e2       	ldi	r24, 0x21	; 33
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	23 e0       	ldi	r18, 0x03	; 3
     ed0:	fc 01       	movw	r30, r24
     ed2:	20 83       	st	Z, r18
     ed4:	82 e2       	ldi	r24, 0x22	; 34
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	2f ef       	ldi	r18, 0xFF	; 255
     eda:	fc 01       	movw	r30, r24
     edc:	20 83       	st	Z, r18
	
	SNES_init();
     ede:	cd da       	rcall	.-2662   	; 0x47a <SNES_init>
	TimerSet(1);
     ee0:	61 e0       	ldi	r22, 0x01	; 1
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
     ee8:	0b d9       	rcall	.-3562   	; 0x100 <TimerSet>
     eea:	38 d9       	rcall	.-3472   	; 0x15c <TimerOn>
	LCD_init();
     eec:	e4 d9       	rcall	.-3128   	; 0x2b6 <LCD_init>
	
	//initSymbol(0, TALLP1);
	initSymbol(1, TREX);
     eee:	68 e0       	ldi	r22, 0x08	; 8
     ef0:	71 e0       	ldi	r23, 0x01	; 1
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	00 dc       	rcall	.-2048   	; 0x6f6 <initSymbol>
	initSymbol(2, TALLP2);
     ef6:	60 e1       	ldi	r22, 0x10	; 16
     ef8:	71 e0       	ldi	r23, 0x01	; 1
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	fc db       	rcall	.-2056   	; 0x6f6 <initSymbol>
	initSymbol(3, ArrowHIGHP1);
     efe:	60 e2       	ldi	r22, 0x20	; 32
     f00:	71 e0       	ldi	r23, 0x01	; 1
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	f8 db       	rcall	.-2064   	; 0x6f6 <initSymbol>
	initSymbol(4, ArrowHIGHP2);
     f06:	68 e2       	ldi	r22, 0x28	; 40
     f08:	71 e0       	ldi	r23, 0x01	; 1
     f0a:	84 e0       	ldi	r24, 0x04	; 4
     f0c:	f4 db       	rcall	.-2072   	; 0x6f6 <initSymbol>
	initSymbol(5, ArrowLOW);
     f0e:	68 e1       	ldi	r22, 0x18	; 24
     f10:	71 e0       	ldi	r23, 0x01	; 1
     f12:	85 e0       	ldi	r24, 0x05	; 5
     f14:	f0 db       	rcall	.-2080   	; 0x6f6 <initSymbol>
	initSymbol(6, CrouchLOW);
     f16:	60 e3       	ldi	r22, 0x30	; 48
     f18:	71 e0       	ldi	r23, 0x01	; 1
     f1a:	86 e0       	ldi	r24, 0x06	; 6
     f1c:	ec db       	rcall	.-2088   	; 0x6f6 <initSymbol>
     f1e:	68 e3       	ldi	r22, 0x38	; 56
	initSymbol(7, CrouchHIGH);
     f20:	71 e0       	ldi	r23, 0x01	; 1
     f22:	87 e0       	ldi	r24, 0x07	; 7
     f24:	e8 db       	rcall	.-2096   	; 0x6f6 <initSymbol>
     f26:	83 e9       	ldi	r24, 0x93	; 147
     f28:	91 e0       	ldi	r25, 0x01	; 1
		
	static task test, test2, INIT, INCOM;
	task *tasks[] = {&INIT, &INCOM};
     f2a:	9e 83       	std	Y+6, r25	; 0x06
     f2c:	8d 83       	std	Y+5, r24	; 0x05
     f2e:	8e e9       	ldi	r24, 0x9E	; 158
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	98 87       	std	Y+8, r25	; 0x08
     f34:	8f 83       	std	Y+7, r24	; 0x07
     f36:	82 e0       	ldi	r24, 0x02	; 2
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	9c 83       	std	Y+4, r25	; 0x04
	
	if(EEPROM_Read(0) == 255){
     f3c:	8b 83       	std	Y+3, r24	; 0x03
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	3e db       	rcall	.-2436   	; 0x5be <EEPROM_Read>
     f42:	8f 3f       	cpi	r24, 0xFF	; 255
     f44:	29 f4       	brne	.+10     	; 0xf50 <main+0xd4>
		EEPROM_Write(0,highscore);
     f46:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <highscore>
     f4a:	68 2f       	mov	r22, r24
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	24 db       	rcall	.-2488   	; 0x598 <EEPROM_Write>
     f50:	c4 d8       	rcall	.-3704   	; 0xda <time>
	}
	srand(time());
     f52:	44 d2       	rcall	.+1160   	; 0x13dc <srand>
     f54:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <test.2191>
     f58:	81 e0       	ldi	r24, 0x01	; 1
	while(1){
	
	test.state = 0;//Task initial state.
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	a0 e0       	ldi	r26, 0x00	; 0
	test.period = 1;//Task Period.
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <test.2191+0x1>
     f64:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <test.2191+0x2>
     f68:	a0 93 ac 01 	sts	0x01AC, r26	; 0x8001ac <test.2191+0x3>
     f6c:	b0 93 ad 01 	sts	0x01AD, r27	; 0x8001ad <test.2191+0x4>
     f70:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <test.2191+0x5>
     f74:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <test.2191+0x6>
	test.elapsedTime = 0;//Task current elapsed time.
     f78:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <test.2191+0x7>
     f7c:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <test.2191+0x8>
     f80:	8d ea       	ldi	r24, 0xAD	; 173
     f82:	93 e0       	ldi	r25, 0x03	; 3
     f84:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <test.2191+0xa>
	test.TickFct = &SMTick1;//Function pointer for the tick.
     f88:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <test.2191+0x9>
     f8c:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <test2.2192>
     f90:	81 e0       	ldi	r24, 0x01	; 1
	
	test2.state = 0;//Task initial state.
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a0 e0       	ldi	r26, 0x00	; 0
	test2.period = 1;//Task Period.
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <test2.2192+0x1>
     f9c:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <test2.2192+0x2>
     fa0:	a0 93 b7 01 	sts	0x01B7, r26	; 0x8001b7 <test2.2192+0x3>
     fa4:	b0 93 b8 01 	sts	0x01B8, r27	; 0x8001b8 <test2.2192+0x4>
     fa8:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <test2.2192+0x5>
     fac:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <test2.2192+0x6>
	test2.elapsedTime = 0;//Task current elapsed time.
     fb0:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <test2.2192+0x7>
     fb4:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <test2.2192+0x8>
     fb8:	82 e1       	ldi	r24, 0x12	; 18
     fba:	94 e0       	ldi	r25, 0x04	; 4
     fbc:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <test2.2192+0xa>
	test2.TickFct = &Test2;//Function pointer for the tick.
     fc0:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <test2.2192+0x9>
     fc4:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <INIT.2193>
     fc8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <incomeSpeed>

	INIT.state = 0;//Task initial state.
     fcc:	88 2f       	mov	r24, r24
	INIT.period = incomeSpeed;//Task Period.
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <INIT.2193+0x1>
     fd8:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <INIT.2193+0x2>
     fdc:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <INIT.2193+0x3>
     fe0:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <INIT.2193+0x4>
     fe4:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <INIT.2193+0x5>
     fe8:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <INIT.2193+0x6>
	INIT.elapsedTime = 0;//Task current elapsed time.
     fec:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <INIT.2193+0x7>
     ff0:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <INIT.2193+0x8>
     ff4:	8c e2       	ldi	r24, 0x2C	; 44
     ff6:	94 e0       	ldi	r25, 0x04	; 4
     ff8:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <INIT.2193+0xa>
	INIT.TickFct = &GAME;//Function pointer for the tick.
     ffc:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <INIT.2193+0x9>
    1000:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <INCOM.2194>
    1004:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <incomeSpeed>
	
	INCOM.state = 0;//Task initial state.
    1008:	88 2f       	mov	r24, r24
	INCOM.period = incomeSpeed;//Task Period.
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <INCOM.2194+0x1>
    1014:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <INCOM.2194+0x2>
    1018:	a0 93 a1 01 	sts	0x01A1, r26	; 0x8001a1 <INCOM.2194+0x3>
    101c:	b0 93 a2 01 	sts	0x01A2, r27	; 0x8001a2 <INCOM.2194+0x4>
    1020:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <INCOM.2194+0x5>
    1024:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <INCOM.2194+0x6>
	INCOM.elapsedTime = 0;//Task current elapsed time.
    1028:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <INCOM.2194+0x7>
    102c:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <INCOM.2194+0x8>
    1030:	8f e1       	ldi	r24, 0x1F	; 31
    1032:	95 e0       	ldi	r25, 0x05	; 5
    1034:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <INCOM.2194+0xa>
	INCOM.TickFct = &INCOMING;//Function pointer for the tick.
    1038:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <INCOM.2194+0x9>
    103c:	19 82       	std	Y+1, r1	; 0x01
    103e:	17 c0       	rjmp	.+46     	; 0x106e <main+0x1f2>
    1040:	89 81       	ldd	r24, Y+1	; 0x01
	
	//LCD_DisplayString(1,"HELLO WORLD");
	
	for(unsigned char i=0;i<5;i++){
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
		enemeys[i].cur = 36;
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	81 54       	subi	r24, 0x41	; 65
    104c:	9e 4f       	sbci	r25, 0xFE	; 254
    104e:	24 e2       	ldi	r18, 0x24	; 36
    1050:	fc 01       	movw	r30, r24
    1052:	20 83       	st	Z, r18
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
		enemeys[i].type = 2;
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	80 54       	subi	r24, 0x40	; 64
    1060:	9e 4f       	sbci	r25, 0xFE	; 254
    1062:	22 e0       	ldi	r18, 0x02	; 2
    1064:	fc 01       	movw	r30, r24
    1066:	20 83       	st	Z, r18
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	8f 5f       	subi	r24, 0xFF	; 255
    106c:	89 83       	std	Y+1, r24	; 0x01
	INCOM.elapsedTime = 0;//Task current elapsed time.
	INCOM.TickFct = &INCOMING;//Function pointer for the tick.
	
	//LCD_DisplayString(1,"HELLO WORLD");
	
	for(unsigned char i=0;i<5;i++){
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	85 30       	cpi	r24, 0x05	; 5
    1072:	30 f3       	brcs	.-52     	; 0x1040 <main+0x1c4>
    1074:	cf c0       	rjmp	.+414    	; 0x1214 <main+0x398>
    1076:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <incomeSpeed>
		enemeys[i].cur = 36;
		enemeys[i].type = 2;
	}
	
	
	while(gg) {
    107a:	88 2f       	mov	r24, r24
		INIT.period = incomeSpeed;
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a0 e0       	ldi	r26, 0x00	; 0
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <INIT.2193+0x1>
    1086:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <INIT.2193+0x2>
    108a:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <INIT.2193+0x3>
    108e:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <INIT.2193+0x4>
    1092:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <incomeSpeed>
    1096:	88 2f       	mov	r24, r24
		INCOM.period = incomeSpeed;
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	a0 e0       	ldi	r26, 0x00	; 0
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <INCOM.2194+0x1>
    10a2:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <INCOM.2194+0x2>
    10a6:	a0 93 a1 01 	sts	0x01A1, r26	; 0x8001a1 <INCOM.2194+0x3>
    10aa:	b0 93 a2 01 	sts	0x01A2, r27	; 0x8001a2 <INCOM.2194+0x4>
    10ae:	1a 82       	std	Y+2, r1	; 0x02
    10b0:	a1 c0       	rjmp	.+322    	; 0x11f4 <main+0x378>
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
		// Scheduler code
		unsigned char i;
		for ( i = 0; i < numTasks; i++ ) {
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	9e 01       	movw	r18, r28
    10be:	2f 5f       	subi	r18, 0xFF	; 255
    10c0:	3f 4f       	sbci	r19, 0xFF	; 255
    10c2:	82 0f       	add	r24, r18
    10c4:	93 1f       	adc	r25, r19
    10c6:	04 96       	adiw	r24, 0x04	; 4
    10c8:	fc 01       	movw	r30, r24
    10ca:	80 81       	ld	r24, Z
    10cc:	91 81       	ldd	r25, Z+1	; 0x01
    10ce:	fc 01       	movw	r30, r24
    10d0:	25 81       	ldd	r18, Z+5	; 0x05
    10d2:	36 81       	ldd	r19, Z+6	; 0x06
    10d4:	47 81       	ldd	r20, Z+7	; 0x07
    10d6:	50 85       	ldd	r21, Z+8	; 0x08
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	be 01       	movw	r22, r28
    10e4:	6f 5f       	subi	r22, 0xFF	; 255
    10e6:	7f 4f       	sbci	r23, 0xFF	; 255
    10e8:	86 0f       	add	r24, r22
    10ea:	97 1f       	adc	r25, r23
    10ec:	04 96       	adiw	r24, 0x04	; 4
    10ee:	fc 01       	movw	r30, r24
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	fc 01       	movw	r30, r24
    10f6:	81 81       	ldd	r24, Z+1	; 0x01
    10f8:	92 81       	ldd	r25, Z+2	; 0x02
    10fa:	a3 81       	ldd	r26, Z+3	; 0x03
    10fc:	b4 81       	ldd	r27, Z+4	; 0x04
    10fe:	28 17       	cp	r18, r24
    1100:	39 07       	cpc	r19, r25
    1102:	4a 07       	cpc	r20, r26
    1104:	5b 07       	cpc	r21, r27
    1106:	09 f0       	breq	.+2      	; 0x110a <main+0x28e>
    1108:	49 c0       	rjmp	.+146    	; 0x119c <main+0x320>
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	9e 01       	movw	r18, r28
    1116:	2f 5f       	subi	r18, 0xFF	; 255
    1118:	3f 4f       	sbci	r19, 0xFF	; 255
    111a:	82 0f       	add	r24, r18
    111c:	93 1f       	adc	r25, r19
    111e:	04 96       	adiw	r24, 0x04	; 4
    1120:	fc 01       	movw	r30, r24
    1122:	00 81       	ld	r16, Z
    1124:	11 81       	ldd	r17, Z+1	; 0x01
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	88 2f       	mov	r24, r24
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	9e 01       	movw	r18, r28
    1132:	2f 5f       	subi	r18, 0xFF	; 255
    1134:	3f 4f       	sbci	r19, 0xFF	; 255
    1136:	82 0f       	add	r24, r18
    1138:	93 1f       	adc	r25, r19
    113a:	04 96       	adiw	r24, 0x04	; 4
    113c:	fc 01       	movw	r30, r24
    113e:	80 81       	ld	r24, Z
    1140:	91 81       	ldd	r25, Z+1	; 0x01
    1142:	fc 01       	movw	r30, r24
    1144:	21 85       	ldd	r18, Z+9	; 0x09
    1146:	32 85       	ldd	r19, Z+10	; 0x0a
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	ae 01       	movw	r20, r28
    1154:	4f 5f       	subi	r20, 0xFF	; 255
    1156:	5f 4f       	sbci	r21, 0xFF	; 255
    1158:	84 0f       	add	r24, r20
    115a:	95 1f       	adc	r25, r21
    115c:	04 96       	adiw	r24, 0x04	; 4
    115e:	fc 01       	movw	r30, r24
    1160:	80 81       	ld	r24, Z
    1162:	91 81       	ldd	r25, Z+1	; 0x01
    1164:	fc 01       	movw	r30, r24
    1166:	80 81       	ld	r24, Z
    1168:	08 2e       	mov	r0, r24
    116a:	00 0c       	add	r0, r0
    116c:	99 0b       	sbc	r25, r25
    116e:	f9 01       	movw	r30, r18
    1170:	09 95       	icall
    1172:	f8 01       	movw	r30, r16
    1174:	80 83       	st	Z, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	9e 01       	movw	r18, r28
    1182:	2f 5f       	subi	r18, 0xFF	; 255
    1184:	3f 4f       	sbci	r19, 0xFF	; 255
    1186:	82 0f       	add	r24, r18
    1188:	93 1f       	adc	r25, r19
    118a:	04 96       	adiw	r24, 0x04	; 4
    118c:	fc 01       	movw	r30, r24
    118e:	80 81       	ld	r24, Z
    1190:	91 81       	ldd	r25, Z+1	; 0x01
    1192:	fc 01       	movw	r30, r24
    1194:	15 82       	std	Z+5, r1	; 0x05
    1196:	16 82       	std	Z+6, r1	; 0x06
    1198:	17 82       	std	Z+7, r1	; 0x07
    119a:	10 86       	std	Z+8, r1	; 0x08
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
			}
			tasks[i]->elapsedTime += 1;
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	9e 01       	movw	r18, r28
    11a8:	2f 5f       	subi	r18, 0xFF	; 255
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	82 0f       	add	r24, r18
    11ae:	93 1f       	adc	r25, r19
    11b0:	04 96       	adiw	r24, 0x04	; 4
    11b2:	fc 01       	movw	r30, r24
    11b4:	20 81       	ld	r18, Z
    11b6:	31 81       	ldd	r19, Z+1	; 0x01
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	ae 01       	movw	r20, r28
    11c4:	4f 5f       	subi	r20, 0xFF	; 255
    11c6:	5f 4f       	sbci	r21, 0xFF	; 255
    11c8:	84 0f       	add	r24, r20
    11ca:	95 1f       	adc	r25, r21
    11cc:	04 96       	adiw	r24, 0x04	; 4
    11ce:	fc 01       	movw	r30, r24
    11d0:	80 81       	ld	r24, Z
    11d2:	91 81       	ldd	r25, Z+1	; 0x01
    11d4:	fc 01       	movw	r30, r24
    11d6:	85 81       	ldd	r24, Z+5	; 0x05
    11d8:	96 81       	ldd	r25, Z+6	; 0x06
    11da:	a7 81       	ldd	r26, Z+7	; 0x07
    11dc:	b0 85       	ldd	r27, Z+8	; 0x08
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	a1 1d       	adc	r26, r1
    11e2:	b1 1d       	adc	r27, r1
    11e4:	f9 01       	movw	r30, r18
    11e6:	85 83       	std	Z+5, r24	; 0x05
    11e8:	96 83       	std	Z+6, r25	; 0x06
    11ea:	a7 83       	std	Z+7, r26	; 0x07
    11ec:	b0 87       	std	Z+8, r27	; 0x08
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	8f 5f       	subi	r24, 0xFF	; 255
    11f2:	8a 83       	std	Y+2, r24	; 0x02
	while(gg) {
		INIT.period = incomeSpeed;
		INCOM.period = incomeSpeed;
		// Scheduler code
		unsigned char i;
		for ( i = 0; i < numTasks; i++ ) {
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	28 17       	cp	r18, r24
    1200:	39 07       	cpc	r19, r25
    1202:	08 f4       	brcc	.+2      	; 0x1206 <main+0x38a>
    1204:	56 cf       	rjmp	.-340    	; 0x10b2 <main+0x236>
    1206:	00 00       	nop
    1208:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		
		while(!TimerFlag);
    120c:	88 23       	and	r24, r24
    120e:	e1 f3       	breq	.-8      	; 0x1208 <main+0x38c>
    1210:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <__data_end>
		TimerFlag = 0;
    1214:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <gg>
		enemeys[i].cur = 36;
		enemeys[i].type = 2;
	}
	
	
	while(gg) {
    1218:	88 23       	and	r24, r24
    121a:	09 f0       	breq	.+2      	; 0x121e <main+0x3a2>
    121c:	2c cf       	rjmp	.-424    	; 0x1076 <main+0x1fa>
    121e:	41 d8       	rcall	.-3966   	; 0x2a2 <LCD_ClearScreen>
		
		while(!TimerFlag);
		TimerFlag = 0;
		
	}
	LCD_ClearScreen();
    1220:	6a e6       	ldi	r22, 0x6A	; 106
    1222:	71 e0       	ldi	r23, 0x01	; 1
	LCD_DisplayString(1, "Your score: ");
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	bb d8       	rcall	.-3722   	; 0x39e <LCD_DisplayString>
    1228:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <score>
    122c:	88 2f       	mov	r24, r24
	char fin[5];
	sprintf(fin, "%d", score);
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	29 2f       	mov	r18, r25
    1232:	2f 93       	push	r18
    1234:	8f 93       	push	r24
    1236:	87 e7       	ldi	r24, 0x77	; 119
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	89 2f       	mov	r24, r25
    123c:	8f 93       	push	r24
    123e:	87 e7       	ldi	r24, 0x77	; 119
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	8f 93       	push	r24
    1244:	ce 01       	movw	r24, r28
    1246:	09 96       	adiw	r24, 0x09	; 9
    1248:	29 2f       	mov	r18, r25
    124a:	2f 93       	push	r18
    124c:	8f 93       	push	r24
    124e:	d1 d0       	rcall	.+418    	; 0x13f2 <sprintf>
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
	LCD_DisplayString(12, fin);
    125c:	ce 01       	movw	r24, r28
    125e:	09 96       	adiw	r24, 0x09	; 9
    1260:	bc 01       	movw	r22, r24
    1262:	8c e0       	ldi	r24, 0x0C	; 12
    1264:	9c d8       	rcall	.-3784   	; 0x39e <LCD_DisplayString>
    1266:	6a e7       	ldi	r22, 0x7A	; 122
	LCD_DisplayString(17, "High score:");
    1268:	71 e0       	ldi	r23, 0x01	; 1
    126a:	81 e1       	ldi	r24, 0x11	; 17
    126c:	98 d8       	rcall	.-3792   	; 0x39e <LCD_DisplayString>
	if(score > EEPROM_Read(0)){
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	a6 d9       	rcall	.-3252   	; 0x5be <EEPROM_Read>
    1272:	98 2f       	mov	r25, r24
    1274:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <score>
    1278:	98 17       	cp	r25, r24
    127a:	48 f4       	brcc	.+18     	; 0x128e <main+0x412>
    127c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <score>
		highscore = score;
    1280:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <highscore>
    1284:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <highscore>
		EEPROM_Write(0, highscore);
    1288:	68 2f       	mov	r22, r24
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	85 d9       	rcall	.-3318   	; 0x598 <EEPROM_Write>
    128e:	80 e0       	ldi	r24, 0x00	; 0
	}
	char hi[5];
	sprintf(hi, "%d", EEPROM_Read(0));
    1290:	96 d9       	rcall	.-3284   	; 0x5be <EEPROM_Read>
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	29 2f       	mov	r18, r25
    1298:	2f 93       	push	r18
    129a:	8f 93       	push	r24
    129c:	87 e7       	ldi	r24, 0x77	; 119
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	89 2f       	mov	r24, r25
    12a2:	8f 93       	push	r24
    12a4:	87 e7       	ldi	r24, 0x77	; 119
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	8f 93       	push	r24
    12aa:	ce 01       	movw	r24, r28
    12ac:	0e 96       	adiw	r24, 0x0e	; 14
    12ae:	29 2f       	mov	r18, r25
    12b0:	2f 93       	push	r18
    12b2:	8f 93       	push	r24
    12b4:	9e d0       	rcall	.+316    	; 0x13f2 <sprintf>
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	ce 01       	movw	r24, r28
	LCD_DisplayString(28, hi);
    12c4:	0e 96       	adiw	r24, 0x0e	; 14
    12c6:	bc 01       	movw	r22, r24
    12c8:	8c e1       	ldi	r24, 0x1C	; 28
    12ca:	69 d8       	rcall	.-3886   	; 0x39e <LCD_DisplayString>
    12cc:	00 00       	nop
    12ce:	86 d9       	rcall	.-3316   	; 0x5dc <SNESINPUT>
	//LCD_Cursor(28);
	//LCD_WriteData(highscore + '0');
	//LCD_Cursor(16);
	//LCD_WriteData(EEPROM_Read(0)+'0');
	while(SNESINPUT() == 0){}
    12d0:	88 23       	and	r24, r24
    12d2:	e9 f3       	breq	.-6      	; 0x12ce <main+0x452>
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <gg>
		gg =1;
    12da:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <score>
    12de:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <init>
		score = 0;
    12e2:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <Encnt>
		init = 0;
    12e6:	36 ce       	rjmp	.-916    	; 0xf54 <main+0xd8>

000012e8 <__divmodhi4>:
		Encnt =0;
    12e8:	97 fb       	bst	r25, 7
    12ea:	07 2e       	mov	r0, r23
	}
    12ec:	16 f4       	brtc	.+4      	; 0x12f2 <__divmodhi4+0xa>
    12ee:	00 94       	com	r0
    12f0:	06 d0       	rcall	.+12     	; 0x12fe <__divmodhi4_neg1>
    12f2:	77 fd       	sbrc	r23, 7
    12f4:	08 d0       	rcall	.+16     	; 0x1306 <__divmodhi4_neg2>
    12f6:	14 d0       	rcall	.+40     	; 0x1320 <__udivmodhi4>
    12f8:	07 fc       	sbrc	r0, 7
    12fa:	05 d0       	rcall	.+10     	; 0x1306 <__divmodhi4_neg2>
    12fc:	3e f4       	brtc	.+14     	; 0x130c <__divmodhi4_exit>

000012fe <__divmodhi4_neg1>:
    12fe:	90 95       	com	r25
    1300:	81 95       	neg	r24
    1302:	9f 4f       	sbci	r25, 0xFF	; 255
    1304:	08 95       	ret

00001306 <__divmodhi4_neg2>:
    1306:	70 95       	com	r23
    1308:	61 95       	neg	r22
    130a:	7f 4f       	sbci	r23, 0xFF	; 255

0000130c <__divmodhi4_exit>:
    130c:	08 95       	ret

0000130e <__tablejump2__>:
    130e:	ee 0f       	add	r30, r30
    1310:	ff 1f       	adc	r31, r31
    1312:	00 24       	eor	r0, r0
    1314:	00 1c       	adc	r0, r0
    1316:	0b be       	out	0x3b, r0	; 59
    1318:	07 90       	elpm	r0, Z+
    131a:	f6 91       	elpm	r31, Z
    131c:	e0 2d       	mov	r30, r0
    131e:	09 94       	ijmp

00001320 <__udivmodhi4>:
    1320:	aa 1b       	sub	r26, r26
    1322:	bb 1b       	sub	r27, r27
    1324:	51 e1       	ldi	r21, 0x11	; 17
    1326:	07 c0       	rjmp	.+14     	; 0x1336 <__udivmodhi4_ep>

00001328 <__udivmodhi4_loop>:
    1328:	aa 1f       	adc	r26, r26
    132a:	bb 1f       	adc	r27, r27
    132c:	a6 17       	cp	r26, r22
    132e:	b7 07       	cpc	r27, r23
    1330:	10 f0       	brcs	.+4      	; 0x1336 <__udivmodhi4_ep>
    1332:	a6 1b       	sub	r26, r22
    1334:	b7 0b       	sbc	r27, r23

00001336 <__udivmodhi4_ep>:
    1336:	88 1f       	adc	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	5a 95       	dec	r21
    133c:	a9 f7       	brne	.-22     	; 0x1328 <__udivmodhi4_loop>
    133e:	80 95       	com	r24
    1340:	90 95       	com	r25
    1342:	bc 01       	movw	r22, r24
    1344:	cd 01       	movw	r24, r26
    1346:	08 95       	ret

00001348 <do_rand>:
    1348:	8f 92       	push	r8
    134a:	9f 92       	push	r9
    134c:	af 92       	push	r10
    134e:	bf 92       	push	r11
    1350:	cf 92       	push	r12
    1352:	df 92       	push	r13
    1354:	ef 92       	push	r14
    1356:	ff 92       	push	r15
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	ec 01       	movw	r28, r24
    135e:	68 81       	ld	r22, Y
    1360:	79 81       	ldd	r23, Y+1	; 0x01
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	9b 81       	ldd	r25, Y+3	; 0x03
    1366:	61 15       	cp	r22, r1
    1368:	71 05       	cpc	r23, r1
    136a:	81 05       	cpc	r24, r1
    136c:	91 05       	cpc	r25, r1
    136e:	21 f4       	brne	.+8      	; 0x1378 <do_rand+0x30>
    1370:	64 e2       	ldi	r22, 0x24	; 36
    1372:	79 ed       	ldi	r23, 0xD9	; 217
    1374:	8b e5       	ldi	r24, 0x5B	; 91
    1376:	97 e0       	ldi	r25, 0x07	; 7
    1378:	2d e1       	ldi	r18, 0x1D	; 29
    137a:	33 ef       	ldi	r19, 0xF3	; 243
    137c:	41 e0       	ldi	r20, 0x01	; 1
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	29 d3       	rcall	.+1618   	; 0x19d4 <__divmodsi4>
    1382:	49 01       	movw	r8, r18
    1384:	5a 01       	movw	r10, r20
    1386:	9b 01       	movw	r18, r22
    1388:	ac 01       	movw	r20, r24
    138a:	a7 ea       	ldi	r26, 0xA7	; 167
    138c:	b1 e4       	ldi	r27, 0x41	; 65
    138e:	3e d3       	rcall	.+1660   	; 0x1a0c <__muluhisi3>
    1390:	6b 01       	movw	r12, r22
    1392:	7c 01       	movw	r14, r24
    1394:	ac ee       	ldi	r26, 0xEC	; 236
    1396:	b4 ef       	ldi	r27, 0xF4	; 244
    1398:	a5 01       	movw	r20, r10
    139a:	94 01       	movw	r18, r8
    139c:	43 d3       	rcall	.+1670   	; 0x1a24 <__mulohisi3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	8c 0d       	add	r24, r12
    13a4:	9d 1d       	adc	r25, r13
    13a6:	ae 1d       	adc	r26, r14
    13a8:	bf 1d       	adc	r27, r15
    13aa:	b7 ff       	sbrs	r27, 7
    13ac:	03 c0       	rjmp	.+6      	; 0x13b4 <do_rand+0x6c>
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	a1 09       	sbc	r26, r1
    13b2:	b0 48       	sbci	r27, 0x80	; 128
    13b4:	88 83       	st	Y, r24
    13b6:	99 83       	std	Y+1, r25	; 0x01
    13b8:	aa 83       	std	Y+2, r26	; 0x02
    13ba:	bb 83       	std	Y+3, r27	; 0x03
    13bc:	9f 77       	andi	r25, 0x7F	; 127
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	9f 90       	pop	r9
    13d0:	8f 90       	pop	r8
    13d2:	08 95       	ret

000013d4 <rand_r>:
    13d4:	b9 cf       	rjmp	.-142    	; 0x1348 <do_rand>

000013d6 <rand>:
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	b6 cf       	rjmp	.-148    	; 0x1348 <do_rand>

000013dc <srand>:
    13dc:	a0 e0       	ldi	r26, 0x00	; 0
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    13e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    13e8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    13ec:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    13f0:	08 95       	ret

000013f2 <sprintf>:
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	2e 97       	sbiw	r28, 0x0e	; 14
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	0d 89       	ldd	r16, Y+21	; 0x15
    140c:	1e 89       	ldd	r17, Y+22	; 0x16
    140e:	86 e0       	ldi	r24, 0x06	; 6
    1410:	8c 83       	std	Y+4, r24	; 0x04
    1412:	1a 83       	std	Y+2, r17	; 0x02
    1414:	09 83       	std	Y+1, r16	; 0x01
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	9f e7       	ldi	r25, 0x7F	; 127
    141a:	9e 83       	std	Y+6, r25	; 0x06
    141c:	8d 83       	std	Y+5, r24	; 0x05
    141e:	ae 01       	movw	r20, r28
    1420:	47 5e       	subi	r20, 0xE7	; 231
    1422:	5f 4f       	sbci	r21, 0xFF	; 255
    1424:	6f 89       	ldd	r22, Y+23	; 0x17
    1426:	78 8d       	ldd	r23, Y+24	; 0x18
    1428:	ce 01       	movw	r24, r28
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	10 d0       	rcall	.+32     	; 0x144e <vfprintf>
    142e:	ef 81       	ldd	r30, Y+7	; 0x07
    1430:	f8 85       	ldd	r31, Y+8	; 0x08
    1432:	e0 0f       	add	r30, r16
    1434:	f1 1f       	adc	r31, r17
    1436:	10 82       	st	Z, r1
    1438:	2e 96       	adiw	r28, 0x0e	; 14
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	08 95       	ret

0000144e <vfprintf>:
    144e:	2f 92       	push	r2
    1450:	3f 92       	push	r3
    1452:	4f 92       	push	r4
    1454:	5f 92       	push	r5
    1456:	6f 92       	push	r6
    1458:	7f 92       	push	r7
    145a:	8f 92       	push	r8
    145c:	9f 92       	push	r9
    145e:	af 92       	push	r10
    1460:	bf 92       	push	r11
    1462:	cf 92       	push	r12
    1464:	df 92       	push	r13
    1466:	ef 92       	push	r14
    1468:	ff 92       	push	r15
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	2b 97       	sbiw	r28, 0x0b	; 11
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	6c 01       	movw	r12, r24
    1484:	7b 01       	movw	r14, r22
    1486:	8a 01       	movw	r16, r20
    1488:	fc 01       	movw	r30, r24
    148a:	17 82       	std	Z+7, r1	; 0x07
    148c:	16 82       	std	Z+6, r1	; 0x06
    148e:	83 81       	ldd	r24, Z+3	; 0x03
    1490:	81 ff       	sbrs	r24, 1
    1492:	bf c1       	rjmp	.+894    	; 0x1812 <vfprintf+0x3c4>
    1494:	ce 01       	movw	r24, r28
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	3c 01       	movw	r6, r24
    149a:	f6 01       	movw	r30, r12
    149c:	93 81       	ldd	r25, Z+3	; 0x03
    149e:	f7 01       	movw	r30, r14
    14a0:	93 fd       	sbrc	r25, 3
    14a2:	85 91       	lpm	r24, Z+
    14a4:	93 ff       	sbrs	r25, 3
    14a6:	81 91       	ld	r24, Z+
    14a8:	7f 01       	movw	r14, r30
    14aa:	88 23       	and	r24, r24
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <vfprintf+0x62>
    14ae:	ad c1       	rjmp	.+858    	; 0x180a <vfprintf+0x3bc>
    14b0:	85 32       	cpi	r24, 0x25	; 37
    14b2:	39 f4       	brne	.+14     	; 0x14c2 <vfprintf+0x74>
    14b4:	93 fd       	sbrc	r25, 3
    14b6:	85 91       	lpm	r24, Z+
    14b8:	93 ff       	sbrs	r25, 3
    14ba:	81 91       	ld	r24, Z+
    14bc:	7f 01       	movw	r14, r30
    14be:	85 32       	cpi	r24, 0x25	; 37
    14c0:	21 f4       	brne	.+8      	; 0x14ca <vfprintf+0x7c>
    14c2:	b6 01       	movw	r22, r12
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	d6 d1       	rcall	.+940    	; 0x1874 <fputc>
    14c8:	e8 cf       	rjmp	.-48     	; 0x149a <vfprintf+0x4c>
    14ca:	91 2c       	mov	r9, r1
    14cc:	21 2c       	mov	r2, r1
    14ce:	31 2c       	mov	r3, r1
    14d0:	ff e1       	ldi	r31, 0x1F	; 31
    14d2:	f3 15       	cp	r31, r3
    14d4:	d8 f0       	brcs	.+54     	; 0x150c <vfprintf+0xbe>
    14d6:	8b 32       	cpi	r24, 0x2B	; 43
    14d8:	79 f0       	breq	.+30     	; 0x14f8 <vfprintf+0xaa>
    14da:	38 f4       	brcc	.+14     	; 0x14ea <vfprintf+0x9c>
    14dc:	80 32       	cpi	r24, 0x20	; 32
    14de:	79 f0       	breq	.+30     	; 0x14fe <vfprintf+0xb0>
    14e0:	83 32       	cpi	r24, 0x23	; 35
    14e2:	a1 f4       	brne	.+40     	; 0x150c <vfprintf+0xbe>
    14e4:	23 2d       	mov	r18, r3
    14e6:	20 61       	ori	r18, 0x10	; 16
    14e8:	1d c0       	rjmp	.+58     	; 0x1524 <vfprintf+0xd6>
    14ea:	8d 32       	cpi	r24, 0x2D	; 45
    14ec:	61 f0       	breq	.+24     	; 0x1506 <vfprintf+0xb8>
    14ee:	80 33       	cpi	r24, 0x30	; 48
    14f0:	69 f4       	brne	.+26     	; 0x150c <vfprintf+0xbe>
    14f2:	23 2d       	mov	r18, r3
    14f4:	21 60       	ori	r18, 0x01	; 1
    14f6:	16 c0       	rjmp	.+44     	; 0x1524 <vfprintf+0xd6>
    14f8:	83 2d       	mov	r24, r3
    14fa:	82 60       	ori	r24, 0x02	; 2
    14fc:	38 2e       	mov	r3, r24
    14fe:	e3 2d       	mov	r30, r3
    1500:	e4 60       	ori	r30, 0x04	; 4
    1502:	3e 2e       	mov	r3, r30
    1504:	2a c0       	rjmp	.+84     	; 0x155a <vfprintf+0x10c>
    1506:	f3 2d       	mov	r31, r3
    1508:	f8 60       	ori	r31, 0x08	; 8
    150a:	1d c0       	rjmp	.+58     	; 0x1546 <vfprintf+0xf8>
    150c:	37 fc       	sbrc	r3, 7
    150e:	2d c0       	rjmp	.+90     	; 0x156a <vfprintf+0x11c>
    1510:	20 ed       	ldi	r18, 0xD0	; 208
    1512:	28 0f       	add	r18, r24
    1514:	2a 30       	cpi	r18, 0x0A	; 10
    1516:	40 f0       	brcs	.+16     	; 0x1528 <vfprintf+0xda>
    1518:	8e 32       	cpi	r24, 0x2E	; 46
    151a:	b9 f4       	brne	.+46     	; 0x154a <vfprintf+0xfc>
    151c:	36 fc       	sbrc	r3, 6
    151e:	75 c1       	rjmp	.+746    	; 0x180a <vfprintf+0x3bc>
    1520:	23 2d       	mov	r18, r3
    1522:	20 64       	ori	r18, 0x40	; 64
    1524:	32 2e       	mov	r3, r18
    1526:	19 c0       	rjmp	.+50     	; 0x155a <vfprintf+0x10c>
    1528:	36 fe       	sbrs	r3, 6
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <vfprintf+0xea>
    152c:	8a e0       	ldi	r24, 0x0A	; 10
    152e:	98 9e       	mul	r9, r24
    1530:	20 0d       	add	r18, r0
    1532:	11 24       	eor	r1, r1
    1534:	92 2e       	mov	r9, r18
    1536:	11 c0       	rjmp	.+34     	; 0x155a <vfprintf+0x10c>
    1538:	ea e0       	ldi	r30, 0x0A	; 10
    153a:	2e 9e       	mul	r2, r30
    153c:	20 0d       	add	r18, r0
    153e:	11 24       	eor	r1, r1
    1540:	22 2e       	mov	r2, r18
    1542:	f3 2d       	mov	r31, r3
    1544:	f0 62       	ori	r31, 0x20	; 32
    1546:	3f 2e       	mov	r3, r31
    1548:	08 c0       	rjmp	.+16     	; 0x155a <vfprintf+0x10c>
    154a:	8c 36       	cpi	r24, 0x6C	; 108
    154c:	21 f4       	brne	.+8      	; 0x1556 <vfprintf+0x108>
    154e:	83 2d       	mov	r24, r3
    1550:	80 68       	ori	r24, 0x80	; 128
    1552:	38 2e       	mov	r3, r24
    1554:	02 c0       	rjmp	.+4      	; 0x155a <vfprintf+0x10c>
    1556:	88 36       	cpi	r24, 0x68	; 104
    1558:	41 f4       	brne	.+16     	; 0x156a <vfprintf+0x11c>
    155a:	f7 01       	movw	r30, r14
    155c:	93 fd       	sbrc	r25, 3
    155e:	85 91       	lpm	r24, Z+
    1560:	93 ff       	sbrs	r25, 3
    1562:	81 91       	ld	r24, Z+
    1564:	7f 01       	movw	r14, r30
    1566:	81 11       	cpse	r24, r1
    1568:	b3 cf       	rjmp	.-154    	; 0x14d0 <vfprintf+0x82>
    156a:	98 2f       	mov	r25, r24
    156c:	9f 7d       	andi	r25, 0xDF	; 223
    156e:	95 54       	subi	r25, 0x45	; 69
    1570:	93 30       	cpi	r25, 0x03	; 3
    1572:	28 f4       	brcc	.+10     	; 0x157e <vfprintf+0x130>
    1574:	0c 5f       	subi	r16, 0xFC	; 252
    1576:	1f 4f       	sbci	r17, 0xFF	; 255
    1578:	9f e3       	ldi	r25, 0x3F	; 63
    157a:	99 83       	std	Y+1, r25	; 0x01
    157c:	0d c0       	rjmp	.+26     	; 0x1598 <vfprintf+0x14a>
    157e:	83 36       	cpi	r24, 0x63	; 99
    1580:	31 f0       	breq	.+12     	; 0x158e <vfprintf+0x140>
    1582:	83 37       	cpi	r24, 0x73	; 115
    1584:	71 f0       	breq	.+28     	; 0x15a2 <vfprintf+0x154>
    1586:	83 35       	cpi	r24, 0x53	; 83
    1588:	09 f0       	breq	.+2      	; 0x158c <vfprintf+0x13e>
    158a:	55 c0       	rjmp	.+170    	; 0x1636 <vfprintf+0x1e8>
    158c:	20 c0       	rjmp	.+64     	; 0x15ce <vfprintf+0x180>
    158e:	f8 01       	movw	r30, r16
    1590:	80 81       	ld	r24, Z
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	0e 5f       	subi	r16, 0xFE	; 254
    1596:	1f 4f       	sbci	r17, 0xFF	; 255
    1598:	88 24       	eor	r8, r8
    159a:	83 94       	inc	r8
    159c:	91 2c       	mov	r9, r1
    159e:	53 01       	movw	r10, r6
    15a0:	12 c0       	rjmp	.+36     	; 0x15c6 <vfprintf+0x178>
    15a2:	28 01       	movw	r4, r16
    15a4:	f2 e0       	ldi	r31, 0x02	; 2
    15a6:	4f 0e       	add	r4, r31
    15a8:	51 1c       	adc	r5, r1
    15aa:	f8 01       	movw	r30, r16
    15ac:	a0 80       	ld	r10, Z
    15ae:	b1 80       	ldd	r11, Z+1	; 0x01
    15b0:	36 fe       	sbrs	r3, 6
    15b2:	03 c0       	rjmp	.+6      	; 0x15ba <vfprintf+0x16c>
    15b4:	69 2d       	mov	r22, r9
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <vfprintf+0x170>
    15ba:	6f ef       	ldi	r22, 0xFF	; 255
    15bc:	7f ef       	ldi	r23, 0xFF	; 255
    15be:	c5 01       	movw	r24, r10
    15c0:	4e d1       	rcall	.+668    	; 0x185e <strnlen>
    15c2:	4c 01       	movw	r8, r24
    15c4:	82 01       	movw	r16, r4
    15c6:	f3 2d       	mov	r31, r3
    15c8:	ff 77       	andi	r31, 0x7F	; 127
    15ca:	3f 2e       	mov	r3, r31
    15cc:	15 c0       	rjmp	.+42     	; 0x15f8 <vfprintf+0x1aa>
    15ce:	28 01       	movw	r4, r16
    15d0:	22 e0       	ldi	r18, 0x02	; 2
    15d2:	42 0e       	add	r4, r18
    15d4:	51 1c       	adc	r5, r1
    15d6:	f8 01       	movw	r30, r16
    15d8:	a0 80       	ld	r10, Z
    15da:	b1 80       	ldd	r11, Z+1	; 0x01
    15dc:	36 fe       	sbrs	r3, 6
    15de:	03 c0       	rjmp	.+6      	; 0x15e6 <vfprintf+0x198>
    15e0:	69 2d       	mov	r22, r9
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <vfprintf+0x19c>
    15e6:	6f ef       	ldi	r22, 0xFF	; 255
    15e8:	7f ef       	ldi	r23, 0xFF	; 255
    15ea:	c5 01       	movw	r24, r10
    15ec:	2d d1       	rcall	.+602    	; 0x1848 <strnlen_P>
    15ee:	4c 01       	movw	r8, r24
    15f0:	f3 2d       	mov	r31, r3
    15f2:	f0 68       	ori	r31, 0x80	; 128
    15f4:	3f 2e       	mov	r3, r31
    15f6:	82 01       	movw	r16, r4
    15f8:	33 fc       	sbrc	r3, 3
    15fa:	19 c0       	rjmp	.+50     	; 0x162e <vfprintf+0x1e0>
    15fc:	82 2d       	mov	r24, r2
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	88 16       	cp	r8, r24
    1602:	99 06       	cpc	r9, r25
    1604:	a0 f4       	brcc	.+40     	; 0x162e <vfprintf+0x1e0>
    1606:	b6 01       	movw	r22, r12
    1608:	80 e2       	ldi	r24, 0x20	; 32
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	33 d1       	rcall	.+614    	; 0x1874 <fputc>
    160e:	2a 94       	dec	r2
    1610:	f5 cf       	rjmp	.-22     	; 0x15fc <vfprintf+0x1ae>
    1612:	f5 01       	movw	r30, r10
    1614:	37 fc       	sbrc	r3, 7
    1616:	85 91       	lpm	r24, Z+
    1618:	37 fe       	sbrs	r3, 7
    161a:	81 91       	ld	r24, Z+
    161c:	5f 01       	movw	r10, r30
    161e:	b6 01       	movw	r22, r12
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	28 d1       	rcall	.+592    	; 0x1874 <fputc>
    1624:	21 10       	cpse	r2, r1
    1626:	2a 94       	dec	r2
    1628:	21 e0       	ldi	r18, 0x01	; 1
    162a:	82 1a       	sub	r8, r18
    162c:	91 08       	sbc	r9, r1
    162e:	81 14       	cp	r8, r1
    1630:	91 04       	cpc	r9, r1
    1632:	79 f7       	brne	.-34     	; 0x1612 <vfprintf+0x1c4>
    1634:	e1 c0       	rjmp	.+450    	; 0x17f8 <vfprintf+0x3aa>
    1636:	84 36       	cpi	r24, 0x64	; 100
    1638:	11 f0       	breq	.+4      	; 0x163e <vfprintf+0x1f0>
    163a:	89 36       	cpi	r24, 0x69	; 105
    163c:	39 f5       	brne	.+78     	; 0x168c <vfprintf+0x23e>
    163e:	f8 01       	movw	r30, r16
    1640:	37 fe       	sbrs	r3, 7
    1642:	07 c0       	rjmp	.+14     	; 0x1652 <vfprintf+0x204>
    1644:	60 81       	ld	r22, Z
    1646:	71 81       	ldd	r23, Z+1	; 0x01
    1648:	82 81       	ldd	r24, Z+2	; 0x02
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	0c 5f       	subi	r16, 0xFC	; 252
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	08 c0       	rjmp	.+16     	; 0x1662 <vfprintf+0x214>
    1652:	60 81       	ld	r22, Z
    1654:	71 81       	ldd	r23, Z+1	; 0x01
    1656:	07 2e       	mov	r0, r23
    1658:	00 0c       	add	r0, r0
    165a:	88 0b       	sbc	r24, r24
    165c:	99 0b       	sbc	r25, r25
    165e:	0e 5f       	subi	r16, 0xFE	; 254
    1660:	1f 4f       	sbci	r17, 0xFF	; 255
    1662:	f3 2d       	mov	r31, r3
    1664:	ff 76       	andi	r31, 0x6F	; 111
    1666:	3f 2e       	mov	r3, r31
    1668:	97 ff       	sbrs	r25, 7
    166a:	09 c0       	rjmp	.+18     	; 0x167e <vfprintf+0x230>
    166c:	90 95       	com	r25
    166e:	80 95       	com	r24
    1670:	70 95       	com	r23
    1672:	61 95       	neg	r22
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	8f 4f       	sbci	r24, 0xFF	; 255
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	f0 68       	ori	r31, 0x80	; 128
    167c:	3f 2e       	mov	r3, r31
    167e:	2a e0       	ldi	r18, 0x0A	; 10
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	a3 01       	movw	r20, r6
    1684:	33 d1       	rcall	.+614    	; 0x18ec <__ultoa_invert>
    1686:	88 2e       	mov	r8, r24
    1688:	86 18       	sub	r8, r6
    168a:	44 c0       	rjmp	.+136    	; 0x1714 <vfprintf+0x2c6>
    168c:	85 37       	cpi	r24, 0x75	; 117
    168e:	31 f4       	brne	.+12     	; 0x169c <vfprintf+0x24e>
    1690:	23 2d       	mov	r18, r3
    1692:	2f 7e       	andi	r18, 0xEF	; 239
    1694:	b2 2e       	mov	r11, r18
    1696:	2a e0       	ldi	r18, 0x0A	; 10
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	25 c0       	rjmp	.+74     	; 0x16e6 <vfprintf+0x298>
    169c:	93 2d       	mov	r25, r3
    169e:	99 7f       	andi	r25, 0xF9	; 249
    16a0:	b9 2e       	mov	r11, r25
    16a2:	8f 36       	cpi	r24, 0x6F	; 111
    16a4:	c1 f0       	breq	.+48     	; 0x16d6 <vfprintf+0x288>
    16a6:	18 f4       	brcc	.+6      	; 0x16ae <vfprintf+0x260>
    16a8:	88 35       	cpi	r24, 0x58	; 88
    16aa:	79 f0       	breq	.+30     	; 0x16ca <vfprintf+0x27c>
    16ac:	ae c0       	rjmp	.+348    	; 0x180a <vfprintf+0x3bc>
    16ae:	80 37       	cpi	r24, 0x70	; 112
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <vfprintf+0x26a>
    16b2:	88 37       	cpi	r24, 0x78	; 120
    16b4:	21 f0       	breq	.+8      	; 0x16be <vfprintf+0x270>
    16b6:	a9 c0       	rjmp	.+338    	; 0x180a <vfprintf+0x3bc>
    16b8:	e9 2f       	mov	r30, r25
    16ba:	e0 61       	ori	r30, 0x10	; 16
    16bc:	be 2e       	mov	r11, r30
    16be:	b4 fe       	sbrs	r11, 4
    16c0:	0d c0       	rjmp	.+26     	; 0x16dc <vfprintf+0x28e>
    16c2:	fb 2d       	mov	r31, r11
    16c4:	f4 60       	ori	r31, 0x04	; 4
    16c6:	bf 2e       	mov	r11, r31
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <vfprintf+0x28e>
    16ca:	34 fe       	sbrs	r3, 4
    16cc:	0a c0       	rjmp	.+20     	; 0x16e2 <vfprintf+0x294>
    16ce:	29 2f       	mov	r18, r25
    16d0:	26 60       	ori	r18, 0x06	; 6
    16d2:	b2 2e       	mov	r11, r18
    16d4:	06 c0       	rjmp	.+12     	; 0x16e2 <vfprintf+0x294>
    16d6:	28 e0       	ldi	r18, 0x08	; 8
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	05 c0       	rjmp	.+10     	; 0x16e6 <vfprintf+0x298>
    16dc:	20 e1       	ldi	r18, 0x10	; 16
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <vfprintf+0x298>
    16e2:	20 e1       	ldi	r18, 0x10	; 16
    16e4:	32 e0       	ldi	r19, 0x02	; 2
    16e6:	f8 01       	movw	r30, r16
    16e8:	b7 fe       	sbrs	r11, 7
    16ea:	07 c0       	rjmp	.+14     	; 0x16fa <vfprintf+0x2ac>
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	82 81       	ldd	r24, Z+2	; 0x02
    16f2:	93 81       	ldd	r25, Z+3	; 0x03
    16f4:	0c 5f       	subi	r16, 0xFC	; 252
    16f6:	1f 4f       	sbci	r17, 0xFF	; 255
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <vfprintf+0x2b8>
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 5f       	subi	r16, 0xFE	; 254
    1704:	1f 4f       	sbci	r17, 0xFF	; 255
    1706:	a3 01       	movw	r20, r6
    1708:	f1 d0       	rcall	.+482    	; 0x18ec <__ultoa_invert>
    170a:	88 2e       	mov	r8, r24
    170c:	86 18       	sub	r8, r6
    170e:	fb 2d       	mov	r31, r11
    1710:	ff 77       	andi	r31, 0x7F	; 127
    1712:	3f 2e       	mov	r3, r31
    1714:	36 fe       	sbrs	r3, 6
    1716:	0d c0       	rjmp	.+26     	; 0x1732 <vfprintf+0x2e4>
    1718:	23 2d       	mov	r18, r3
    171a:	2e 7f       	andi	r18, 0xFE	; 254
    171c:	a2 2e       	mov	r10, r18
    171e:	89 14       	cp	r8, r9
    1720:	58 f4       	brcc	.+22     	; 0x1738 <vfprintf+0x2ea>
    1722:	34 fe       	sbrs	r3, 4
    1724:	0b c0       	rjmp	.+22     	; 0x173c <vfprintf+0x2ee>
    1726:	32 fc       	sbrc	r3, 2
    1728:	09 c0       	rjmp	.+18     	; 0x173c <vfprintf+0x2ee>
    172a:	83 2d       	mov	r24, r3
    172c:	8e 7e       	andi	r24, 0xEE	; 238
    172e:	a8 2e       	mov	r10, r24
    1730:	05 c0       	rjmp	.+10     	; 0x173c <vfprintf+0x2ee>
    1732:	b8 2c       	mov	r11, r8
    1734:	a3 2c       	mov	r10, r3
    1736:	03 c0       	rjmp	.+6      	; 0x173e <vfprintf+0x2f0>
    1738:	b8 2c       	mov	r11, r8
    173a:	01 c0       	rjmp	.+2      	; 0x173e <vfprintf+0x2f0>
    173c:	b9 2c       	mov	r11, r9
    173e:	a4 fe       	sbrs	r10, 4
    1740:	0f c0       	rjmp	.+30     	; 0x1760 <vfprintf+0x312>
    1742:	fe 01       	movw	r30, r28
    1744:	e8 0d       	add	r30, r8
    1746:	f1 1d       	adc	r31, r1
    1748:	80 81       	ld	r24, Z
    174a:	80 33       	cpi	r24, 0x30	; 48
    174c:	21 f4       	brne	.+8      	; 0x1756 <vfprintf+0x308>
    174e:	9a 2d       	mov	r25, r10
    1750:	99 7e       	andi	r25, 0xE9	; 233
    1752:	a9 2e       	mov	r10, r25
    1754:	09 c0       	rjmp	.+18     	; 0x1768 <vfprintf+0x31a>
    1756:	a2 fe       	sbrs	r10, 2
    1758:	06 c0       	rjmp	.+12     	; 0x1766 <vfprintf+0x318>
    175a:	b3 94       	inc	r11
    175c:	b3 94       	inc	r11
    175e:	04 c0       	rjmp	.+8      	; 0x1768 <vfprintf+0x31a>
    1760:	8a 2d       	mov	r24, r10
    1762:	86 78       	andi	r24, 0x86	; 134
    1764:	09 f0       	breq	.+2      	; 0x1768 <vfprintf+0x31a>
    1766:	b3 94       	inc	r11
    1768:	a3 fc       	sbrc	r10, 3
    176a:	10 c0       	rjmp	.+32     	; 0x178c <vfprintf+0x33e>
    176c:	a0 fe       	sbrs	r10, 0
    176e:	06 c0       	rjmp	.+12     	; 0x177c <vfprintf+0x32e>
    1770:	b2 14       	cp	r11, r2
    1772:	80 f4       	brcc	.+32     	; 0x1794 <vfprintf+0x346>
    1774:	28 0c       	add	r2, r8
    1776:	92 2c       	mov	r9, r2
    1778:	9b 18       	sub	r9, r11
    177a:	0d c0       	rjmp	.+26     	; 0x1796 <vfprintf+0x348>
    177c:	b2 14       	cp	r11, r2
    177e:	58 f4       	brcc	.+22     	; 0x1796 <vfprintf+0x348>
    1780:	b6 01       	movw	r22, r12
    1782:	80 e2       	ldi	r24, 0x20	; 32
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	76 d0       	rcall	.+236    	; 0x1874 <fputc>
    1788:	b3 94       	inc	r11
    178a:	f8 cf       	rjmp	.-16     	; 0x177c <vfprintf+0x32e>
    178c:	b2 14       	cp	r11, r2
    178e:	18 f4       	brcc	.+6      	; 0x1796 <vfprintf+0x348>
    1790:	2b 18       	sub	r2, r11
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <vfprintf+0x34a>
    1794:	98 2c       	mov	r9, r8
    1796:	21 2c       	mov	r2, r1
    1798:	a4 fe       	sbrs	r10, 4
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <vfprintf+0x36c>
    179c:	b6 01       	movw	r22, r12
    179e:	80 e3       	ldi	r24, 0x30	; 48
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	68 d0       	rcall	.+208    	; 0x1874 <fputc>
    17a4:	a2 fe       	sbrs	r10, 2
    17a6:	16 c0       	rjmp	.+44     	; 0x17d4 <vfprintf+0x386>
    17a8:	a1 fc       	sbrc	r10, 1
    17aa:	03 c0       	rjmp	.+6      	; 0x17b2 <vfprintf+0x364>
    17ac:	88 e7       	ldi	r24, 0x78	; 120
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <vfprintf+0x368>
    17b2:	88 e5       	ldi	r24, 0x58	; 88
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	b6 01       	movw	r22, r12
    17b8:	0c c0       	rjmp	.+24     	; 0x17d2 <vfprintf+0x384>
    17ba:	8a 2d       	mov	r24, r10
    17bc:	86 78       	andi	r24, 0x86	; 134
    17be:	51 f0       	breq	.+20     	; 0x17d4 <vfprintf+0x386>
    17c0:	a1 fe       	sbrs	r10, 1
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <vfprintf+0x37a>
    17c4:	8b e2       	ldi	r24, 0x2B	; 43
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <vfprintf+0x37c>
    17c8:	80 e2       	ldi	r24, 0x20	; 32
    17ca:	a7 fc       	sbrc	r10, 7
    17cc:	8d e2       	ldi	r24, 0x2D	; 45
    17ce:	b6 01       	movw	r22, r12
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	50 d0       	rcall	.+160    	; 0x1874 <fputc>
    17d4:	89 14       	cp	r8, r9
    17d6:	30 f4       	brcc	.+12     	; 0x17e4 <vfprintf+0x396>
    17d8:	b6 01       	movw	r22, r12
    17da:	80 e3       	ldi	r24, 0x30	; 48
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	4a d0       	rcall	.+148    	; 0x1874 <fputc>
    17e0:	9a 94       	dec	r9
    17e2:	f8 cf       	rjmp	.-16     	; 0x17d4 <vfprintf+0x386>
    17e4:	8a 94       	dec	r8
    17e6:	f3 01       	movw	r30, r6
    17e8:	e8 0d       	add	r30, r8
    17ea:	f1 1d       	adc	r31, r1
    17ec:	80 81       	ld	r24, Z
    17ee:	b6 01       	movw	r22, r12
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	40 d0       	rcall	.+128    	; 0x1874 <fputc>
    17f4:	81 10       	cpse	r8, r1
    17f6:	f6 cf       	rjmp	.-20     	; 0x17e4 <vfprintf+0x396>
    17f8:	22 20       	and	r2, r2
    17fa:	09 f4       	brne	.+2      	; 0x17fe <vfprintf+0x3b0>
    17fc:	4e ce       	rjmp	.-868    	; 0x149a <vfprintf+0x4c>
    17fe:	b6 01       	movw	r22, r12
    1800:	80 e2       	ldi	r24, 0x20	; 32
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	37 d0       	rcall	.+110    	; 0x1874 <fputc>
    1806:	2a 94       	dec	r2
    1808:	f7 cf       	rjmp	.-18     	; 0x17f8 <vfprintf+0x3aa>
    180a:	f6 01       	movw	r30, r12
    180c:	86 81       	ldd	r24, Z+6	; 0x06
    180e:	97 81       	ldd	r25, Z+7	; 0x07
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <vfprintf+0x3c8>
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	9f ef       	ldi	r25, 0xFF	; 255
    1816:	2b 96       	adiw	r28, 0x0b	; 11
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	df 90       	pop	r13
    1830:	cf 90       	pop	r12
    1832:	bf 90       	pop	r11
    1834:	af 90       	pop	r10
    1836:	9f 90       	pop	r9
    1838:	8f 90       	pop	r8
    183a:	7f 90       	pop	r7
    183c:	6f 90       	pop	r6
    183e:	5f 90       	pop	r5
    1840:	4f 90       	pop	r4
    1842:	3f 90       	pop	r3
    1844:	2f 90       	pop	r2
    1846:	08 95       	ret

00001848 <strnlen_P>:
    1848:	fc 01       	movw	r30, r24
    184a:	05 90       	lpm	r0, Z+
    184c:	61 50       	subi	r22, 0x01	; 1
    184e:	70 40       	sbci	r23, 0x00	; 0
    1850:	01 10       	cpse	r0, r1
    1852:	d8 f7       	brcc	.-10     	; 0x184a <strnlen_P+0x2>
    1854:	80 95       	com	r24
    1856:	90 95       	com	r25
    1858:	8e 0f       	add	r24, r30
    185a:	9f 1f       	adc	r25, r31
    185c:	08 95       	ret

0000185e <strnlen>:
    185e:	fc 01       	movw	r30, r24
    1860:	61 50       	subi	r22, 0x01	; 1
    1862:	70 40       	sbci	r23, 0x00	; 0
    1864:	01 90       	ld	r0, Z+
    1866:	01 10       	cpse	r0, r1
    1868:	d8 f7       	brcc	.-10     	; 0x1860 <strnlen+0x2>
    186a:	80 95       	com	r24
    186c:	90 95       	com	r25
    186e:	8e 0f       	add	r24, r30
    1870:	9f 1f       	adc	r25, r31
    1872:	08 95       	ret

00001874 <fputc>:
    1874:	0f 93       	push	r16
    1876:	1f 93       	push	r17
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	fb 01       	movw	r30, r22
    187e:	23 81       	ldd	r18, Z+3	; 0x03
    1880:	21 fd       	sbrc	r18, 1
    1882:	03 c0       	rjmp	.+6      	; 0x188a <fputc+0x16>
    1884:	8f ef       	ldi	r24, 0xFF	; 255
    1886:	9f ef       	ldi	r25, 0xFF	; 255
    1888:	2c c0       	rjmp	.+88     	; 0x18e2 <fputc+0x6e>
    188a:	22 ff       	sbrs	r18, 2
    188c:	16 c0       	rjmp	.+44     	; 0x18ba <fputc+0x46>
    188e:	46 81       	ldd	r20, Z+6	; 0x06
    1890:	57 81       	ldd	r21, Z+7	; 0x07
    1892:	24 81       	ldd	r18, Z+4	; 0x04
    1894:	35 81       	ldd	r19, Z+5	; 0x05
    1896:	42 17       	cp	r20, r18
    1898:	53 07       	cpc	r21, r19
    189a:	44 f4       	brge	.+16     	; 0x18ac <fputc+0x38>
    189c:	a0 81       	ld	r26, Z
    189e:	b1 81       	ldd	r27, Z+1	; 0x01
    18a0:	9d 01       	movw	r18, r26
    18a2:	2f 5f       	subi	r18, 0xFF	; 255
    18a4:	3f 4f       	sbci	r19, 0xFF	; 255
    18a6:	31 83       	std	Z+1, r19	; 0x01
    18a8:	20 83       	st	Z, r18
    18aa:	8c 93       	st	X, r24
    18ac:	26 81       	ldd	r18, Z+6	; 0x06
    18ae:	37 81       	ldd	r19, Z+7	; 0x07
    18b0:	2f 5f       	subi	r18, 0xFF	; 255
    18b2:	3f 4f       	sbci	r19, 0xFF	; 255
    18b4:	37 83       	std	Z+7, r19	; 0x07
    18b6:	26 83       	std	Z+6, r18	; 0x06
    18b8:	14 c0       	rjmp	.+40     	; 0x18e2 <fputc+0x6e>
    18ba:	8b 01       	movw	r16, r22
    18bc:	ec 01       	movw	r28, r24
    18be:	fb 01       	movw	r30, r22
    18c0:	00 84       	ldd	r0, Z+8	; 0x08
    18c2:	f1 85       	ldd	r31, Z+9	; 0x09
    18c4:	e0 2d       	mov	r30, r0
    18c6:	09 95       	icall
    18c8:	89 2b       	or	r24, r25
    18ca:	e1 f6       	brne	.-72     	; 0x1884 <fputc+0x10>
    18cc:	d8 01       	movw	r26, r16
    18ce:	16 96       	adiw	r26, 0x06	; 6
    18d0:	8d 91       	ld	r24, X+
    18d2:	9c 91       	ld	r25, X
    18d4:	17 97       	sbiw	r26, 0x07	; 7
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	17 96       	adiw	r26, 0x07	; 7
    18da:	9c 93       	st	X, r25
    18dc:	8e 93       	st	-X, r24
    18de:	16 97       	sbiw	r26, 0x06	; 6
    18e0:	ce 01       	movw	r24, r28
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <__ultoa_invert>:
    18ec:	fa 01       	movw	r30, r20
    18ee:	aa 27       	eor	r26, r26
    18f0:	28 30       	cpi	r18, 0x08	; 8
    18f2:	51 f1       	breq	.+84     	; 0x1948 <__ultoa_invert+0x5c>
    18f4:	20 31       	cpi	r18, 0x10	; 16
    18f6:	81 f1       	breq	.+96     	; 0x1958 <__ultoa_invert+0x6c>
    18f8:	e8 94       	clt
    18fa:	6f 93       	push	r22
    18fc:	6e 7f       	andi	r22, 0xFE	; 254
    18fe:	6e 5f       	subi	r22, 0xFE	; 254
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	8f 4f       	sbci	r24, 0xFF	; 255
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	af 4f       	sbci	r26, 0xFF	; 255
    1908:	b1 e0       	ldi	r27, 0x01	; 1
    190a:	3e d0       	rcall	.+124    	; 0x1988 <__ultoa_invert+0x9c>
    190c:	b4 e0       	ldi	r27, 0x04	; 4
    190e:	3c d0       	rcall	.+120    	; 0x1988 <__ultoa_invert+0x9c>
    1910:	67 0f       	add	r22, r23
    1912:	78 1f       	adc	r23, r24
    1914:	89 1f       	adc	r24, r25
    1916:	9a 1f       	adc	r25, r26
    1918:	a1 1d       	adc	r26, r1
    191a:	68 0f       	add	r22, r24
    191c:	79 1f       	adc	r23, r25
    191e:	8a 1f       	adc	r24, r26
    1920:	91 1d       	adc	r25, r1
    1922:	a1 1d       	adc	r26, r1
    1924:	6a 0f       	add	r22, r26
    1926:	71 1d       	adc	r23, r1
    1928:	81 1d       	adc	r24, r1
    192a:	91 1d       	adc	r25, r1
    192c:	a1 1d       	adc	r26, r1
    192e:	20 d0       	rcall	.+64     	; 0x1970 <__ultoa_invert+0x84>
    1930:	09 f4       	brne	.+2      	; 0x1934 <__ultoa_invert+0x48>
    1932:	68 94       	set
    1934:	3f 91       	pop	r19
    1936:	2a e0       	ldi	r18, 0x0A	; 10
    1938:	26 9f       	mul	r18, r22
    193a:	11 24       	eor	r1, r1
    193c:	30 19       	sub	r19, r0
    193e:	30 5d       	subi	r19, 0xD0	; 208
    1940:	31 93       	st	Z+, r19
    1942:	de f6       	brtc	.-74     	; 0x18fa <__ultoa_invert+0xe>
    1944:	cf 01       	movw	r24, r30
    1946:	08 95       	ret
    1948:	46 2f       	mov	r20, r22
    194a:	47 70       	andi	r20, 0x07	; 7
    194c:	40 5d       	subi	r20, 0xD0	; 208
    194e:	41 93       	st	Z+, r20
    1950:	b3 e0       	ldi	r27, 0x03	; 3
    1952:	0f d0       	rcall	.+30     	; 0x1972 <__ultoa_invert+0x86>
    1954:	c9 f7       	brne	.-14     	; 0x1948 <__ultoa_invert+0x5c>
    1956:	f6 cf       	rjmp	.-20     	; 0x1944 <__ultoa_invert+0x58>
    1958:	46 2f       	mov	r20, r22
    195a:	4f 70       	andi	r20, 0x0F	; 15
    195c:	40 5d       	subi	r20, 0xD0	; 208
    195e:	4a 33       	cpi	r20, 0x3A	; 58
    1960:	18 f0       	brcs	.+6      	; 0x1968 <__ultoa_invert+0x7c>
    1962:	49 5d       	subi	r20, 0xD9	; 217
    1964:	31 fd       	sbrc	r19, 1
    1966:	40 52       	subi	r20, 0x20	; 32
    1968:	41 93       	st	Z+, r20
    196a:	02 d0       	rcall	.+4      	; 0x1970 <__ultoa_invert+0x84>
    196c:	a9 f7       	brne	.-22     	; 0x1958 <__ultoa_invert+0x6c>
    196e:	ea cf       	rjmp	.-44     	; 0x1944 <__ultoa_invert+0x58>
    1970:	b4 e0       	ldi	r27, 0x04	; 4
    1972:	a6 95       	lsr	r26
    1974:	97 95       	ror	r25
    1976:	87 95       	ror	r24
    1978:	77 95       	ror	r23
    197a:	67 95       	ror	r22
    197c:	ba 95       	dec	r27
    197e:	c9 f7       	brne	.-14     	; 0x1972 <__ultoa_invert+0x86>
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	61 05       	cpc	r22, r1
    1984:	71 05       	cpc	r23, r1
    1986:	08 95       	ret
    1988:	9b 01       	movw	r18, r22
    198a:	ac 01       	movw	r20, r24
    198c:	0a 2e       	mov	r0, r26
    198e:	06 94       	lsr	r0
    1990:	57 95       	ror	r21
    1992:	47 95       	ror	r20
    1994:	37 95       	ror	r19
    1996:	27 95       	ror	r18
    1998:	ba 95       	dec	r27
    199a:	c9 f7       	brne	.-14     	; 0x198e <__ultoa_invert+0xa2>
    199c:	62 0f       	add	r22, r18
    199e:	73 1f       	adc	r23, r19
    19a0:	84 1f       	adc	r24, r20
    19a2:	95 1f       	adc	r25, r21
    19a4:	a0 1d       	adc	r26, r0
    19a6:	08 95       	ret

000019a8 <eeprom_read_byte>:
    19a8:	f9 99       	sbic	0x1f, 1	; 31
    19aa:	fe cf       	rjmp	.-4      	; 0x19a8 <eeprom_read_byte>
    19ac:	92 bd       	out	0x22, r25	; 34
    19ae:	81 bd       	out	0x21, r24	; 33
    19b0:	f8 9a       	sbi	0x1f, 0	; 31
    19b2:	99 27       	eor	r25, r25
    19b4:	80 b5       	in	r24, 0x20	; 32
    19b6:	08 95       	ret

000019b8 <eeprom_write_byte>:
    19b8:	26 2f       	mov	r18, r22

000019ba <eeprom_write_r18>:
    19ba:	f9 99       	sbic	0x1f, 1	; 31
    19bc:	fe cf       	rjmp	.-4      	; 0x19ba <eeprom_write_r18>
    19be:	1f ba       	out	0x1f, r1	; 31
    19c0:	92 bd       	out	0x22, r25	; 34
    19c2:	81 bd       	out	0x21, r24	; 33
    19c4:	20 bd       	out	0x20, r18	; 32
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	fa 9a       	sbi	0x1f, 2	; 31
    19cc:	f9 9a       	sbi	0x1f, 1	; 31
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	08 95       	ret

000019d4 <__divmodsi4>:
    19d4:	05 2e       	mov	r0, r21
    19d6:	97 fb       	bst	r25, 7
    19d8:	16 f4       	brtc	.+4      	; 0x19de <__divmodsi4+0xa>
    19da:	00 94       	com	r0
    19dc:	0f d0       	rcall	.+30     	; 0x19fc <__negsi2>
    19de:	57 fd       	sbrc	r21, 7
    19e0:	05 d0       	rcall	.+10     	; 0x19ec <__divmodsi4_neg2>
    19e2:	24 d0       	rcall	.+72     	; 0x1a2c <__udivmodsi4>
    19e4:	07 fc       	sbrc	r0, 7
    19e6:	02 d0       	rcall	.+4      	; 0x19ec <__divmodsi4_neg2>
    19e8:	46 f4       	brtc	.+16     	; 0x19fa <__divmodsi4_exit>
    19ea:	08 c0       	rjmp	.+16     	; 0x19fc <__negsi2>

000019ec <__divmodsi4_neg2>:
    19ec:	50 95       	com	r21
    19ee:	40 95       	com	r20
    19f0:	30 95       	com	r19
    19f2:	21 95       	neg	r18
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	4f 4f       	sbci	r20, 0xFF	; 255
    19f8:	5f 4f       	sbci	r21, 0xFF	; 255

000019fa <__divmodsi4_exit>:
    19fa:	08 95       	ret

000019fc <__negsi2>:
    19fc:	90 95       	com	r25
    19fe:	80 95       	com	r24
    1a00:	70 95       	com	r23
    1a02:	61 95       	neg	r22
    1a04:	7f 4f       	sbci	r23, 0xFF	; 255
    1a06:	8f 4f       	sbci	r24, 0xFF	; 255
    1a08:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0a:	08 95       	ret

00001a0c <__muluhisi3>:
    1a0c:	31 d0       	rcall	.+98     	; 0x1a70 <__umulhisi3>
    1a0e:	a5 9f       	mul	r26, r21
    1a10:	90 0d       	add	r25, r0
    1a12:	b4 9f       	mul	r27, r20
    1a14:	90 0d       	add	r25, r0
    1a16:	a4 9f       	mul	r26, r20
    1a18:	80 0d       	add	r24, r0
    1a1a:	91 1d       	adc	r25, r1
    1a1c:	11 24       	eor	r1, r1
    1a1e:	08 95       	ret

00001a20 <__mulshisi3>:
    1a20:	b7 ff       	sbrs	r27, 7
    1a22:	f4 cf       	rjmp	.-24     	; 0x1a0c <__muluhisi3>

00001a24 <__mulohisi3>:
    1a24:	f3 df       	rcall	.-26     	; 0x1a0c <__muluhisi3>
    1a26:	82 1b       	sub	r24, r18
    1a28:	93 0b       	sbc	r25, r19
    1a2a:	08 95       	ret

00001a2c <__udivmodsi4>:
    1a2c:	a1 e2       	ldi	r26, 0x21	; 33
    1a2e:	1a 2e       	mov	r1, r26
    1a30:	aa 1b       	sub	r26, r26
    1a32:	bb 1b       	sub	r27, r27
    1a34:	fd 01       	movw	r30, r26
    1a36:	0d c0       	rjmp	.+26     	; 0x1a52 <__udivmodsi4_ep>

00001a38 <__udivmodsi4_loop>:
    1a38:	aa 1f       	adc	r26, r26
    1a3a:	bb 1f       	adc	r27, r27
    1a3c:	ee 1f       	adc	r30, r30
    1a3e:	ff 1f       	adc	r31, r31
    1a40:	a2 17       	cp	r26, r18
    1a42:	b3 07       	cpc	r27, r19
    1a44:	e4 07       	cpc	r30, r20
    1a46:	f5 07       	cpc	r31, r21
    1a48:	20 f0       	brcs	.+8      	; 0x1a52 <__udivmodsi4_ep>
    1a4a:	a2 1b       	sub	r26, r18
    1a4c:	b3 0b       	sbc	r27, r19
    1a4e:	e4 0b       	sbc	r30, r20
    1a50:	f5 0b       	sbc	r31, r21

00001a52 <__udivmodsi4_ep>:
    1a52:	66 1f       	adc	r22, r22
    1a54:	77 1f       	adc	r23, r23
    1a56:	88 1f       	adc	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	1a 94       	dec	r1
    1a5c:	69 f7       	brne	.-38     	; 0x1a38 <__udivmodsi4_loop>
    1a5e:	60 95       	com	r22
    1a60:	70 95       	com	r23
    1a62:	80 95       	com	r24
    1a64:	90 95       	com	r25
    1a66:	9b 01       	movw	r18, r22
    1a68:	ac 01       	movw	r20, r24
    1a6a:	bd 01       	movw	r22, r26
    1a6c:	cf 01       	movw	r24, r30
    1a6e:	08 95       	ret

00001a70 <__umulhisi3>:
    1a70:	a2 9f       	mul	r26, r18
    1a72:	b0 01       	movw	r22, r0
    1a74:	b3 9f       	mul	r27, r19
    1a76:	c0 01       	movw	r24, r0
    1a78:	a3 9f       	mul	r26, r19
    1a7a:	70 0d       	add	r23, r0
    1a7c:	81 1d       	adc	r24, r1
    1a7e:	11 24       	eor	r1, r1
    1a80:	91 1d       	adc	r25, r1
    1a82:	b2 9f       	mul	r27, r18
    1a84:	70 0d       	add	r23, r0
    1a86:	81 1d       	adc	r24, r1
    1a88:	11 24       	eor	r1, r1
    1a8a:	91 1d       	adc	r25, r1
    1a8c:	08 95       	ret

00001a8e <_exit>:
    1a8e:	f8 94       	cli

00001a90 <__stop_program>:
    1a90:	ff cf       	rjmp	.-2      	; 0x1a90 <__stop_program>
