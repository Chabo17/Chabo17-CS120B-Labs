
cbott001_lab5_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ba  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bf  00000000  00000000  00000b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d4  00000000  00000000  000012e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000407  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001b0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	5b c0       	rjmp	.+182    	; 0xbc <__bad_interrupt>
   6:	00 00       	nop
   8:	59 c0       	rjmp	.+178    	; 0xbc <__bad_interrupt>
   a:	00 00       	nop
   c:	57 c0       	rjmp	.+174    	; 0xbc <__bad_interrupt>
   e:	00 00       	nop
  10:	55 c0       	rjmp	.+170    	; 0xbc <__bad_interrupt>
  12:	00 00       	nop
  14:	53 c0       	rjmp	.+166    	; 0xbc <__bad_interrupt>
  16:	00 00       	nop
  18:	51 c0       	rjmp	.+162    	; 0xbc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4f c0       	rjmp	.+158    	; 0xbc <__bad_interrupt>
  1e:	00 00       	nop
  20:	4d c0       	rjmp	.+154    	; 0xbc <__bad_interrupt>
  22:	00 00       	nop
  24:	4b c0       	rjmp	.+150    	; 0xbc <__bad_interrupt>
  26:	00 00       	nop
  28:	49 c0       	rjmp	.+146    	; 0xbc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	47 c0       	rjmp	.+142    	; 0xbc <__bad_interrupt>
  2e:	00 00       	nop
  30:	45 c0       	rjmp	.+138    	; 0xbc <__bad_interrupt>
  32:	00 00       	nop
  34:	43 c0       	rjmp	.+134    	; 0xbc <__bad_interrupt>
  36:	00 00       	nop
  38:	41 c0       	rjmp	.+130    	; 0xbc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3f c0       	rjmp	.+126    	; 0xbc <__bad_interrupt>
  3e:	00 00       	nop
  40:	3d c0       	rjmp	.+122    	; 0xbc <__bad_interrupt>
  42:	00 00       	nop
  44:	3b c0       	rjmp	.+118    	; 0xbc <__bad_interrupt>
  46:	00 00       	nop
  48:	39 c0       	rjmp	.+114    	; 0xbc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	37 c0       	rjmp	.+110    	; 0xbc <__bad_interrupt>
  4e:	00 00       	nop
  50:	35 c0       	rjmp	.+106    	; 0xbc <__bad_interrupt>
  52:	00 00       	nop
  54:	33 c0       	rjmp	.+102    	; 0xbc <__bad_interrupt>
  56:	00 00       	nop
  58:	31 c0       	rjmp	.+98     	; 0xbc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2f c0       	rjmp	.+94     	; 0xbc <__bad_interrupt>
  5e:	00 00       	nop
  60:	2d c0       	rjmp	.+90     	; 0xbc <__bad_interrupt>
  62:	00 00       	nop
  64:	2b c0       	rjmp	.+86     	; 0xbc <__bad_interrupt>
  66:	00 00       	nop
  68:	29 c0       	rjmp	.+82     	; 0xbc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	27 c0       	rjmp	.+78     	; 0xbc <__bad_interrupt>
  6e:	00 00       	nop
  70:	25 c0       	rjmp	.+74     	; 0xbc <__bad_interrupt>
  72:	00 00       	nop
  74:	23 c0       	rjmp	.+70     	; 0xbc <__bad_interrupt>
  76:	00 00       	nop
  78:	21 c0       	rjmp	.+66     	; 0xbc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1f c0       	rjmp	.+62     	; 0xbc <__bad_interrupt>
  7e:	00 00       	nop
  80:	1d c0       	rjmp	.+58     	; 0xbc <__bad_interrupt>
  82:	00 00       	nop
  84:	1b c0       	rjmp	.+54     	; 0xbc <__bad_interrupt>
  86:	00 00       	nop
  88:	19 c0       	rjmp	.+50     	; 0xbc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	95 00       	.word	0x0095	; ????
  8e:	95 00       	.word	0x0095	; ????
  90:	95 00       	.word	0x0095	; ????
  92:	98 00       	.word	0x0098	; ????
  94:	98 00       	.word	0x0098	; ????
  96:	9b 00       	.word	0x009b	; ????
  98:	9b 00       	.word	0x009b	; ????
  9a:	9e 00       	.word	0x009e	; ????
  9c:	9e 00       	.word	0x009e	; ????
  9e:	9e 00       	.word	0x009e	; ????
  a0:	a1 00       	.word	0x00a1	; ????
  a2:	a1 00       	.word	0x00a1	; ????
  a4:	a1 00       	.word	0x00a1	; ????
  a6:	a4 00       	.word	0x00a4	; ????
  a8:	a4 00       	.word	0x00a4	; ????
  aa:	a4 00       	.word	0x00a4	; ????

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e4       	ldi	r29, 0x40	; 64
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	02 d0       	rcall	.+4      	; 0xbe <main>
  ba:	59 c0       	rjmp	.+178    	; 0x16e <_exit>

000000bc <__bad_interrupt>:
  bc:	a1 cf       	rjmp	.-190    	; 0x0 <__vectors>

000000be <main>:
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}


int main(void)
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	00 d0       	rcall	.+0      	; 0xc4 <main+0x6>
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
    //ok so A0-3 is what the fuel level is at
	// then PC5-0 should graphically show what the fuel is at starts at C5 and you add more bits when you go up by 2
	//PC6 is low fuel and it lights up when fuel is 4 or less
	
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs, initialize to 1s
  c8:	81 e2       	ldi	r24, 0x21	; 33
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	10 82       	st	Z, r1
  d0:	82 e2       	ldi	r24, 0x22	; 34
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
  da:	84 e2       	ldi	r24, 0x24	; 36
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
  e4:	85 e2       	ldi	r24, 0x25	; 37
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	fc 01       	movw	r30, r24
  ea:	10 82       	st	Z, r1
    while (1) 
    {
		unsigned char temp = ~PINA & 0x0F;
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	fc 01       	movw	r30, r24
  f2:	80 81       	ld	r24, Z
  f4:	80 95       	com	r24
  f6:	8f 70       	andi	r24, 0x0F	; 15
  f8:	8a 83       	std	Y+2, r24	; 0x02
		unsigned char tmpC = 0x00;
  fa:	19 82       	std	Y+1, r1	; 0x01
		temp = temp & 0x0F;
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	8a 83       	std	Y+2, r24	; 0x02
		
		switch(temp){
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	88 2f       	mov	r24, r24
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	09 2e       	mov	r0, r25
 10a:	00 0c       	add	r0, r0
 10c:	aa 0b       	sbc	r26, r26
 10e:	bb 0b       	sbc	r27, r27
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	2f e0       	ldi	r18, 0x0F	; 15
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	84 1b       	sub	r24, r20
 11a:	95 0b       	sbc	r25, r21
 11c:	28 17       	cp	r18, r24
 11e:	39 07       	cpc	r19, r25
 120:	b0 f0       	brcs	.+44     	; 0x14e <main+0x90>
 122:	8a 5b       	subi	r24, 0xBA	; 186
 124:	9f 4f       	sbci	r25, 0xFF	; 255
 126:	fc 01       	movw	r30, r24
 128:	19 c0       	rjmp	.+50     	; 0x15c <__tablejump2__>
		case 0:
		case 1:
		case 2:
		tmpC = 0x60;
 12a:	80 e6       	ldi	r24, 0x60	; 96
 12c:	89 83       	std	Y+1, r24	; 0x01
		break;	
 12e:	10 c0       	rjmp	.+32     	; 0x150 <main+0x92>
		
		case 3:
		case 4:
		tmpC = 0x70;
 130:	80 e7       	ldi	r24, 0x70	; 112
 132:	89 83       	std	Y+1, r24	; 0x01
		break;
 134:	0d c0       	rjmp	.+26     	; 0x150 <main+0x92>
		
		case 5:
		case 6:
		tmpC = 0x38;
 136:	88 e3       	ldi	r24, 0x38	; 56
 138:	89 83       	std	Y+1, r24	; 0x01
		break;
 13a:	0a c0       	rjmp	.+20     	; 0x150 <main+0x92>
		
		case 7:
		case 8:
		case 9:
		tmpC = 0x3C;
 13c:	8c e3       	ldi	r24, 0x3C	; 60
 13e:	89 83       	std	Y+1, r24	; 0x01
		break;
 140:	07 c0       	rjmp	.+14     	; 0x150 <main+0x92>
		
		case 10:
		case 11:
		case 12:
		tmpC = 0x3E;
 142:	8e e3       	ldi	r24, 0x3E	; 62
 144:	89 83       	std	Y+1, r24	; 0x01
		break;
 146:	04 c0       	rjmp	.+8      	; 0x150 <main+0x92>
		
		case 13:
		case 14:
		case 15:
		tmpC = 0x3F;
 148:	8f e3       	ldi	r24, 0x3F	; 63
 14a:	89 83       	std	Y+1, r24	; 0x01
		break ;
 14c:	01 c0       	rjmp	.+2      	; 0x150 <main+0x92>
		
		default:
		break;
 14e:	00 00       	nop
			
		}
		
		PORTB = tmpC;
 150:	85 e2       	ldi	r24, 0x25	; 37
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	29 81       	ldd	r18, Y+1	; 0x01
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
    }
 15a:	c8 cf       	rjmp	.-112    	; 0xec <main+0x2e>

0000015c <__tablejump2__>:
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	00 24       	eor	r0, r0
 162:	00 1c       	adc	r0, r0
 164:	0b be       	out	0x3b, r0	; 59
 166:	07 90       	elpm	r0, Z+
 168:	f6 91       	elpm	r31, Z
 16a:	e0 2d       	mov	r30, r0
 16c:	09 94       	ijmp

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
