
cbott001_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000856  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079d  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ac  00000000  00000000  000011eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fc  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d5  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000198d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	3a c0       	rjmp	.+116    	; 0x110 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
 */ 
#include <avr/io.h>

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure PORTA as input, initialize to 1s
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // Configure PORTB as outputs, initialize to 0s
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	15 b8       	out	0x05, r1	; 5
	unsigned char led = 7;	
	unsigned char button = 0x00;
	unsigned char b2 = 0x00;
	unsigned char state =0x00;
  a8:	90 e0       	ldi	r25, 0x00	; 0

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure PORTA as input, initialize to 1s
	DDRB = 0xFF; PORTB = 0x00; // Configure PORTB as outputs, initialize to 0s
	unsigned char led = 7;	
  aa:	47 e0       	ldi	r20, 0x07	; 7
				led = led +1;
				state = 1;
			}else if(b2){
				if(led > 0 )
				led = led -1;
				state =1;
  ac:	51 e0       	ldi	r21, 0x01	; 1
			if(button == b2){
				state =0;
			}
			break;
		default:
			state =0;
  ae:	70 e0       	ldi	r23, 0x00	; 0
	unsigned char state =0x00;
	while(1)
	{
		// if PA0 is 1, set PB1PB0=01, else =10
		// 1) Read inputs
		button = ~PINA & 0x01; // button is connected to A0
  b0:	80 b1       	in	r24, 0x00	; 0
  b2:	28 2f       	mov	r18, r24
  b4:	21 70       	andi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
		b2 = ~PINA & 0x02;
  b8:	80 b1       	in	r24, 0x00	; 0
  ba:	80 95       	com	r24
		b2 = b2 >> 1;
  bc:	86 95       	lsr	r24
  be:	81 70       	andi	r24, 0x01	; 1
		switch(state){
  c0:	99 23       	and	r25, r25
  c2:	19 f0       	breq	.+6      	; 0xca <main+0x2c>
  c4:	91 30       	cpi	r25, 0x01	; 1
  c6:	89 f0       	breq	.+34     	; 0xea <main+0x4c>
  c8:	19 c0       	rjmp	.+50     	; 0xfc <main+0x5e>
		case 0:
			if(button && b2){
  ca:	23 2b       	or	r18, r19
  cc:	39 f4       	brne	.+14     	; 0xdc <main+0x3e>
  ce:	81 11       	cpse	r24, r1
  d0:	17 c0       	rjmp	.+46     	; 0x100 <main+0x62>
				led = 0;
				state = 1;
			}else if(button){
				if(led <9)
  d2:	49 30       	cpi	r20, 0x09	; 9
  d4:	c0 f4       	brcc	.+48     	; 0x106 <main+0x68>
				led = led +1;
  d6:	4f 5f       	subi	r20, 0xFF	; 255
				state = 1;
  d8:	95 2f       	mov	r25, r21
  da:	18 c0       	rjmp	.+48     	; 0x10c <main+0x6e>
			}else if(b2){
  dc:	88 23       	and	r24, r24
  de:	b1 f0       	breq	.+44     	; 0x10c <main+0x6e>
				if(led > 0 )
  e0:	44 23       	and	r20, r20
  e2:	99 f0       	breq	.+38     	; 0x10a <main+0x6c>
				led = led -1;
  e4:	41 50       	subi	r20, 0x01	; 1
				state =1;
  e6:	95 2f       	mov	r25, r21
  e8:	11 c0       	rjmp	.+34     	; 0x10c <main+0x6e>
				led = 0;
				state = 1;
			}else if(button){
				if(led <9)
				led = led +1;
				state = 1;
  ea:	65 2f       	mov	r22, r21
  ec:	23 2b       	or	r18, r19
  ee:	09 f0       	breq	.+2      	; 0xf2 <main+0x54>
  f0:	67 2f       	mov	r22, r23
  f2:	95 2f       	mov	r25, r21
  f4:	68 13       	cpse	r22, r24
  f6:	0a c0       	rjmp	.+20     	; 0x10c <main+0x6e>
  f8:	97 2f       	mov	r25, r23
  fa:	08 c0       	rjmp	.+16     	; 0x10c <main+0x6e>
			if(button == b2){
				state =0;
			}
			break;
		default:
			state =0;
  fc:	97 2f       	mov	r25, r23
  fe:	06 c0       	rjmp	.+12     	; 0x10c <main+0x6e>
		b2 = b2 >> 1;
		switch(state){
		case 0:
			if(button && b2){
				led = 0;
				state = 1;
 100:	95 2f       	mov	r25, r21
		b2 = ~PINA & 0x02;
		b2 = b2 >> 1;
		switch(state){
		case 0:
			if(button && b2){
				led = 0;
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	03 c0       	rjmp	.+6      	; 0x10c <main+0x6e>
				state = 1;
			}else if(button){
				if(led <9)
				led = led +1;
				state = 1;
 106:	95 2f       	mov	r25, r21
 108:	01 c0       	rjmp	.+2      	; 0x10c <main+0x6e>
			}else if(b2){
				if(led > 0 )
				led = led -1;
				state =1;
 10a:	95 2f       	mov	r25, r21
			}
	
			
		
// 3) Write output 
		PORTB = led;		
 10c:	45 b9       	out	0x05, r20	; 5
	}
 10e:	d0 cf       	rjmp	.-96     	; 0xb0 <main+0x12>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
